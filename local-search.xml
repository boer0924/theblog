<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>打破认知边界·融入未来世界</title>
    <link href="/2020/06/18/theai-train/"/>
    <url>/2020/06/18/theai-train/</url>
    
    <content type="html"><![CDATA[<p>《打破认知边界·融入未来世界》培训心得</p><h3 id="不管你接受不接受-人工智能都来了"><a href="#不管你接受不接受-人工智能都来了" class="headerlink" title="不管你接受不接受,人工智能都来了"></a>不管你接受不接受,人工智能都来了</h3><p>不管是从国家战略「新基建」主要包含5G基建、特高压、城际高速铁路和城际轨道交通、新能源汽车充电桩、大数据中心、人工智能、工业互联网等七大领域。人工智能屹立其中。<br>还是从你能”触摸”的人工智能：苹果公司的语音助手Siri；微软公司的人工智能助理Cortana(小娜)；小米科技打造的智能化语音助手小爱同学及其后续产品小爱音箱等一大批AI产品等。<br>最后到2016年，李世石与谷歌deepmind团队打造的AlphaGo对弈失败的直播震惊了世界，其后中国棋手柯洁同样惨败于AlphaGo的蒙特卡洛树算法之下。<br>这时方才知道，AI距离我们如此之近，AI的运用场景如此广泛。</p><a id="more"></a><p>AI在某一个方面战胜人类可能只是个时间早晚的问题<br>而在十几年前IBM的深蓝服务器和国际象棋大师卡斯帕罗夫对战时候，人们还是很惊愕，世界舆论哗然一片。<br>历史总是惊人相似，如果我们今天不努力、不反省、不学习，必然会被历史的车轮又一次碾碎。</p><h3 id="自省力"><a href="#自省力" class="headerlink" title="自省力"></a>自省力</h3><p>不能只满足我们引以为自豪的5G，更应该看到SpaceX推出的星链计划(Starlink)对世界格局的扭转<br>自卑之人，不敢反省<br>虚弱之人，逃避问题<br>自负之人，不屑于反省<br>自我之人，不懂得反省<br>好强之人，不愿反省</p><h3 id="学习力"><a href="#学习力" class="headerlink" title="学习力"></a>学习力</h3><p>未来企业和个人竞争力取决于学习力。 学习力=学习动力+学习毅力+学习能力=把知识转换化为智慧和知识资本=竞争力<br>学习动力是内在的驱动力，包括需要、情感和兴趣<br>学习毅力是学习意志，学习意志是驱使目标和克服困难的目标管理能力。<br>学习能力是感知力、记忆力、思维力、逻辑力、想象力等的总和，亦因此而形成对知识和信息的采集、存储、处理、决策、应用能力的基础性智力，是学习力的基础因素。<br>每天进步一盎司，摆脱功利和浮躁。<br>让学习无处不在，化于无形，溶于血液，变成习惯。<br>用心倾听世界和他人，并保持同理心和换位本能</p><p>所以“真正的敌人是我们自己” “凡是你排斥的，都是你应该学习的。”</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>你的心态才是你的真正主人。<br>你的最大的敌人往往是你自己。<br>你的思维往往决定你的高度。<br>你的心胸往往决定你的快（痛）感。<br>你的认知边界最终决定你的世界。</p>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Openconnect VPN</title>
    <link href="/2020/05/10/oc-vpn-connect/"/>
    <url>/2020/05/10/oc-vpn-connect/</url>
    
    <content type="html"><![CDATA[<p>2020年已注定是不平凡的一年<br>新冠肺炎疫情<br>科比逝世<br>……<br>疫情影响下各个公司启动远程办公，VPN成了必不可少的服务。</p><p><a href="http://www.infradead.org/openconnect/" target="_blank" rel="noopener">http://www.infradead.org/openconnect/</a><br>Openconnect server (ocserv) is an SSL VPN server for administrators who require elaborate user management and control. Openconnect server provides user management interfaces and back-ends necessary in enterprise environments, as well as security features, such as isolation of connected clients, features currently not available to any existing VPN servers.</p><a id="more"></a><h3 id="1-安装ocserv"><a href="#1-安装ocserv" class="headerlink" title="1. 安装ocserv"></a>1. 安装ocserv</h3><div class="hljs"><pre><code class="hljs bash"><span class="hljs-comment"># ocserv 已经在epel仓库中提供了，所以可以直接通过yum安装</span>yum install epel-releaseyum install ocserv</code></pre></div><h3 id="2-创建-CA"><a href="#2-创建-CA" class="headerlink" title="2. 创建 CA"></a>2. 创建 CA</h3><div class="hljs"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /etc/ocservmkdir CA<span class="hljs-built_in">cd</span> CA<span class="hljs-comment">## Root CA</span>vim ca.tmplcn = <span class="hljs-string">"boer"</span> organization = <span class="hljs-string">"boer"</span> serial = 1 expiration_days = 3650ca signing_key cert_signing_key crl_signing_key<span class="hljs-comment"># Root CA 密钥</span>certtool --generate-privkey --outfile ca-key.pem<span class="hljs-comment"># 签发证书</span>certtool --generate-self-signed --load-privkey ca-key.pem --template ca.tmpl --outfile ca-cert.pem<span class="hljs-comment">## Server CA</span>vim server.tmpl<span class="hljs-comment">#cn 为服务器密码或者执行该服务器的域名</span>cn = <span class="hljs-string">"vpn.boer.xyz"</span> organization = <span class="hljs-string">"boer"</span> expiration_days = 3650signing_key encryption_keytls_www_server<span class="hljs-comment"># Server 密钥</span>certtool --generate-privkey --outfile server-key.pem<span class="hljs-comment"># 签发证书</span>certtool --generate-certificate --load-privkey server-key.pem --load-ca-certificate ca-cert.pem --load-ca-privkey ca-key.pem --template server.tmpl --outfile server-cert.pem<span class="hljs-comment"># 证书路径（上述步骤创建）：</span>/etc/ocserv/CA/ca-cert.pem /etc/ocserv/CA/server-cert.pem/etc/ocserv/CA/server-key.pem</code></pre></div><h3 id="3-配置文件"><a href="#3-配置文件" class="headerlink" title="3. 配置文件"></a>3. 配置文件</h3><div class="hljs"><pre><code class="hljs bash"><span class="hljs-comment"># 创建路由分组管理目录</span>mkdir -p /etc/ocserv/groupvim /etc/ocserv/ocserv.confauth = <span class="hljs-string">"plain[/etc/ocserv/ocpasswd]"</span>tcp-port = 443 <span class="hljs-comment"># *</span>run-as-user = ocservrun-as-group = ocservconfig-per-group = /etc/ocserv/group/ <span class="hljs-comment"># *</span>default-group-config = /etc/ocserv/group/Defaultdefault-select-group = Defaultauto-select-group = <span class="hljs-literal">false</span> socket-file = ocserv.sockchroot-dir = /var/lib/ocservisolate-workers = <span class="hljs-literal">true</span>max-clients = 50 <span class="hljs-comment"># *</span>max-same-clients = 2keepalive = 32400dpd = 90mobile-dpd = 1800switch-to-tcp-timeout = 25try-mtu-discovery = <span class="hljs-literal">true</span> <span class="hljs-comment"># false</span>server-cert = /etc/ocserv/CA/server-cert.pem <span class="hljs-comment"># *</span>server-key = /etc/ocserv/CA/server-key.pem <span class="hljs-comment"># *</span>ca-cert = /etc/ocserv/CA/ca-cert.pem <span class="hljs-comment"># *</span>cert-user-oid = 2.5.4.3 <span class="hljs-comment"># 0.9.2342.19200300.100.1.1</span>tls-priorities = <span class="hljs-string">"NORMAL:%SERVER_PRECEDENCE:%COMPAT:-VERS-SSL3.0"</span>auth-timeout = 240min-reauth-time = 300max-ban-score = 0ban-reset-time = 300cookie-timeout = 300deny-roaming = <span class="hljs-literal">false</span>rekey-time = 172800rekey-method = ssluse-occtl = <span class="hljs-literal">true</span>pid-file = /var/run/ocserv.piddevice = vpnspredictable-ips = <span class="hljs-literal">true</span>default-domain = boer.xyz <span class="hljs-comment"># *</span>ipv4-network = 192.168.5.0/24 <span class="hljs-comment"># *</span>dns = 192.168.5.1 <span class="hljs-comment"># * 自建dns服务</span>split-dns = *.boer.xyz <span class="hljs-comment"># *</span>ping-leases = <span class="hljs-literal">false</span>cisco-client-compat = <span class="hljs-literal">true</span>dtls-legacy = <span class="hljs-literal">true</span>user-profile = profile.xml<span class="hljs-comment"># 创建一个登陆用的用户名与密码</span>ocpasswd -c /etc/ocserv/ocpasswd boer</code></pre></div><h3 id="4-转发与安全配置"><a href="#4-转发与安全配置" class="headerlink" title="4. 转发与安全配置"></a>4. 转发与安全配置</h3><ul><li>network 192.169.5.0/24 为/etc/ocserv/ocserv.conf中的ipv4-network = 192.168.5.0/24 </li><li>ocserv WAN interface 为eth0</li></ul><h4 id="4-1-修改内核配置"><a href="#4-1-修改内核配置" class="headerlink" title="4.1 修改内核配置"></a>4.1 修改内核配置</h4><div class="hljs"><pre><code class="hljs bash">vim /etc/sysctl.conf<span class="hljs-comment"># Protect from IP Spoofing</span>net.ipv4.conf.all.rp_filter = 1net.ipv4.conf.default.rp_filter = 1<span class="hljs-comment"># Ignore ICMP broadcast requests</span>net.ipv4.icmp_echo_ignore_broadcasts = 1<span class="hljs-comment"># Protect from bad icmp error messages</span>net.ipv4.icmp_ignore_bogus_error_responses = 1<span class="hljs-comment"># Disable source packet routing</span>net.ipv4.conf.all.accept_source_route = 0net.ipv6.conf.all.accept_source_route = 0net.ipv4.conf.default.accept_source_route = 0net.ipv6.conf.default.accept_source_route = 0<span class="hljs-comment"># Turn on exec shield</span>kernel.exec-shield = 1kernel.randomize_va_space = 1<span class="hljs-comment"># Block SYN attacks</span>net.ipv4.tcp_syncookies = 1net.ipv4.tcp_max_syn_backlog = 2048net.ipv4.tcp_synack_retries = 2net.ipv4.tcp_syn_retries = 5<span class="hljs-comment"># Log Martians</span>net.ipv4.conf.all.log_martians = 1net.ipv4.icmp_ignore_bogus_error_responses = 1<span class="hljs-comment"># Ignore send redirects</span>net.ipv4.conf.all.send_redirects = 0net.ipv4.conf.default.send_redirects = 0<span class="hljs-comment"># Ignore ICMP redirects</span>net.ipv4.conf.all.accept_redirects = 0net.ipv6.conf.all.accept_redirects = 0net.ipv4.conf.default.accept_redirects = 0net.ipv6.conf.default.accept_redirects = 0net.ipv4.conf.all.secure_redirects = 0net.ipv4.conf.default.secure_redirects = 0net.ipv6.conf.all.accept_ra = 2net.ipv6.conf.eth0.accept_ra = 2net.ipv4.ip_forward = 1</code></pre></div><p>使之生效： sysctl -p</p><h4 id="4-2-IPtables"><a href="#4-2-IPtables" class="headerlink" title="4.2 IPtables"></a>4.2 IPtables</h4><div class="hljs"><pre><code class="hljs bash">systemctl stop firewalldsystemctl <span class="hljs-built_in">disable</span> firewalldyum install iptables systemcctl start iptablessystemcctl <span class="hljs-built_in">enable</span> iptables</code></pre></div><h4 id="4-3-IPtables配置"><a href="#4-3-IPtables配置" class="headerlink" title="4.3 IPtables配置"></a>4.3 IPtables配置</h4><div class="hljs"><pre><code class="hljs bash">vim /etc/sysconfig/iptables<span class="hljs-comment"># sample configuration for iptables service</span><span class="hljs-comment"># you can edit this manually or use system-config-firewall</span><span class="hljs-comment"># please do not ask us to add additional ports/services to this default configuration</span><span class="hljs-comment">#*filter</span><span class="hljs-comment">#:INPUT ACCEPT [0:0]</span><span class="hljs-comment">#:FORWARD ACCEPT [0:0]</span><span class="hljs-comment">#:OUTPUT ACCEPT [0:0]</span><span class="hljs-comment">#-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</span><span class="hljs-comment">#-A INPUT -p icmp -j ACCEPT</span><span class="hljs-comment">#-A INPUT -i lo -j ACCEPT</span><span class="hljs-comment">#-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT</span><span class="hljs-comment">#-A INPUT -j REJECT --reject-with icmp-host-prohibited</span><span class="hljs-comment">#-A FORWARD -j REJECT --reject-with icmp-host-prohibited</span><span class="hljs-comment">#COMMIT</span><span class="hljs-comment">#</span>*nat:INPUT ACCEPT [0:0]:PREROUTING ACCEPT [0:0]:OUTPUT ACCEPT [0:0]:POSTROUTING ACCEPT [0:0]<span class="hljs-comment"># Generic NAT for LAN Network 192.168.5.0/24</span>-A POSTROUTING -s 192.168.5.0/24 -o eth0 -j MASQUERADECOMMIT*mangle:PREROUTING ACCEPT [0:0]:INPUT ACCEPT [0:0]:FORWARD ACCEPT [0:0]:OUTPUT ACCEPT [0:0]:POSTROUTING ACCEPT [0:0]COMMIT*filter:INPUT ACCEPT [0:0]:FORWARD ACCEPT [0:0]:OUTPUT ACCEPT [0:0]<span class="hljs-comment"># START INPUT RULES</span><span class="hljs-comment"># Stateful Rule - INPUT</span>-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT<span class="hljs-comment"># ACCEPT traffic from Loopback interface</span>-A INPUT -i lo -j ACCEPT<span class="hljs-comment"># ACCEPT SSH from LAN</span>-A INPUT -p tcp -m tcp -i eth0 --dport 22 -j ACCEPT<span class="hljs-comment"># ACCEPT DHCP from LAN</span>-A INPUT -p udp -m udp -i eth1 --dport 67:68 -j ACCEPT<span class="hljs-comment"># ACCEPT Webmin from LAN (Optional, only for Webmin users)</span>-A INPUT -p tcp -m tcp -i eth0 --dport 10000 -j ACCEPT<span class="hljs-comment"># ACCEPT DNS UDP From LAN</span>-A INPUT -p udp -m udp -i eth0 --dport 53 -j ACCEPT<span class="hljs-comment"># ACCEPT DNS TCP From LAN</span>-A INPUT -p tcp -m tcp -i eth0 --dport 53 -j ACCEPT<span class="hljs-comment"># ACCEPT ping from LAN</span>-A INPUT -p icmp --icmp-type <span class="hljs-built_in">echo</span>-request -i eth1 -j ACCEPT<span class="hljs-comment"># ACCEPT OpenConnect TCP From WAN</span>-A INPUT -p tcp -m tcp -i eth0 --dport 443 -j ACCEPT<span class="hljs-comment"># ACCEPT OpenConnect UPD From WAN</span>-A INPUT -p udp -m udp -i eth0 --dport 443 -j ACCEPT<span class="hljs-comment"># DROP wan traffic</span>-A INPUT -i eth0 -j DROP<span class="hljs-comment"># LOG LAN</span>-A INPUT -i eth1 -j LOG --<span class="hljs-built_in">log</span>-prefix <span class="hljs-string">"IPTABLES-LOG-INPUT-LAN:"</span> --<span class="hljs-built_in">log</span>-level 4<span class="hljs-comment"># ACCEPT LAN traffic - Learning rule - Should be changed to DROP once custom rules are created.</span>-A INPUT -i eth1 -j ACCEPT<span class="hljs-comment"># LAST RULE - DROP all traffic</span>-A INPUT -j DROP<span class="hljs-comment"># END INPUT RULES</span><span class="hljs-comment"># START FORWARD RULES</span><span class="hljs-comment"># Stateful Rule - FORWARD</span>-A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT<span class="hljs-comment"># ACCEPT LAN to WAN</span>-A FORWARD -s 192.168.5.0/24 -j ACCEPT<span class="hljs-comment"># LOG Forwarded traffic</span>-A FORWARD -j LOG --<span class="hljs-built_in">log</span>-prefix <span class="hljs-string">"IPTABLES-LOG-FORWARD:"</span> --<span class="hljs-built_in">log</span>-level 4<span class="hljs-comment"># LAST RULE - ACCEPT all traffic - Should be changed to DROP once custom rules are created.</span>-A FORWARD -j ACCEPT<span class="hljs-comment"># END FORWARD RULES</span><span class="hljs-comment"># START OUTPUT RULES</span><span class="hljs-comment"># Stateful Rule - OUTPUT</span>-A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT<span class="hljs-comment"># LOG Outgoing traffic</span>-A OUTPUT -j LOG --<span class="hljs-built_in">log</span>-prefix <span class="hljs-string">"IPTABLES-LOG-OUTPUT:"</span> --<span class="hljs-built_in">log</span>-level 4<span class="hljs-comment"># LAST RULE - ACCEPT all traffic - Should be    changed to DROP once custom rules are created.</span>-A OUTPUT -j ACCEPT<span class="hljs-comment"># END OUTPUT RULES</span>COMMIT</code></pre></div><p>使之生效【重启机器后需要重新生效一下】<br>iptables-restore &lt; /etc/sysconfig/iptables</p><h3 id="5-ocserv-Oops"><a href="#5-ocserv-Oops" class="headerlink" title="5. ocserv Oops"></a>5. ocserv Oops</h3><div class="hljs"><pre><code class="hljs bash"><span class="hljs-comment"># 添加用户</span>ocpasswd -c /etc/ocserv/ocpasswd 【用户名】<span class="hljs-comment"># 添加用户至某个分组</span>ocpasswd -c /etc/ocserv/ocpasswd -g 【分组名称】 【用户名】<span class="hljs-comment"># 锁定用户</span>ocpasswd -c /etc/ocserv/ocpasswd -l 【用户名】<span class="hljs-comment"># 解锁用户</span>ocpasswd -c /etc/ocserv/ocpasswd -u 【用户名】<span class="hljs-comment"># 删除用户</span>ocpasswd -c /etc/ocserv/ocpasswd -d 【用户名】<span class="hljs-comment"># 查看当前状态:</span><span class="hljs-comment">## 查看当前服务运行状态:</span>occtl -n show status<span class="hljs-comment">## 查看当前在线用户详情:</span>occtl -n show users<span class="hljs-comment"># 踢掉当前在线用户:</span><span class="hljs-comment">## 通过用户名:</span>occtl disconnect user 【用户名】<span class="hljs-comment">## 通过id:</span>occtl disconnect id 【id号】</code></pre></div><h3 id="6-客户端"><a href="#6-客户端" class="headerlink" title="6. 客户端"></a>6. 客户端</h3><h4 id="6-1-Redhat系"><a href="#6-1-Redhat系" class="headerlink" title="6.1 Redhat系"></a>6.1 Redhat系</h4><div class="hljs"><pre><code class="hljs gml">https:<span class="hljs-comment">//copr.fedorainfracloud.org/coprs/dwmw2/openconnect/</span>yum install openconnectopenconnect --user=boer -b <span class="hljs-symbol">x</span>.<span class="hljs-symbol">x</span>.<span class="hljs-symbol">x</span>.<span class="hljs-symbol">x</span>:xyz</code></pre></div><h4 id="6-2-Windows-amp-MacOS"><a href="#6-2-Windows-amp-MacOS" class="headerlink" title="6.2 Windows &amp; MacOS"></a>6.2 Windows &amp; MacOS</h4><p><a href="https://github.com/openconnect/openconnect-gui" target="_blank" rel="noopener">https://github.com/openconnect/openconnect-gui</a></p><h4 id="6-3-Android"><a href="#6-3-Android" class="headerlink" title="6.3 Android"></a>6.3 Android</h4><p><a href="https://play.google.com/store/apps/details?id=com.github.digitalsoftwaresolutions.openconnect" target="_blank" rel="noopener">https://play.google.com/store/apps/details?id=com.github.digitalsoftwaresolutions.openconnect</a></p><hr><p>感谢我的同事zp</p>]]></content>
    
    
    <categories>
      
      <category>DevOps</category>
      
    </categories>
    
    
    <tags>
      
      <tag>boer</tag>
      
      <tag>DevOps</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubeadm部署HA Kubernetes集群</title>
    <link href="/2019/09/24/k8s-ha-deployment/"/>
    <url>/2019/09/24/k8s-ha-deployment/</url>
    
    <content type="html"><![CDATA[<p><a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/" target="_blank" rel="noopener">https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/</a></p><p>system requirement<br>2C2G</p><a id="more"></a><h3 id="安装Aliyun-YUM-Repo"><a href="#安装Aliyun-YUM-Repo" class="headerlink" title="安装Aliyun YUM Repo"></a>安装Aliyun YUM Repo</h3><div class="hljs"><pre><code class="hljs bash"><span class="hljs-comment">## https://developer.aliyun.com/mirror/</span><span class="hljs-comment">### base</span>mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backupcurl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo<span class="hljs-comment">### epel</span>mv /etc/yum.repos.d/epel.repo /etc/yum.repos.d/epel.repo.backupmv /etc/yum.repos.d/epel-testing.repo /etc/yum.repos.d/epel-testing.repo.backupwget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo<span class="hljs-comment"># 安装必需软件</span><span class="hljs-comment">### https://github.com/opsnull/follow-me-install-kubernetes-cluster/blob/master/01.%E5%88%9D%E5%A7%8B%E5%8C%96%E7%B3%BB%E7%BB%9F%E5%92%8C%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F.md</span>yum install -y chrony conntrack ipvsadm ipset jq iptables curl sysstat libseccomp wget socat git</code></pre></div><h3 id="优化内核参数"><a href="#优化内核参数" class="headerlink" title="优化内核参数"></a>优化内核参数</h3><div class="hljs"><pre><code class="hljs bash">cat &lt;&lt;EOF | sudo tee /etc/sysctl.d/k8s.confnet.bridge.bridge-nf-call-iptables=1net.bridge.bridge-nf-call-ip6tables=1net.ipv4.ip_forward=1net.ipv4.tcp_tw_recycle=0net.ipv4.tcp_tw_reuse=1net.ipv4.tcp_timestamps=1net.ipv4.neigh.default.gc_thresh1=1024net.ipv4.neigh.default.gc_thresh2=2048net.ipv4.neigh.default.gc_thresh3=4096vm.swappiness=0vm.overcommit_memory=1vm.panic_on_oom=0vm.max_map_count = 262144fs.inotify.max_user_instances=8192fs.inotify.max_user_watches=1048576fs.file-max=52706963fs.nr_open=52706963net.ipv6.conf.all.disable_ipv6=1net.netfilter.nf_conntrack_max=2310720EOFsysctl --system</code></pre></div><h3 id="IPVS加载内核模块"><a href="#IPVS加载内核模块" class="headerlink" title="IPVS加载内核模块"></a>IPVS加载内核模块</h3><div class="hljs"><pre><code class="hljs bash"><span class="hljs-comment">## https://github.com/kubernetes/kubernetes/blob/master/pkg/proxy/ipvs/README.md</span>vim /etc/sysconfig/modules/ipvs.modules<span class="hljs-meta">#!/bin/bash</span>modprobe -- ip_vsmodprobe -- ip_vs_rrmodprobe -- ip_vs_wrrmodprobe -- ip_vs_shmodprobe -- nf_conntrack_ipv4</code></pre></div><blockquote><p>modprobe br_netfilter</p></blockquote><h3 id="SELinux"><a href="#SELinux" class="headerlink" title="SELinux"></a>SELinux</h3><div class="hljs"><pre><code class="hljs bash">setenforce 0sed -i <span class="hljs-string">'s/^SELINUX=.*/SELINUX=disabled/'</span> /etc/selinux/config</code></pre></div><h3 id="关闭-swap-分区"><a href="#关闭-swap-分区" class="headerlink" title="关闭 swap 分区"></a>关闭 swap 分区</h3><div class="hljs"><pre><code class="hljs bash">swapoff -ased -i <span class="hljs-string">'/ swap / s/^\(.*\)$/#\1/g'</span> /etc/fstab</code></pre></div><h3 id="设置iptables默认转发策略"><a href="#设置iptables默认转发策略" class="headerlink" title="设置iptables默认转发策略"></a>设置iptables默认转发策略</h3><div class="hljs"><pre><code class="hljs bash">systemctl stop firewalldsystemctl <span class="hljs-built_in">disable</span> firewalldiptables -F &amp;&amp; iptables -X &amp;&amp; iptables -F -t nat &amp;&amp; iptables -X -t natiptables -P FORWARD ACCEPT</code></pre></div><h3 id="关闭无用服务"><a href="#关闭无用服务" class="headerlink" title="关闭无用服务"></a>关闭无用服务</h3><p><code>systemctl stop postfix &amp;&amp; systemctl disable postfix</code></p><h3 id="安装Aliyun-YUM-Repo-1"><a href="#安装Aliyun-YUM-Repo-1" class="headerlink" title="安装Aliyun YUM Repo"></a>安装Aliyun YUM Repo</h3><div class="hljs"><pre><code class="hljs bash"><span class="hljs-comment">## https://developer.aliyun.com/mirror/</span><span class="hljs-comment">### k8s</span>cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo[kubernetes]name=Kubernetesbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/enabled=1gpgcheck=1repo_gpgcheck=1gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpgEOF</code></pre></div><h3 id="安装kube-amp-docker"><a href="#安装kube-amp-docker" class="headerlink" title="安装kube* &amp; docker"></a>安装kube* &amp; docker</h3><div class="hljs"><pre><code class="hljs bash">yum install -y kubelet kubeadm kubectl <span class="hljs-comment"># 注意版本需要和镜像版本对应</span>systemctl <span class="hljs-built_in">enable</span> kubelet &amp;&amp; systemctl start kubeletyum install -y yum-utils device-mapper-persistent-data lvm2yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<span class="hljs-comment"># https://docs.docker.com/engine/install/centos/</span>yum remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-engineyum update -y &amp;&amp; yum install -y \  containerd.io-1.2.13 \  docker-ce-19.03.8 \  docker-ce-cli-19.03.8mkdir /etc/docker<span class="hljs-comment"># 镜像加速  https://cr.console.aliyun.com/cn-beijing/instances/mirrors</span>cat &gt; /etc/docker/daemon.json &lt;&lt;EOF&#123;  <span class="hljs-string">"registry-mirrors"</span>: [<span class="hljs-string">"https://890une7x.mirror.aliyuncs.com"</span>],  <span class="hljs-string">"exec-opts"</span>: [<span class="hljs-string">"native.cgroupdriver=systemd"</span>],  <span class="hljs-string">"log-driver"</span>: <span class="hljs-string">"json-file"</span>,  <span class="hljs-string">"log-opts"</span>: &#123;    <span class="hljs-string">"max-size"</span>: <span class="hljs-string">"100m"</span>  &#125;,  <span class="hljs-string">"storage-driver"</span>: <span class="hljs-string">"overlay2"</span>,  <span class="hljs-string">"storage-opts"</span>: [    <span class="hljs-string">"overlay2.override_kernel_check=true"</span>  ]&#125;EOFmkdir -p /etc/systemd/system/docker.service.dsystemctl start docker.servicesystemctl <span class="hljs-built_in">enable</span> docker.servicesystemctl status docker.service</code></pre></div><h3 id="kubectl-autocompletion"><a href="#kubectl-autocompletion" class="headerlink" title="kubectl autocompletion"></a>kubectl autocompletion</h3><p><code>https://kubernetes.io/docs/tasks/tools/install-kubectl/#enabling-shell-autocompletion</code></p><h3 id="kubeadm-config"><a href="#kubeadm-config" class="headerlink" title="kubeadm config"></a>kubeadm config</h3><p><code>vim kubeadm-config.yaml</code></p><div class="hljs"><pre><code class="hljs yaml"><span class="hljs-comment"># kubeadm init --config kubeadm-config.yaml --upload-certs</span><span class="hljs-comment"># kubeadm config print init-defaults</span><span class="hljs-comment"># https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/high-availability/</span><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubeadm.k8s.io/v1beta2</span><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterConfiguration</span><span class="hljs-comment"># https://storage.googleapis.com/kubernetes-release/release/stable.txt</span><span class="hljs-comment"># kubernetesVersion: stable</span><span class="hljs-attr">kubernetesVersion:</span> <span class="hljs-string">v1.18.3</span><span class="hljs-attr">controlPlaneEndpoint:</span> <span class="hljs-string">&lt;your-lb-ip&gt;:&lt;port&gt;</span><span class="hljs-attr">certificatesDir:</span> <span class="hljs-string">/etc/kubernetes/pki</span><span class="hljs-attr">clusterName:</span> <span class="hljs-string">kubernetes</span><span class="hljs-attr">apiServer:</span>  <span class="hljs-attr">timeoutForControlPlane:</span> <span class="hljs-string">4m0s</span><span class="hljs-attr">controllerManager:</span> <span class="hljs-string">&#123;&#125;</span><span class="hljs-attr">scheduler:</span> <span class="hljs-string">&#123;&#125;</span><span class="hljs-attr">imageRepository:</span> <span class="hljs-string">registry.aliyuncs.com/google_containers</span><span class="hljs-attr">networking:</span>  <span class="hljs-attr">dnsDomain:</span> <span class="hljs-string">cluster.local</span>  <span class="hljs-attr">podSubnet:</span> <span class="hljs-number">172.30</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">/16</span>  <span class="hljs-attr">serviceSubnet:</span> <span class="hljs-number">10.96</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">/12</span><span class="hljs-attr">dns:</span>  <span class="hljs-attr">type:</span> <span class="hljs-string">CoreDNS</span><span class="hljs-attr">etcd:</span>  <span class="hljs-attr">local:</span>    <span class="hljs-attr">dataDir:</span> <span class="hljs-string">/var/lib/etcd</span><span class="hljs-meta">---</span><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubeproxy.config.k8s.io/v1alpha1</span><span class="hljs-attr">kind:</span> <span class="hljs-string">KubeProxyConfiguration</span><span class="hljs-attr">mode:</span> <span class="hljs-string">ipvs</span><span class="hljs-comment">## 自定义CA</span><span class="hljs-comment"># https://kubernetes.io/docs/tasks/administer-cluster/kubeadm/kubeadm-certs/</span><span class="hljs-comment"># This means you can, for example, copy an existing CA into /etc/kubernetes/pki/ca.crt and /etc/kubernetes/pki/ca.key, and kubeadm will use this CA for signing the rest of the certificates</span></code></pre></div><h3 id="kubeadm-deploy"><a href="#kubeadm-deploy" class="headerlink" title="kubeadm deploy"></a>kubeadm deploy</h3><div class="hljs"><pre><code class="hljs bash">kubeadm init --config kubeadm-config.yaml --upload-certskubeadm config images pull --config kubeadm-config.yaml <span class="hljs-comment"># 先拉取镜像</span>curl -LO https://docs.projectcalico.org/v3.14/manifests/calico.yaml<span class="hljs-comment"># 更改CALICO_IPV4POOL_CIDR 为podSubnet: 172.30.0.0/16</span><span class="hljs-comment"># - name: CALICO_IPV4POOL_CIDR</span><span class="hljs-comment">#   value: "172.30.0.0/16"</span><span class="hljs-comment"># 更改为BGP模式 https://docs.projectcalico.org/reference/node/configuration</span><span class="hljs-comment"># Enable IPIP</span><span class="hljs-comment"># - name: CALICO_IPV4POOL_IPIP</span><span class="hljs-comment">#   value: "Never"</span>kubectl apply -f calico.yaml<span class="hljs-comment"># core-dns pod不再pending</span>kubeadm resetkubectl delete node &lt;node-name&gt;</code></pre></div><h3 id="ipvs重建"><a href="#ipvs重建" class="headerlink" title="ipvs重建"></a>ipvs重建</h3><div class="hljs"><pre><code class="hljs bash"><span class="hljs-comment"># 如果安装时为iptables模式</span>kubectl -n kube-system edit cm kube-proxy<span class="hljs-comment"># mode: "ipvs"</span>kubectl get pod -n kube-system | grep kube-proxy | awk <span class="hljs-string">'&#123;system("kubectl delete pod "$1" -n kube-system")&#125;'</span> <span class="hljs-comment"># 重建kube-proxy的pod</span></code></pre></div><h3 id="Calico-BGP模式重建"><a href="#Calico-BGP模式重建" class="headerlink" title="Calico BGP模式重建"></a>Calico BGP模式重建</h3><div class="hljs"><pre><code class="hljs bash"><span class="hljs-comment"># https://docs.projectcalico.org/archive/v3.14/getting-started/kubernetes/installation/config-options</span>curl -LO https://docs.projectcalico.org/v3.14/manifests/calico.yaml<span class="hljs-comment"># 更改CALICO_IPV4POOL_CIDR 为podSubnet: 172.30.0.0/16</span><span class="hljs-comment"># - name: CALICO_IPV4POOL_CIDR</span><span class="hljs-comment">#   value: "172.30.0.0/16"</span><span class="hljs-comment"># 更改为BGP模式 https://docs.projectcalico.org/reference/node/configuration</span><span class="hljs-comment"># Enable IPIP</span><span class="hljs-comment"># - name: CALICO_IPV4POOL_IPIP</span><span class="hljs-comment">#   value: "Never"</span>kubectl apply -f calico.yaml</code></pre></div><h3 id="Operations"><a href="#Operations" class="headerlink" title="Operations"></a>Operations</h3><div class="hljs"><pre><code class="hljs bash"><span class="hljs-comment">## 切换默认namespace</span>kubectl config <span class="hljs-built_in">set</span>-context $(kubectl config current-context) --namespace=&lt;insert-namespace-name-here&gt;<span class="hljs-comment"># Validate it</span>kubectl config view | grep namespace<span class="hljs-comment"># create registry secret</span>kubectl create secret docker-registry boer-harbor --docker-server=harbor.boer.xyz --docker-username=admin --docker-password=Admin@123 --docker-email=boer0924@gmail.com --namespace=boer-public<span class="hljs-comment"># join node</span>kubeadm token listkubeadm token create --<span class="hljs-built_in">print</span>-join-commandkubectl drain <span class="hljs-variable">$NODENAME</span>kubectl uncordon <span class="hljs-variable">$NODENAME</span><span class="hljs-comment"># https://docs.docker.com/engine/reference/commandline/ps/#filtering</span>docker rm $(docker ps -a -f status=exited -q)docker ps --format <span class="hljs-string">"&#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Command&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;"</span>docker ps --filter <span class="hljs-string">"status=exited"</span></code></pre></div><h4 id="etcdctl"><a href="#etcdctl" class="headerlink" title="etcdctl"></a>etcdctl</h4><div class="hljs"><pre><code class="hljs bash"><span class="hljs-comment"># https://jimmysong.io/kubernetes-handbook/guide/using-etcdctl-to-access-kubernetes-data.html</span>curl -LO etcd-v3.4.3-linux-amd64.tar.gz<span class="hljs-built_in">alias</span> etcdctl=<span class="hljs-string">'etcdctl --cacert=/etc/kubernetes/pki/etcd/ca.crt --cert=/etc/kubernetes/pki/etcd/peer.crt --key=/etc/kubernetes/pki/etcd/peer.key'</span>etcdctl get /registry/namespaces/kube-system -w=json | jq .etcdctl member listetcdctl <span class="hljs-built_in">help</span><span class="hljs-comment"># 备份</span>etcdctl snapshot saveetcdctl snapshot statusetcdctl snapshot restore</code></pre></div><h4 id="Calicoctl"><a href="#Calicoctl" class="headerlink" title="Calicoctl"></a>Calicoctl</h4><div class="hljs"><pre><code class="hljs bash"><span class="hljs-comment"># https://docs.projectcalico.org/archive/v3.14/getting-started/clis/calicoctl/</span>curl -O -L  https://github.com/projectcalico/calicoctl/releases/download/v3.14.1/calicoctlmv calicoctl /usr/<span class="hljs-built_in">local</span>/bin/chmod a+x /usr/<span class="hljs-built_in">local</span>/bin/calicoctlvim /etc/calico/calicoctl.cfgapiVersion: projectcalico.org/v3kind: CalicoAPIConfigmetadata:spec:  datastoreType: <span class="hljs-string">"kubernetes"</span>  kubeconfig: <span class="hljs-string">"/root/.kube/config"</span>calicoctl get nodescalicoctl node status <span class="hljs-comment"># 查看calico运行模式</span>calicoctl get ipPool -o yaml</code></pre></div><h4 id="Helm-v2安装"><a href="#Helm-v2安装" class="headerlink" title="Helm v2安装"></a>Helm v2安装</h4><div class="hljs"><pre><code class="hljs bash"><span class="hljs-comment"># https://qhh.me/2019/08/08/Helm-%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</span>curl -LO https://get.helm.sh/helm-v2.16.6-linux-amd64.tar.gzvim rbac-config.yamlapiVersion: v1kind: ServiceAccountmetadata:  name: tiller  namespace: kube-system---apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRoleBindingmetadata:  name: tillerroleRef:  apiGroup: rbac.authorization.k8s.io  kind: ClusterRole  name: cluster-adminsubjects:  - kind: ServiceAccount    name: tiller    namespace: kube-systemhelm init --service-account tiller -i registry.aliyuncs.com/google_containers/tiller:v2.16.6helm repo listhelm repo add stable https://mirror.azure.cn/kubernetes/chartshelm repo add incubator https://mirror.azure.cn/kubernetes/charts-incubatorhelm repo updatehelm fetch stable/mysql <span class="hljs-comment"># 当前目录现在xxx.tgz</span>helm install stable/mysql</code></pre></div><h3 id="MetalLB"><a href="#MetalLB" class="headerlink" title="MetalLB"></a>MetalLB</h3><div class="hljs"><pre><code class="hljs bash"><span class="hljs-comment"># 不让私有云用户成为K8S世界的二等公民</span><span class="hljs-comment"># https://metallb.universe.tf/installation/</span><span class="hljs-comment"># 用法demo</span>apiVersion: v1kind: Servicemetadata:  name: theapp-service  annotations:    metallb.universe.tf/address-pool: default  labels:    app: theappspec:  <span class="hljs-built_in">type</span>: LoadBalancer  <span class="hljs-comment"># type: NodePort</span>  <span class="hljs-comment"># type: ClusterIP</span>  ports:  - port: 5000    targetPort: 5000    <span class="hljs-comment"># nodePort: 31090</span>  selector:    app: theappkubectl get svc <span class="hljs-comment"># curl -v EXTERNAL-IP</span></code></pre></div><p>MetalLB (头等舱)<br><img src="/img/figure/metallb.jpg" srcset="/img/loading.gif" alt="metallb"></p><center>vs</center><p>NodePort (经济舱)<br><img src="/img/figure/nodeport.jpg" srcset="/img/loading.gif" alt="nodeport"></p><h3 id="Ingress-Nginx-L7"><a href="#Ingress-Nginx-L7" class="headerlink" title="Ingress-Nginx L7"></a>Ingress-Nginx L7</h3><div class="hljs"><pre><code class="hljs bash"><span class="hljs-comment"># https://kubernetes.github.io/ingress-nginx/deploy/#bare-metal</span><span class="hljs-comment"># 更改controller-service的type: LoadBalancer(默认NodePort)</span><span class="hljs-comment"># 添加MetalLB annotations</span>metadata:  annotations:    metallb.universe.tf/address-pool: defaultspec:  <span class="hljs-built_in">type</span>: LoadBalancer<span class="hljs-comment"># 用法demo</span>apiVersion: networking.k8s.io/v1beta1kind: Ingressmetadata:  name: theapp-ingress  annotations:    nginx.ingress.kubernetes.io/rewrite-target: /    nginx.ingress.kubernetes.io/load-balance: <span class="hljs-string">"ip_hash"</span>    nginx.ingress.kubernetes.io/upstream-hash-by: <span class="hljs-string">"<span class="hljs-variable">$request_uri</span>"</span>spec:  rules:  - host: theapp.boer.xyz    http:      paths:      - path: /        backend:          serviceName: theapp-service          servicePort: 5000</code></pre></div><h3 id="安装Harbor在K8S之上"><a href="#安装Harbor在K8S之上" class="headerlink" title="安装Harbor在K8S之上"></a>安装Harbor在K8S之上</h3><div class="hljs"><pre><code class="hljs bash"><span class="hljs-comment">## https://www.qikqiak.com/post/harbor-quick-install/</span>~/k8s/chartshelm repo add harbor https://helm.goharbor.iohelm fetch harbor/harbor --version 1.3.2tar -zxf harbor-1.3.2.tgzvim harbor/values.yamlexpose:  <span class="hljs-built_in">type</span>: ingress  tls:    enabled: <span class="hljs-literal">true</span>  ingress:    hosts:      core: registry.boer.xyz      notary: notary.boer.xyz    controller: default    annotations:      kubernetes.io/ingress.class: <span class="hljs-string">"nginx"</span>      ingress.kubernetes.io/ssl-redirect: <span class="hljs-string">"true"</span>      ingress.kubernetes.io/proxy-body-size: <span class="hljs-string">"0"</span>      nginx.ingress.kubernetes.io/ssl-redirect: <span class="hljs-string">"true"</span>      nginx.ingress.kubernetes.io/proxy-body-size: <span class="hljs-string">"0"</span>externalURL: https://registry.boer.xyzpersistence:  enabled: <span class="hljs-literal">true</span>  resourcePolicy: <span class="hljs-string">"keep"</span>  persistentVolumeClaim:    registry:      storageClass: <span class="hljs-string">"openebs-hostpath"</span>    chartmuseum:      storageClass: <span class="hljs-string">"openebs-hostpath"</span>    jobservice:      storageClass: <span class="hljs-string">"openebs-hostpath"</span>    database:      storageClass: <span class="hljs-string">"openebs-hostpath"</span>    redis:      storageClass: <span class="hljs-string">"openebs-hostpath"</span>harborAdminPassword: <span class="hljs-string">"&lt;your-secret-password&gt;"</span>helm listhelm install --name harbor -f values.yaml . --namespace harborhelm upgrade -f values.yaml harbor . --namespace harborhelm delete --purge harborhelm status harborkubectl -n harbor delete pvc $(kubectl -n harbor get pvc | grep harbor | awk <span class="hljs-string">'&#123;print $1&#125;'</span>)kubectl get secret harbor-harbor-ingress -n kube-ops -o yaml<span class="hljs-comment"># 其中 data 区域中 ca.crt 对应的值就是我们需要证书，不过需要注意还需要做一个 base64 的解码，这样证书配置上以后就可以正常访问了。</span><span class="hljs-comment"># 保存data区域ca.crt内容到ca.crt</span>mkdir -p /etc/docker/certs.d/registry.boer.xyzcp ca.crt /etc/docker/certs.d/registry.boer.xyz <span class="hljs-comment"># 所有node均需配置</span>docker login registry.boer.xyzdocker tag mysql:5.7 registry.boer.xyz/public/mysql:5.7docker push registry.boer.xyz/public/mysql:5.7<span class="hljs-comment"># hosts</span>ansible k8s -m lineinfile -a <span class="hljs-string">"dest=/etc/hosts line='10.10.253.17 registry.boer.xyz'"</span>kubectl create secret docker-registry boer-registry --docker-server=registry.boer.xyz --docker-username=deployer --docker-password=&lt;your-password&gt; --docker-email=boer0924@gmail.com --namespace=boer-public<span class="hljs-comment"># 用法demo</span>apiVersion: apps/v1kind: Deploymenttemplate:  spec:    containers:    - name: theapp      image: registry.boer.xyz/public/theapp:0.0.1      imagePullPolicy: Always      ports:      - containerPort: 5000    imagePullSecrets:    - name: boer-registry</code></pre></div><h3 id="监控Prometheus"><a href="#监控Prometheus" class="headerlink" title="监控Prometheus"></a>监控Prometheus</h3><div class="hljs"><pre><code class="hljs bash"><span class="hljs-comment">## https://github.com/opsnull/follow-me-install-kubernetes-cluster/blob/master/08-4.kube-prometheus%E6%8F%92%E4%BB%B6.md</span><span class="hljs-comment">## </span><span class="hljs-built_in">cd</span> ~/k8sgit <span class="hljs-built_in">clone</span> https://github.com/coreos/kube-prometheus.git<span class="hljs-built_in">cd</span> kube-prometheussed -i -e <span class="hljs-string">'s_quay.io_quay.mirrors.ustc.edu.cn_'</span> manifests/*.yaml manifests/setup/*.yaml <span class="hljs-comment"># quay.mirrors.ustc.edu.cn源</span>kubectl apply -f manifests/setup <span class="hljs-comment"># 安装 prometheus-operator</span>kubectl apply -f manifests/ <span class="hljs-comment"># 安装 promethes metric adapter</span><span class="hljs-comment"># https://blog.csdn.net/gui951753/article/details/106160427</span>kubectl proxy &amp;NAMESPACE=<span class="hljs-built_in">local</span>kubectl get namespace <span class="hljs-variable">$NAMESPACE</span> -o json |jq <span class="hljs-string">'.spec = &#123;"finalizers":[]&#125;'</span> &gt;temp.jsoncurl -k -H <span class="hljs-string">"Content-Type: application/json"</span> -X PUT --data-binary @temp.json 127.0.0.1:8001/api/v1/namespaces/<span class="hljs-variable">$NAMESPACE</span>/finalize<span class="hljs-comment"># https://github.com/rancher/rancher/issues/14715#issuecomment-430194650</span>kubectl get customresourcedefinitions | grep cattle.io | awk <span class="hljs-string">'&#123;print $1&#125;'</span> | xargs kubectl delete customresourcedefinitionsGrafana@12345</code></pre></div><h3 id="模型概览"><a href="#模型概览" class="headerlink" title="模型概览"></a>模型概览</h3><p><img src="/img/figure/k8s_network_outbound.jpg" srcset="/img/loading.gif" alt="k8s-boer"></p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://github.com/opsnull/follow-me-install-kubernetes-cluster" target="_blank" rel="noopener">https://github.com/opsnull/follow-me-install-kubernetes-cluster</a></li><li><a href="https://www.qikqiak.com/k8strain" target="_blank" rel="noopener">https://www.qikqiak.com/k8strain</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>DevOps</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>Calico</tag>
      
      <tag>IPVS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>APM - Pinpoint笔记</title>
    <link href="/2019/05/09/pinpoint-deployment/"/>
    <url>/2019/05/09/pinpoint-deployment/</url>
    
    <content type="html"><![CDATA[<h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><ul><li><a href="https://naver.github.io/pinpoint/installation.html" target="_blank" rel="noopener">https://naver.github.io/pinpoint/installation.html</a></li><li><a href="https://naver.github.io/pinpoint/faq.html" target="_blank" rel="noopener">https://naver.github.io/pinpoint/faq.html</a></li></ul><a id="more"></a><h3 id="组件说明"><a href="#组件说明" class="headerlink" title="组件说明"></a>组件说明</h3><table><thead><tr><th><strong>HBase</strong></th><th>for storage</th></tr></thead><tbody><tr><td><strong>Pinpoint Collector</strong></td><td>Pinpoint core</td></tr><tr><td><strong>Pinpoint Web</strong></td><td>Web UI</td></tr><tr><td><strong>Pinpoint Agent</strong></td><td>attached to a java application for profiling</td></tr></tbody></table><h3 id="hbase脚本"><a href="#hbase脚本" class="headerlink" title="hbase脚本"></a>hbase脚本</h3><div class="hljs"><pre><code class="hljs bash">https://github.com/naver/pinpoint/tree/master/hbase/scripts</code></pre></div><h3 id="War包部署方式"><a href="#War包部署方式" class="headerlink" title="War包部署方式"></a>War包部署方式</h3><div class="hljs"><pre><code class="hljs bash">curl -LO https://archive.apache.org/dist/hbase/1.2.7/hbase-1.2.7-bin.tar.gz下载pinpoint组件war/jar包https://github.com/naver/pinpoint/releaseshttps://raw.githubusercontent.com/naver/pinpoint/master/hbase/scripts/hbase-create.hbasebin/hbase shell ./hbase-create.hbase</code></pre></div><h3 id="Docker部署方式"><a href="#Docker部署方式" class="headerlink" title="Docker部署方式"></a>Docker部署方式</h3><div class="hljs"><pre><code class="hljs bash">https://github.com/naver/pinpoint-dockerdocker-compose pulldocker-compose up -ddocker-compose ps</code></pre></div><h3 id="Agent配置"><a href="#Agent配置" class="headerlink" title="Agent配置"></a>Agent配置</h3><div class="hljs"><pre><code class="hljs bash">https://github.com/naver/pinpoint/blob/master/doc/installation.md<span class="hljs-comment">#profiles-2</span>vim <span class="hljs-variable">$Agent_Home</span>/pinpoint.configpinpoint.profiler.profiles.active=release<span class="hljs-comment"># 替换全部127.0.0.1为你自己的pinpoint server地址</span>vim profiles/release/pinpoint-env.config <span class="hljs-comment"># release对应上面配置文件pinpoint.profiler.profiles.active=release</span><span class="hljs-comment"># 替换全部127.0.0.1为你自己的pinpoint server地址</span>profiler.sampling.rate=&lt;your-want&gt; <span class="hljs-comment"># agent采样频率</span></code></pre></div><h3 id="应用配置"><a href="#应用配置" class="headerlink" title="应用配置"></a>应用配置</h3><div class="hljs"><pre><code class="hljs bash">-javaagent:<span class="hljs-variable">$&#123;pinpointPath&#125;</span>/pinpoint-bootstrap-2.0.2.jar-Dpinpoint.applicationName=&lt; 应用名, length&lt;24 &gt;-Dpinpoint.agentId=&lt; 全局唯一, length&lt;24 &gt;</code></pre></div><h3 id="填坑"><a href="#填坑" class="headerlink" title="填坑"></a>填坑</h3><ul><li>服务名 &amp; AgentID长度不能超过24 <code>https://github.com/naver/pinpoint/issues/3504</code></li><li>AgentID全局唯一</li></ul><h3 id="删除AgentID-APP"><a href="#删除AgentID-APP" class="headerlink" title="删除AgentID/APP"></a>删除AgentID/APP</h3><div class="hljs"><pre><code class="hljs bash">https://naver.github.io/pinpoint/faq.html<span class="hljs-comment">#how-do-i-delete-application-name-andor-agent-id-from-hbase</span></code></pre></div><h3 id="修改HBase数据保存时间"><a href="#修改HBase数据保存时间" class="headerlink" title="修改HBase数据保存时间"></a>修改HBase数据保存时间</h3><div class="hljs"><pre><code class="hljs bash"><span class="hljs-comment"># Shortening the TTL values, especially for `AgentStatV2` and `TraceV2`</span>describe <span class="hljs-string">'TraceV2'</span><span class="hljs-built_in">disable</span> <span class="hljs-string">'TraceV2'</span>alter <span class="hljs-string">'TraceV2'</span>, &#123;NAME =&gt; <span class="hljs-string">'S'</span>, TTL =&gt; <span class="hljs-string">'604800'</span>&#125; <span class="hljs-comment"># 7days</span><span class="hljs-built_in">enable</span> <span class="hljs-string">'TraceV2'</span>describe <span class="hljs-string">'TraceV2'</span><span class="hljs-comment"># 业务低峰期major_compact</span>hbase shell &lt; https://github.com/naver/pinpoint/blob/master/hbase/scripts/hbase-major-compact-htable.hbase</code></pre></div><hr><p>Stay Hungry, Stay Foolish.</p>]]></content>
    
    
    <categories>
      
      <category>DevOps</category>
      
    </categories>
    
    
    <tags>
      
      <tag>APM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java分析工具</title>
    <link href="/2018/06/24/jdk-analyze-tools/"/>
    <url>/2018/06/24/jdk-analyze-tools/</url>
    
    <content type="html"><![CDATA[<ol><li>jps:查看本机的Java中进程信息。</li><li>jstack:打印线程的栈信息,制作线程Dump。</li><li>jmap:打印内存映射,制作堆Dump。</li><li>jstat:性能监控工具。</li><li>jhat:内存分析工具。</li><li>jconsole:简易的可视化控制台。</li><li>jvisualvm:功能强大的控制台。</li></ol><a id="more"></a><div class="hljs"><pre><code class="hljs bash">jps -ltop -Hp 14583<span class="hljs-built_in">printf</span> <span class="hljs-string">"%x\n"</span> 14619391b391a39193918su - meisappjstack pid | egrep -A50 391[ab89]jstat -gcutil 14583 2000 10jmap -dump:format=b,file=heapDump.hprof 14583jhat heapDump.hprof-XX:+HeapDumpOnOutOfMemoryError</code></pre></div><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://www.hollischuang.com/archives/308" target="_blank" rel="noopener">https://www.hollischuang.com/archives/308</a></p>]]></content>
    
    
    <categories>
      
      <category>DevOps</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JDK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>主机初始化的那些事儿</title>
    <link href="/2018/03/24/srv_initialize/"/>
    <url>/2018/03/24/srv_initialize/</url>
    
    <content type="html"><![CDATA[<p>集群中加入一个主机后，需要做的那些事儿</p><a id="more"></a><h3 id="磁盘挂载"><a href="#磁盘挂载" class="headerlink" title="磁盘挂载"></a>磁盘挂载</h3><div class="hljs"><pre><code class="hljs bash">parted /dev/vdb mklabel gpt mkpart 1 xfs 1 100%mkfs.xfs /dev/vdb1mkdir /new_disk<span class="hljs-built_in">echo</span> <span class="hljs-string">"UUID=`blkid /dev/vdb1 | awk -F'"</span><span class="hljs-string">' '</span>&#123;<span class="hljs-built_in">print</span> <span class="hljs-variable">$2</span>&#125;<span class="hljs-string">'` /new_disk xfs defaults 1 1" &gt;&gt; /etc/fstab</span><span class="hljs-string">mount -a</span><span class="hljs-string">df -h</span></code></pre></div><h3 id="内核优化"><a href="#内核优化" class="headerlink" title="内核优化"></a>内核优化</h3><div class="hljs"><pre><code class="hljs bash"><span class="hljs-comment"># 内核参数优化</span>vim /etc/sysctl.confnet.ipv4.tcp_syncookies = 1net.ipv4.tcp_timestamps = 1net.ipv4.tcp_fin_timeout = 10net.ipv4.tcp_tw_recycle = 0net.ipv4.tcp_tw_reuse = 1net.ipv4.tcp_max_tw_buckets = 8000<span class="hljs-comment"># fs.file-max = 102400000</span>vm.max_map_count = 262144vm.swappiness = 10sysctl –p  <span class="hljs-comment"># 配置生效</span><span class="hljs-comment"># 文件描述符限制</span>vim /etc/security/limits.conf* soft nofile 102400* hard nofile 204800<span class="hljs-built_in">ulimit</span> -Sn<span class="hljs-built_in">ulimit</span> -Hn<span class="hljs-comment"># nproc</span><span class="hljs-comment">## nproc是操作系统级别对每个用户创建的进程数的限制, 在Linux下运行多线程时, 每个线程的实现其实是一个轻量级的进程, 对应的术语是light weight process(LWP)。</span><span class="hljs-comment"># 查看所有用户创建的进程数,使用命令：</span>ps h -Led -o user | sort | uniq -c | sort -n<span class="hljs-comment"># 查看boer用户创建的进程数，使用命令:</span>ps -o nlwp,pid,lwp,args -u boer | sort -nvim /etc/security/limits.d/20-nproc.conf <span class="hljs-comment"># CentOS7</span>*          soft    nproc     65536root       soft    nproc     unlimited<span class="hljs-comment">##</span></code></pre></div><h3 id="监控、日志Agent"><a href="#监控、日志Agent" class="headerlink" title="监控、日志Agent"></a>监控、日志Agent</h3><ul><li>filebeat</li><li>zabbix/node_exporter</li></ul>]]></content>
    
    
    <categories>
      
      <category>DevOps</category>
      
    </categories>
    
    
    <tags>
      
      <tag>parted</tag>
      
      <tag>kernel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>各种镜像源加速</title>
    <link href="/2018/02/16/mirror-speed/"/>
    <url>/2018/02/16/mirror-speed/</url>
    
    <content type="html"><![CDATA[<h3 id="阿里云镜像站"><a href="#阿里云镜像站" class="headerlink" title="阿里云镜像站"></a>阿里云镜像站</h3><p><code>https://developer.aliyun.com/mirror/</code></p><h3 id="python-pip源"><a href="#python-pip源" class="headerlink" title="python pip源"></a>python pip源</h3><div class="hljs"><pre><code class="hljs bash"><span class="hljs-comment"># python3 编译安装依赖</span>yum install zlib-devel libffi-devel openssl-devel<span class="hljs-comment">## https://pip.pypa.io/en/stable/user_guide/#config-file</span><span class="hljs-comment"># 全局生效</span><span class="hljs-comment"># Like-Unix(Linux)</span>vim /etc/pip.conf<span class="hljs-comment"># macOS</span>vim /Library/Application Support/pip/pip.conf<span class="hljs-comment"># Windows</span>notepad C:\ProgramData\pip\pip.ini<span class="hljs-comment"># https://developer.aliyun.com/mirror/pypi</span><span class="hljs-comment">## 阿里云源</span>[global]index-url = https://mirrors.aliyun.com/pypi/simple/[install]trusted-host=mirrors.aliyun.com</code></pre></div><h3 id="Go-proxy"><a href="#Go-proxy" class="headerlink" title="Go proxy"></a>Go proxy</h3><div class="hljs"><pre><code class="hljs bash"><span class="hljs-comment">## Go 1.13 及以上（推荐）</span>go env -w GO111MODULE=ongo env -w GOPROXY=https://goproxy.cn,direct<span class="hljs-comment"># go env -w GOPROXY=https://mirrors.aliyun.com/goproxy/,direct/</span></code></pre></div><h3 id="NodeJS-npm源"><a href="#NodeJS-npm源" class="headerlink" title="NodeJS npm源"></a>NodeJS npm源</h3><div class="hljs"><pre><code class="hljs bash">npm config <span class="hljs-built_in">set</span> registry https://registry.npm.taobao.org<span class="hljs-comment">### </span>npm config <span class="hljs-built_in">set</span> &lt;key&gt; &lt;value&gt;npm config get [&lt;key&gt;]npm config delete &lt;key&gt;npm config list [--json]npm config editnpm <span class="hljs-built_in">set</span> &lt;key&gt; &lt;value&gt;npm get [&lt;key&gt;]</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>DevOps</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pip</tag>
      
      <tag>goproxy</tag>
      
      <tag>npm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CLOSE_WAIT &amp; TIME_WAIT</title>
    <link href="/2018/01/18/closewait-timewait/"/>
    <url>/2018/01/18/closewait-timewait/</url>
    
    <content type="html"><![CDATA[<h3 id="一图胜千言"><a href="#一图胜千言" class="headerlink" title="一图胜千言"></a>一图胜千言</h3><p><img src="/img/tcp_hello.webp" srcset="/img/loading.gif" alt="tcp_hello"><br><img src="/img/tcp_bye.webp" srcset="/img/loading.gif" alt="tcp_bye"><br><img src="/img/tcp_state.webp" srcset="/img/loading.gif" alt="tcp_state"></p><h3 id="TIME-WAIT-2msl"><a href="#TIME-WAIT-2msl" class="headerlink" title="TIME_WAIT (2msl)"></a>TIME_WAIT (2msl)</h3><ol><li>正常完成四次挥手</li><li>正常等待2msl后释放资源 (TCP机制)</li><li>服务端能做的 (打铁还须自身硬)</li></ol><ul><li>文件描述符ulimit -Hn</li><li>sysctl内核网络参数优化</li></ul><ol start="4"><li>问题的根源在客户端为什么大量请求(短连接)又快速断开？</li></ol><ul><li>秒杀搞活动？ # 短连接 -&gt; 长连接keepalive</li><li><strong>CC攻击？</strong> # 网关限流</li></ul><h3 id="CLOSE-WAIT"><a href="#CLOSE-WAIT" class="headerlink" title="CLOSE_WAIT"></a>CLOSE_WAIT</h3><ol><li>四次挥手未完成。</li><li>客户端关闭连接之后服务器程序没有进一步发出ack信号。四次挥手腰斩。</li><li>有可能就是客户端连接关闭之后，程序里没有检测到，或者程序压根就忘记了这个时候需要关闭连接，于是这个资源就一直被程序占着。 # 服务端程序bug。</li></ol><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><p><a href="https://www.jianshu.com/p/9968b16b607e" target="_blank" rel="noopener">https://www.jianshu.com/p/9968b16b607e</a></p>]]></content>
    
    
    <categories>
      
      <category>DevOps</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TCP/IP</tag>
      
      <tag>TCP四次挥手</tag>
      
      <tag>CLOSE_WAIT</tag>
      
      <tag>TIME_WAIT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>致我的2012</title>
    <link href="/2012/12/31/for-my2012/"/>
    <url>/2012/12/31/for-my2012/</url>
    
    <content type="html"><![CDATA[<p>那些回顾2012，展望2013的话，留给席主习，理总李去说吧！</p><p>开始，应该是从2月11日开始的，有火车票为证；<br>学生生涯的真正结束，应该是在2月27日，有汽车票为证；<br>职员生涯的艰难开始，应该是在3月16日，有工资条为证；<br>结束，2012的结束，毋庸置疑的今天，时间为证。</p><a id="more"></a><p>开始的第一站，当然还是学校。<br>呼吸寝室的各种“味道”；<br>办理学校的各种手续；<br>依恋基友的各种难舍；<br> 享受学校最后的温暖。</p><p>找工作的那段时间是最艰难的。<br>起初是和很多人住很廉价的旅馆，不大的床竟然能睡3个男人。<br>在所难免的被老板发现，……也就当然，时日不多。<br>找了个“难民营”，不夸张的说，拉登当初如果逃那儿，<br>也不至于被爆头—-一个被拆迁的只剩下一栋房子矗在那里，<br>墙上到处写着“谁要拆我房，我就………………”很显然“钉子户”。<br>还好有水、有点、有老鼠。<br>初春三月，重庆的天气还是有那么一点小冷，晚上冷的蜷成一团的时候，<br> 老鼠们还出来幸灾乐祸。</p><p>找工作难，找好工作更难。<br>要你的，你不想去；想去的，人不要你。<br>好不容易找个我想去，人家也要我的，第一天上班就被外派到区县（黔江：一个三面环山，倍儿压抑的区），一待就是四十多天。<br>由于刚开始经验的匮乏，使得工作压力很大。<br>不过还好的是吃遍了黔江各地特色风味，足迹踏遍了黔江的各个乡镇（有些地方一辈子可能就去一次）。</p><p>最后的工作性质“你要明白你的身份，就一打杂的”，本少怎能忍受你这般羞辱，毅然决然的离开，至从事现在的工作。</p><p>（……因当下工作尚未结束，所以，不加以任何评述，以待后续……）</p><p>从5月10日起，住进这里，认识的男男女女，老老少少，各个行业之人，都将成为鄙人毕生之财富。吾曾有言“日租公寓，<br> 一抹江湖情”实乃贴切之至也！江湖之快乐，岂非尔等世外之人真知耳？快哉！乐哉！</p><p>2012后半载的快乐是以数月之积苦为付出的，就像IMBA成就“狗急跳墙”，亦如佛家之言“苦尽甘来”。</p><p>2012，我22，真是好2好2，哈哈哈哈！！！！！！</p>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>2012</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>写给那些女生</title>
    <link href="/2012/06/14/for-the-girl/"/>
    <url>/2012/06/14/for-the-girl/</url>
    
    <content type="html"><![CDATA[<p>人，总是在快乐的时候<br>忘记时间<br>不知道是哪一天，她们来了<br>不知不觉的走进了我平淡无奇的生活</p><a id="more"></a><p>作为一个计算机专业科班出身的我<br>对SOHO网络还是小有手段的<br>于是，与她们成功的搭讪<br>此后，本为路人甲与乙的我们<br>便“一发不可收拾”</p><p>……<br>聊天<br>……<br>吃饭<br>……<br>打球<br>……<br>等等等等</p><p>今天，她们走了<br>像她们一如既往的来<br>只是，带走的……？？？<br>太多太多……</p><p>十天，<br>十天的时间太长<br>长到足以让你厌恶一个人<br>十天的时间太短<br>短到让你无法了解真实的彼此</p><p>还有，<br>这段时间我真的很快乐<br>我会<br>把这段时间放在我记忆<br>最深处的</p><hr><p>由于感冒，思絮飘零，草草写下此数言，一来作为对几位姑娘的留恋，二来记录下这段快乐的时光，仅此而已。<br> ———2012.6.14于办公室</p>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>2012</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大学，梦起航</title>
    <link href="/2012/05/26/the-university-the-dream/"/>
    <url>/2012/05/26/the-university-the-dream/</url>
    
    <content type="html"><![CDATA[<h3 id="写在最前面"><a href="#写在最前面" class="headerlink" title="写在最前面"></a>写在最前面</h3><p>开头。这是真正的开头。写什么？怎么写？第一章，第一自然段，第一句话，第一个字，一切都是神圣的，似乎是一个生死存亡的</p><p>问题而令人难以选择，令人战战兢兢。</p><a id="more"></a><p>……</p><p>现在，平静地坐下来。</p><p>于是，顺利地开始了。</p><p>———路遥《早晨从中午开始》</p><p>一九七五年二、三月间，一个平平常常的日子，细蒙蒙的雨丝夹着一星半点的雪花，正纷纷淋淋地向大地飘洒着。时令已快到惊蛰</p><p>，雪当然再不会存留，往往还没等落地，就已经消失得无踪无影了。黄土高原严寒而漫长的冬天看来就要过去，但那真正温暖的春</p><p>天还远远地没有到来。</p><p>———路遥《平凡的世界》</p><h3 id="2334"><a href="#2334" class="headerlink" title="2334"></a>2334</h3><p>我不知道它为什么会顺序排列<br>也不知道它为什么会中间重复<br>总之</p><p>我牢牢的记住了这个数字———一列绿皮车的车次</p><p>那是我第一次坐火车</p><p>那是我第一次离家那么远</p><p>那是我第一次上大学</p><h3 id="20080915"><a href="#20080915" class="headerlink" title="20080915"></a>20080915</h3><p>不知道什么原因<br>我对这个时间记忆犹为清晰<br>所以<br>也就将它定义为大学开始的时间<br>其实<br>实际时间应该是要早于这个时间<br> 但，好像又忘却了</p><h3 id="608"><a href="#608" class="headerlink" title="608"></a>608</h3><p>一个多么好的数字<br>0 . 开始<br>6 . 顺利<br>8 . 发展</p><p>这是我大学第一间寝室号码<br>在那拥挤的空间里<br> 我开始慢慢习惯9分月重庆那特有的潮热的天气</p><h3 id="军训"><a href="#军训" class="headerlink" title="军训"></a>军训</h3><p>大学，第一堂课“军训”</p><p>大家都有同样的装扮<br>同样的狼狈———汗流浃背<br>分不出美女与帅哥<br>所以<br>你想提前下手似乎是不可能的</p><p>然而，对于第一堂课，我是很惭愧的，出于某种原因，没有参加。<br>但是，军训场地的氛围还是感受过的。</p><h3 id="大一"><a href="#大一" class="headerlink" title="大一"></a>大一</h3><p>还算乖巧的我们还算听话，每次上课宽敞的教室多少有点燥热。<br> 至于课程嘛！也就那不痛不痒的《近现代史纲要》、《马哲》等等之类的。</p><p>那会儿寝室的电脑寥寥无几。<br>所以，活动时间还是有的。<br>社团、协会，偶尔上个课，开个会什么的，还是挺看重的。<br> 至于，后来嘛！呵呵……</p><p>那一年，是最难熬的。<br>语言，饮食，环境，甚至文化。<br> 都需要去习惯。</p><p>那时的寝室站在阳台上就能看到高速公路。每次看到呼啸而过的大巴，一种家的思念，油然而生，涌上心头，久久不能平复。</p><p>那一年，我很傻。</p><h3 id="大二"><a href="#大二" class="headerlink" title="大二"></a>大二</h3><p>我们聚集了一帮子“死党”，有个伟大的代号“306”。</p><p>最安逸的时光是在熄灯之后的半把个小时里。</p><p>我们最高尚的话题是“谈谈中国近五十年的发展”；<br> 最低俗的话题是“关于辣椒皮皮的种种”；</p><p>最MAN的话题是“游历金庸武侠的画卷”；<br> 最八卦的话题是“仓老师、凤姐之流的”。</p><p>那一年<br> 我微弱的尝试了一下“爱情”的味道，苦涩与美好交织；</p><p>那一年<br>我们换了辅导员。那天，我写道“多好的阳光！突然，换辅导员了。（晴天霹雳） 期待吧！…”；</p><p>那一年<br>我参加了计算机技术与软件专业技术资格(水平)考试———网络工程师（中级）考试。没过，差得很远……</p><p>那一年，很复杂。</p><h3 id="大三"><a href="#大三" class="headerlink" title="大三"></a>大三</h3><p>有了那样一群“死党”的陪伴，时间恍惚，都似乎忘记了大三是怎么开始的。<br>噢！对了，我们的代号换了“209”，这可以促使一下记忆。</p><p>我们继续保持着大二的优良作风，睡前探讨半小时。</p><p>紧要的不紧要的，<br>有关的无关的，<br>天上的人家的，<br>过去的将来的。</p><p>那一年<br>我们有一个神奇的老师“从A到Z，二十四个英文字母中……”<br>我百思不得其解。敢问老师，那两个字母是S和B吗？</p><p>那一年<br>我又一次参加了计算机技术与软件专业技术资格(水平)考试———网络工程师（中级）考试。<br>不出意料的通过还是让我HI了那么一阵子的。</p><p>就这样沉浸在胜利的快乐中，度过了那一年。</p><p>那一年，很快乐。</p><h3 id="大四"><a href="#大四" class="headerlink" title="大四"></a>大四</h3><p>由于某种原因<br>我差点脱离了我的组织“124”<br>不过<br>经过殊死的挣扎，我还是以“无尚的崇高”回归了组织。<br> 再次的“回归”让我的压力更大，更加迷茫。</p><p>那时间也是最宅的，一日“两餐”几乎都是由“基友”代劳的。<br>DOTA，DOTA，依然DOTA。<br> 似乎，也只有在游戏的厮杀中得以解脱，实现忘我。</p><p>然而，也不是什么都没做。<br> 但是，现在看来，当时的想法、做法都是那么盲目。</p><p>那一年，很短暂。</p><p>那一年，很迷茫。</p><h3 id="本初"><a href="#本初" class="headerlink" title="本初"></a>本初</h3><p>大学目标有四“毕业证，职业资格认证，英语，女友”。<br> 大学时日已尽，目标对半实现，实感惭愧。</p><p>如此的只言片语只能是记忆的片段。</p><p>有此想法，已有许久。<br>今日，<br>突发感想，迫不及待，写下此篇，以励日后。</p><p>———— 2012年5月26日于重庆·歇台子</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>“这第一碗酒，朕要敬给太皇太后孝庄，敬给列祖列宗的在天之灵。朕八岁丧父，九岁丧母，是孝庄太后带着朕，冲破千难险阻，</p><p>才有今天的大清盛世!孝庄太后，朕想你啊。”</p><p>“还有这第二碗酒，朕要敬给列位臣工，敬给天下子民，敬给今天赴宴的 老同年们!六十年来，是你们辅佐朕，保国平安，你们俯</p><p>首农桑，致使大清的百业兴旺。君、臣、民，三者同德呀！没有你们，记着便没有今日的大清。朕在这儿谢谢你们了。”</p><p>“这第三碗酒啊，朕要敬给朕的死敌们。鳌拜，吴三桂，嘿！郑经，噶尔丹，噢，还有那个朱三太子。他们都是英雄豪杰啊，他们</p><p>造就了朕!他们逼着朕立下了这丰功伟业。朕恨他们，也敬他们。可惜呀，他们都死了，朕寂莫啊!……朕不祝他们死的安宁，祝</p><p>他们，来生再世再与朕为敌吧！”</p><p>———二月河《康熙王朝》</p>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>2012</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
