<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Kubernetes APM链路追踪Skywalking</title>
    <link href="/2020/08/16/k8s-apm-skywalking/"/>
    <url>/2020/08/16/k8s-apm-skywalking/</url>
    
    <content type="html"><![CDATA[<p>随着RPC框架、微服务、云计算、大数据的发展，业务的规模和深度相比过往也都在增加。一个业务可能横跨多个模块/服务/容器，依赖的中间件也越来越多，其中任何一个节点出现异常，都可能导致业务出现波动或者异常，这就导致服务质量监控和异常诊断/定位变得异常复杂。于是催生了新的业务监控模式：调用链跟踪系统APM</p><a id="more"></a><p>在诸多优秀的开源APM产品中<code>Skywalking</code>和<code>Pinpoint</code>脱颖而出，两款产品都通过字节码注入的方式，实现了对代码完全无任何侵入。对比如下：<br><img src="https://for-boer-blog.oss-cn-beijing.aliyuncs.com/20200828170623.png?x-oss-process=style/blog-img-watermark" srcset="/img/loading.gif" alt=""></p><blockquote><p>前面我们介绍过<a href="/2019/05/09/pinpoint-deployment/">单纯Docker方式(<code>docker-compose</code>)部署Pinpoint</a>, 可以提供参考。本节我们介绍在Kubernetes上部署Skywalking。</p></blockquote><h3 id="1、Helm3"><a href="#1、Helm3" class="headerlink" title="1、Helm3"></a>1、Helm3</h3><pre><code class="hljs bash">curl -LO https://get.helm.sh/helm-v3.2.4-linux-amd64.tar.gztar -zxf helm-v3.2.4-linux-amd64.tar.gzcp linux-amd64/helm /usr/<span class="hljs-built_in">local</span>/bin/helm3</code></pre><h3 id="2、服务端"><a href="#2、服务端" class="headerlink" title="2、服务端"></a>2、服务端</h3><blockquote><p>Skywalking后端存储，使用EFK日志系统的ES集群。注意index加前缀区分<br>详细的Elasticsearch集群部署可以参考：<a href="/2019/10/24/k8s-logging-efk/">Kubernetes日志系统EFK</a></p></blockquote><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/k8s/helm/chartsgit <span class="hljs-built_in">clone</span> https://github.com/apache/skywalking-kubernetes.git<span class="hljs-built_in">cd</span> skywalking-kubernetes/charthelm dep up skywalking<span class="hljs-comment"># 创建namespace</span>kubectl create ns skywalking<span class="hljs-comment"># 准备values文件, 详见Values</span>vim skywalking/values.yaml<span class="hljs-comment">#</span>helm3 install skywalking skywalking -n skywalking --values ./skywalking/values.yamlhelm3 -n skywalking listhelm3 -n skywalking delete skywalkinghelm3 -n skywalking upgrade skywalking --values ./skywalking/values.yaml</code></pre><h4 id="Helm-Values"><a href="#Helm-Values" class="headerlink" title="Helm Values"></a>Helm Values</h4><pre><code class="hljs yaml"><span class="hljs-attr">oap:</span>  <span class="hljs-attr">name:</span> <span class="hljs-string">oap</span>  <span class="hljs-attr">dynamicConfigEnabled:</span> <span class="hljs-literal">false</span>  <span class="hljs-attr">image:</span>    <span class="hljs-attr">repository:</span> <span class="hljs-string">apache/skywalking-oap-server</span>    <span class="hljs-attr">tag:</span> <span class="hljs-number">8.1</span><span class="hljs-number">.0</span><span class="hljs-string">-es7</span>    <span class="hljs-attr">pullPolicy:</span> <span class="hljs-string">IfNotPresent</span>  <span class="hljs-attr">storageType:</span> <span class="hljs-string">elasticsearch7</span> <span class="hljs-comment"># 存储类型es7</span>  <span class="hljs-attr">ports:</span>    <span class="hljs-attr">grpc:</span> <span class="hljs-number">11800</span>    <span class="hljs-attr">rest:</span> <span class="hljs-number">12800</span>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span>  <span class="hljs-attr">service:</span>    <span class="hljs-attr">type:</span> <span class="hljs-string">ClusterIP</span>  <span class="hljs-attr">javaOpts:</span> <span class="hljs-string">-Xmx2g</span> <span class="hljs-string">-Xms2g</span>  <span class="hljs-attr">antiAffinity:</span> <span class="hljs-string">"soft"</span>  <span class="hljs-attr">nodeAffinity:</span> <span class="hljs-string">&#123;&#125;</span>  <span class="hljs-attr">nodeSelector:</span> <span class="hljs-string">&#123;&#125;</span>  <span class="hljs-attr">tolerations:</span> <span class="hljs-string">[]</span>  <span class="hljs-attr">resources:</span> <span class="hljs-string">&#123;&#125;</span>  <span class="hljs-attr">env:</span>    <span class="hljs-attr">SW_NAMESPACE:</span> <span class="hljs-string">"skywalking"</span> <span class="hljs-comment"># es索引前缀skywalking_, _下划线会自动加上</span><span class="hljs-attr">ui:</span>  <span class="hljs-attr">name:</span> <span class="hljs-string">ui</span>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span>  <span class="hljs-attr">image:</span>    <span class="hljs-attr">repository:</span> <span class="hljs-string">apache/skywalking-ui</span>    <span class="hljs-attr">tag:</span> <span class="hljs-number">8.1</span><span class="hljs-number">.0</span>    <span class="hljs-attr">pullPolicy:</span> <span class="hljs-string">IfNotPresent</span>  <span class="hljs-attr">ingress:</span>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">annotations:</span> <span class="hljs-string">&#123;&#125;</span>    <span class="hljs-attr">path:</span> <span class="hljs-string">/</span>    <span class="hljs-attr">hosts:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">skywalking.boer.xyz</span> <span class="hljs-comment"># ingress地址</span>    <span class="hljs-attr">tls:</span> <span class="hljs-string">[]</span><span class="hljs-attr">elasticsearch:</span>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 关闭内置es，我们使用EFK日志系统的ES集群</span>  <span class="hljs-attr">config:</span>    <span class="hljs-attr">port:</span>      <span class="hljs-attr">http:</span> <span class="hljs-number">9200</span>    <span class="hljs-attr">host:</span> <span class="hljs-string">"elasticsearch-logging.logging.svc"</span> <span class="hljs-comment"># 日志系统ES地址</span>    <span class="hljs-attr">user:</span> <span class="hljs-string">"elastic"</span>     <span class="hljs-attr">password:</span> <span class="hljs-string">"&lt;your-es-password&gt;"</span></code></pre><h3 id="3、客户端"><a href="#3、客户端" class="headerlink" title="3、客户端"></a>3、客户端</h3><h4 id="制作skywalking-agent镜像"><a href="#制作skywalking-agent镜像" class="headerlink" title="制作skywalking-agent镜像"></a>制作skywalking-agent镜像</h4><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/k8s/apps/skywalking-agenttar -zxf apache-skywalking-apm-es7-8.1.0.tar.gzcp apache-skywalking-apm-bin-es7/agent agentvim Dockerfile <span class="hljs-comment"># 准备Dockerfile, 详见Dockerfile</span>docker build -t registry.boer.xyz/public/skywalking-agent:8.1.0 .docker push registry.boer.xyz/public/skywalking-agent:8.1.0</code></pre><h4 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h4><pre><code class="hljs Dockerfile"><span class="hljs-keyword">FROM</span> busybox:latest<span class="hljs-keyword">ENV</span> LANG=C.UTF-<span class="hljs-number">8</span><span class="hljs-keyword">WORKDIR</span><span class="bash"> /usr/skywalking/agent</span><span class="hljs-keyword">COPY</span><span class="bash"> agent/ .</span></code></pre><h4 id="skywalking-agent配置"><a href="#skywalking-agent配置" class="headerlink" title="skywalking-agent配置"></a>skywalking-agent配置</h4><pre><code class="hljs bash"><span class="hljs-comment"># vim agent/config</span>agent.service_name=<span class="hljs-variable">$&#123;SW_AGENT_NAME:Your_ApplicationName&#125;</span> <span class="hljs-comment"># 服务名：区分不同服务，通过环境变量设置</span>agent.instance_name=<span class="hljs-variable">$&#123;HOSTNAME&#125;</span> <span class="hljs-comment"># 实例名：区分多实例，取Pod主机名</span>collector.backend_service=<span class="hljs-variable">$&#123;SW_AGENT_COLLECTOR_BACKEND_SERVICES:skywalking-oap.skywalking.svc:11800&#125;</span> <span class="hljs-comment"># 服务端地址</span>logging.file_name=<span class="hljs-variable">$&#123;SW_LOGGING_FILE_NAME:skywalking-api.log&#125;</span>logging.level=<span class="hljs-variable">$&#123;SW_LOGGING_LEVEL:INFO&#125;</span>logging.max_file_size=<span class="hljs-variable">$&#123;SW_LOGGING_MAX_FILE_SIZE:31457280&#125;</span></code></pre><h3 id="4、使用示例"><a href="#4、使用示例" class="headerlink" title="4、使用示例"></a>4、使用示例</h3><p>使用<code>skywalking-agent</code>一般会想到两种方法：</p><ul><li>将 agent 包构建到已经存在的基础镜像中</li><li>通过<code>initContainer</code>方式拷贝Agent</li></ul><p>initContainer方式将<code>skywalking-agent</code>拷贝到应用Pod中，无需修改基础JVM镜像，所以更推荐此方法：</p><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><span class="hljs-attr">metadata:</span>  <span class="hljs-attr">name:</span> <span class="hljs-string">produce-deployment</span>  <span class="hljs-attr">annotations:</span>    <span class="hljs-attr">kubernetes.io/change-cause:</span> <span class="hljs-string">&lt;CHANGE_CAUSE&gt;</span><span class="hljs-attr">spec:</span>  <span class="hljs-attr">selector:</span>    <span class="hljs-attr">matchLabels:</span>      <span class="hljs-attr">app:</span> <span class="hljs-string">produce</span>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span>  <span class="hljs-attr">template:</span>    <span class="hljs-attr">metadata:</span>      <span class="hljs-attr">labels:</span>        <span class="hljs-attr">app:</span> <span class="hljs-string">produce</span>    <span class="hljs-attr">spec:</span>      <span class="hljs-attr">initContainers:</span>        <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">registry.boer.xyz/public/skywalking-agent:8.1.0</span>          <span class="hljs-attr">name:</span> <span class="hljs-string">skywalking-agent</span>          <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span>          <span class="hljs-attr">command:</span> <span class="hljs-string">['sh']</span>          <span class="hljs-attr">args:</span> <span class="hljs-string">['-c','cp</span> <span class="hljs-string">-r</span> <span class="hljs-string">/usr/skywalking/agent/*</span> <span class="hljs-string">/skywalking/agent']</span>          <span class="hljs-attr">volumeMounts:</span>            <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/skywalking/agent</span>              <span class="hljs-attr">name:</span> <span class="hljs-string">skywalking-agent</span>      <span class="hljs-attr">containers:</span>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">produce</span>          <span class="hljs-attr">image:</span> <span class="hljs-string">&lt;IMAGE&gt;:&lt;IMAGE_TAG&gt;</span>          <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span>          <span class="hljs-attr">volumeMounts:</span>            <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/usr/skywalking/agent</span>              <span class="hljs-attr">name:</span> <span class="hljs-string">skywalking-agent</span>          <span class="hljs-attr">ports:</span>            <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">10080</span>          <span class="hljs-attr">resources:</span>            <span class="hljs-attr">requests:</span>              <span class="hljs-attr">memory:</span> <span class="hljs-string">"512Mi"</span>              <span class="hljs-attr">cpu:</span> <span class="hljs-string">"200m"</span>            <span class="hljs-attr">limits:</span>              <span class="hljs-attr">memory:</span> <span class="hljs-string">"1Gi"</span>              <span class="hljs-attr">cpu:</span> <span class="hljs-string">"600m"</span>          <span class="hljs-attr">env:</span>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">ENVIRONMENT</span>              <span class="hljs-attr">value:</span> <span class="hljs-string">"pro"</span>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">SW_AGENT_NAME</span> <span class="hljs-comment"># sw服务名</span>              <span class="hljs-attr">value:</span> <span class="hljs-string">"springboot-produce"</span>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">JVM_OPTS</span>              <span class="hljs-attr">value:</span> <span class="hljs-string">"-Xms512m -Xmx512m -javaagent:/usr/skywalking/agent/skywalking-agent.jar"</span>          <span class="hljs-attr">livenessProbe:</span>            <span class="hljs-attr">httpGet:</span>              <span class="hljs-attr">path:</span> <span class="hljs-string">/actuator/health</span>              <span class="hljs-attr">port:</span> <span class="hljs-number">10080</span>            <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">10</span>            <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">10</span>            <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">5</span>          <span class="hljs-attr">readinessProbe:</span>            <span class="hljs-attr">httpGet:</span>              <span class="hljs-attr">path:</span> <span class="hljs-string">/actuator/health</span>              <span class="hljs-attr">port:</span> <span class="hljs-number">10080</span>            <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">10</span>            <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">10</span>            <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">5</span>          <span class="hljs-attr">lifecycle:</span>            <span class="hljs-attr">preStop:</span>              <span class="hljs-attr">exec:</span>                <span class="hljs-attr">command:</span>                  <span class="hljs-bullet">-</span> <span class="hljs-string">"curl"</span>                  <span class="hljs-bullet">-</span> <span class="hljs-string">"-XPOST"</span>                  <span class="hljs-bullet">-</span> <span class="hljs-string">"http://127.0.0.1:10080/actuator/shutdown"</span>      <span class="hljs-attr">imagePullSecrets:</span>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">regcred</span>      <span class="hljs-attr">volumes:</span>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">skywalking-agent</span>          <span class="hljs-attr">emptyDir:</span> <span class="hljs-string">&#123;&#125;</span></code></pre><h3 id="5、Skywalking-ES存储索引管理"><a href="#5、Skywalking-ES存储索引管理" class="headerlink" title="5、Skywalking ES存储索引管理"></a>5、Skywalking ES存储索引管理</h3><blockquote><p>详细<a href="/2019/10/24/k8s-logging-efk/#iLM管理索引生命周期"><strong>iLM索引生命周期</strong></a>，见Kubernetes日志系统EFK一文</p></blockquote><pre><code class="hljs json">PUT _ilm/policy/skywalking-policy   &#123;  <span class="hljs-attr">"policy"</span>: &#123;                           <span class="hljs-attr">"phases"</span>: &#123;      <span class="hljs-attr">"warm"</span>: &#123;        <span class="hljs-attr">"min_age"</span>: <span class="hljs-string">"2d"</span>,        <span class="hljs-attr">"actions"</span>: &#123;          <span class="hljs-attr">"forcemerge"</span>: &#123;            <span class="hljs-attr">"max_num_segments"</span>: <span class="hljs-number">1</span>          &#125;        &#125;      &#125;,      <span class="hljs-attr">"delete"</span>: &#123;        <span class="hljs-attr">"min_age"</span>: <span class="hljs-string">"3d"</span>,                   <span class="hljs-attr">"actions"</span>: &#123;          <span class="hljs-attr">"delete"</span>: &#123;&#125;                      &#125;      &#125;    &#125;  &#125;&#125;PUT _template/skywalking-template&#123;  <span class="hljs-attr">"index_patterns"</span>: [<span class="hljs-string">"skywalking_*"</span>], <span class="hljs-comment">// 这里完全匹配skywalking索引前缀，即SW_NAMESPACE</span>  <span class="hljs-attr">"settings"</span>: &#123;    <span class="hljs-attr">"number_of_shards"</span>: <span class="hljs-number">3</span>,    <span class="hljs-attr">"number_of_replicas"</span>: <span class="hljs-number">0</span>,    <span class="hljs-attr">"index.lifecycle.name"</span>: <span class="hljs-string">"skywalking-policy"</span>,    <span class="hljs-attr">"index.refresh_interval"</span>: <span class="hljs-string">"30s"</span>,    <span class="hljs-attr">"index.translog.durability"</span>: <span class="hljs-string">"async"</span>,    <span class="hljs-attr">"index.translog.sync_interval"</span>:<span class="hljs-string">"60s"</span>  &#125;&#125;</code></pre><h3 id="6、The-show"><a href="#6、The-show" class="headerlink" title="6、The show"></a>6、The show</h3><p><img src="https://for-boer-blog.oss-cn-beijing.aliyuncs.com/20200828182335.png?x-oss-process=style/blog-img-watermark" srcset="/img/loading.gif" alt=""><br><img src="https://for-boer-blog.oss-cn-beijing.aliyuncs.com/20200828182157.png?x-oss-process=style/blog-img-watermark" srcset="/img/loading.gif" alt=""></p><h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><ul><li><a href="https://github.com/apache/skywalking-kubernetes" target="_blank" rel="noopener">https://github.com/apache/skywalking-kubernetes</a></li><li><a href="https://skywalking.apache.org/zh/blog/2019-08-30-how-to-use-Skywalking-Agent.html" target="_blank" rel="noopener">https://skywalking.apache.org/zh/blog/2019-08-30-how-to-use-Skywalking-Agent.html</a></li><li><a href="https://skywalking.apache.org/zh/blog/2019-02-24-skywalking-pk-pinpoint.html" target="_blank" rel="noopener">https://skywalking.apache.org/zh/blog/2019-02-24-skywalking-pk-pinpoint.html</a></li><li><a href="https://skywalking.apache.org/zh/blog/2019-11-07-skywalking-elasticsearch-storage-optimization.html" target="_blank" rel="noopener">https://skywalking.apache.org/zh/blog/2019-11-07-skywalking-elasticsearch-storage-optimization.html</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Elasticsearch</tag>
      
      <tag>Kubernetes</tag>
      
      <tag>Skywalking</tag>
      
      <tag>Pinpoint</tag>
      
      <tag>APM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes SpringCloud微服务容器云之路</title>
    <link href="/2020/07/22/k8s-springcloud-fly/"/>
    <url>/2020/07/22/k8s-springcloud-fly/</url>
    
    <content type="html"><![CDATA[<p>SpringCloud微服务容器云之路</p><ol><li>Springboot应用配合Actuator开启：<code>监控检查</code>，<code>优雅停机</code>，<code>监控metrics</code>等endpoints</li><li>根据<code>Dockerfile</code>定义制作Docker镜像并上传<code>Harbor</code>私有Docker Registry</li><li>渲染K8S部署模板文件并完成应用部署，同时应该考虑快速回滚等保障机制</li></ol><blockquote><p><strong>Tips:</strong> 步骤2 - 可使用Maven Plugin <a href="https://github.com/spotify/dockerfile-maven" target="_blank" rel="noopener">dockerfile-maven</a>集成到Maven流程中，命令如: <code>mvn dockerfile:build</code>, <code>mvn dockerfile:push</code>, 详见官方文档</p></blockquote><a id="more"></a><h3 id="1、Springboot配置示例"><a href="#1、Springboot配置示例" class="headerlink" title="1、Springboot配置示例"></a>1、Springboot配置示例</h3><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span>  <span class="hljs-attr">application:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">spring-produce</span>  <span class="hljs-attr">profiles:</span>    <span class="hljs-attr">active:</span> <span class="hljs-string">$&#123;ENVIRONMENT:pro&#125;</span><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">10080</span><span class="hljs-attr">management:</span>  <span class="hljs-attr">endpoints:</span>    <span class="hljs-attr">web:</span>      <span class="hljs-attr">base-path:</span> <span class="hljs-string">/actuator/</span>      <span class="hljs-attr">exposure:</span>        <span class="hljs-attr">include:</span> <span class="hljs-string">health,shutdown,prometheus</span> <span class="hljs-comment"># 监控检查，优雅停机，监控metrics</span>  <span class="hljs-attr">endpoint:</span>    <span class="hljs-attr">shutdown:</span>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">metrics:</span>    <span class="hljs-attr">tags:</span>      <span class="hljs-attr">application:</span> <span class="hljs-string">$&#123;spring.application.name&#125;</span> <span class="hljs-comment"># 监控metrics Tag</span><span class="hljs-attr">eureka:</span>  <span class="hljs-attr">instance:</span>    <span class="hljs-attr">preferIpAddress:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">client:</span>    <span class="hljs-attr">serviceUrl:</span>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://eureka-0.eureka.micro-public.svc.cluster.local:8761/eureka,http://eureka-1.eureka.micro-public.svc.cluster.local:8761/eureka,http://eureka-2.eureka.micro-public.svc.cluster.local:8761/eureka</span><span class="hljs-attr">logging:</span>  <span class="hljs-attr">file:</span>    <span class="hljs-attr">max-size:</span> <span class="hljs-string">200MB</span>    <span class="hljs-attr">max-history:</span> <span class="hljs-number">7</span>    <span class="hljs-attr">path:</span> <span class="hljs-string">/opt/logs</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">/opt/logs/$&#123;HOSTNAME&#125;.$&#123;spring.application.name&#125;.log</span></code></pre><p><strong>注意：actuator开启prometheus需要添加依赖</strong></p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.micrometer<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>micrometer-registry-prometheus<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;micrometer.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h3 id="2、Dockerfile"><a href="#2、Dockerfile" class="headerlink" title="2、Dockerfile"></a>2、Dockerfile</h3><blockquote><p>在项目根目录下创建<code>Dockerfile</code></p></blockquote><pre><code class="hljs Dockerfile"><span class="hljs-comment"># base镜像 - JDK发行版</span><span class="hljs-keyword">FROM</span> adoptopenjdk:<span class="hljs-number">8</span>u252-b09-jdk-hotspot<span class="hljs-comment"># 署名</span><span class="hljs-keyword">MAINTAINER</span> Boer Zhang &lt;boer0924@gmail.com&gt;<span class="hljs-comment"># 工作目录 - 即jar包所在目录</span><span class="hljs-keyword">WORKDIR</span><span class="bash"> /opt</span><span class="hljs-comment"># mvn clean package -Dmaven.test.skip=true</span><span class="hljs-comment">## 服务版本</span><span class="hljs-keyword">COPY</span><span class="bash"> target/produce-1.0.1.jar .</span><span class="hljs-comment"># 更改镜像时区</span><span class="hljs-keyword">RUN</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">"Asia/Chongqing"</span> &gt; /etc/timezone</span><span class="hljs-comment"># 暴露服务端口</span><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">10080</span><span class="hljs-comment"># 服务启动命令</span><span class="hljs-comment">## 1、$&#123;JVM_OPTS&#125; - JVM配置，如：-Xms768m -Xmx768m -javaagent:/usr/skywalking/agent/skywalking-agent.jar</span><span class="hljs-comment">## 2、$&#123;APP_OPTS&#125; - APP配置，如：--spring.profiles.active=dev --spring.kafka.consumer.group-id=xxx.group</span><span class="hljs-keyword">CMD</span><span class="bash"> [ <span class="hljs-string">"sh"</span>, <span class="hljs-string">"-c"</span>, <span class="hljs-string">"java <span class="hljs-variable">$&#123;JVM_OPTS&#125;</span> -jar produce-1.0.1.jar <span class="hljs-variable">$&#123;APP_OPTS&#125;</span>"</span> ]</span></code></pre><h3 id="3、K8S容器云部署文件模板"><a href="#3、K8S容器云部署文件模板" class="headerlink" title="3、K8S容器云部署文件模板"></a>3、K8S容器云部署文件模板</h3><blockquote><p>在项目根目录下创建<code>manifests</code>目录，在目录下创建文件<code>k8s.yaml</code></p></blockquote><ol><li><strong>服务名称</strong> - 全局替换<code>&lt;change-me&gt;</code>为您的服务名称</li><li><strong>服务端口</strong> - 全局替换<code>10080</code>为您的服务端口</li><li><strong>服务资源</strong> - 注意<code>resources</code>字段服务所申请的资源</li><li><strong>服务域名</strong> - 根据实际情况，选择是否需要对外暴露Ingress</li><li><strong>服务版本</strong> - 根据项目pom文件<code>version</code>字段，同时修改Dockerfile中jar包版本</li></ol><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><span class="hljs-attr">metadata:</span>  <span class="hljs-attr">name:</span> <span class="hljs-string">&lt;change-me&gt;-deployment</span> <span class="hljs-comment"># deployment名称</span>  <span class="hljs-attr">annotations:</span>    <span class="hljs-attr">kubernetes.io/change-cause:</span> <span class="hljs-string">&lt;CHANGE_CAUSE&gt;</span> <span class="hljs-comment"># 版本说明 - 用于回滚等</span><span class="hljs-attr">spec:</span>  <span class="hljs-attr">selector:</span>    <span class="hljs-attr">matchLabels:</span>      <span class="hljs-attr">app:</span> <span class="hljs-string">&lt;change-me&gt;</span> <span class="hljs-comment"># 标签选择器，与下面[Flag_label]对应</span>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 多实例</span>  <span class="hljs-attr">template:</span>    <span class="hljs-attr">metadata:</span>      <span class="hljs-attr">labels:</span>        <span class="hljs-attr">app:</span> <span class="hljs-string">&lt;change-me&gt;</span> <span class="hljs-comment"># [Flag_label]</span>    <span class="hljs-attr">spec:</span>      <span class="hljs-attr">initContainers:</span> <span class="hljs-comment"># skywalking-agent initContainer</span>        <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">registry.boer.xyz/public/skywalking-agent:8.1.0</span>          <span class="hljs-attr">name:</span> <span class="hljs-string">skywalking-agent</span>          <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span>          <span class="hljs-attr">command:</span> <span class="hljs-string">['sh']</span>          <span class="hljs-attr">args:</span> <span class="hljs-string">['-c','cp</span> <span class="hljs-string">-r</span> <span class="hljs-string">/usr/skywalking/agent/*</span> <span class="hljs-string">/skywalking/agent']</span>          <span class="hljs-attr">volumeMounts:</span>            <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/skywalking/agent</span>              <span class="hljs-attr">name:</span> <span class="hljs-string">skywalking-agent</span>      <span class="hljs-attr">containers:</span>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&lt;change-me&gt;</span> <span class="hljs-comment"># EFK日志系统日志查询tag</span>          <span class="hljs-attr">image:</span> <span class="hljs-string">&lt;IMAGE&gt;:&lt;IMAGE_TAG&gt;</span> <span class="hljs-comment"># 镜像地址:版本</span>          <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span>          <span class="hljs-attr">volumeMounts:</span>            <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/usr/skywalking/agent</span> <span class="hljs-comment"># 挂载skywalking-agent到pod</span>              <span class="hljs-attr">name:</span> <span class="hljs-string">skywalking-agent</span>            <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/opt/logs</span> <span class="hljs-comment"># 挂载app-logs到node</span>              <span class="hljs-attr">name:</span> <span class="hljs-string">app-logs</span>          <span class="hljs-attr">ports:</span>            <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">10080</span> <span class="hljs-comment"># 服务暴露端口</span>          <span class="hljs-attr">resources:</span> <span class="hljs-comment"># 服务所需资源申请</span>            <span class="hljs-attr">requests:</span>              <span class="hljs-attr">memory:</span> <span class="hljs-string">"512Mi"</span>              <span class="hljs-attr">cpu:</span> <span class="hljs-string">"200m"</span>            <span class="hljs-attr">limits:</span>              <span class="hljs-attr">memory:</span> <span class="hljs-string">"1Gi"</span>              <span class="hljs-attr">cpu:</span> <span class="hljs-string">"600m"</span>          <span class="hljs-attr">env:</span> <span class="hljs-comment"># 环境变量</span>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">ENVIRONMENT</span>              <span class="hljs-attr">value:</span> <span class="hljs-string">"pro"</span>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">APP_OPTS</span>              <span class="hljs-attr">value:</span> <span class="hljs-string">"--spring.kafka.consumer.group-id=consumer.group"</span>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">JVM_OPTS</span>              <span class="hljs-attr">value:</span> <span class="hljs-string">"-Xms512m -Xmx512m -javaagent:/usr/skywalking/agent/skywalking-agent.jar"</span>          <span class="hljs-attr">livenessProbe:</span> <span class="hljs-comment"># 存活探针</span>            <span class="hljs-attr">httpGet:</span>              <span class="hljs-attr">path:</span> <span class="hljs-string">/actuator/health</span>              <span class="hljs-attr">port:</span> <span class="hljs-number">10080</span>            <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">60</span>            <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">10</span>            <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">5</span>          <span class="hljs-attr">readinessProbe:</span> <span class="hljs-comment"># 就绪探针</span>            <span class="hljs-attr">httpGet:</span>              <span class="hljs-attr">path:</span> <span class="hljs-string">/actuator/health</span>              <span class="hljs-attr">port:</span> <span class="hljs-number">10080</span>            <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">30</span>            <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">10</span>            <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">5</span>          <span class="hljs-attr">lifecycle:</span>            <span class="hljs-attr">preStop:</span> <span class="hljs-comment"># pod停止前Hook - 优雅停机</span>              <span class="hljs-attr">exec:</span>                <span class="hljs-attr">command:</span>                  <span class="hljs-bullet">-</span> <span class="hljs-string">"curl"</span>                  <span class="hljs-bullet">-</span> <span class="hljs-string">"-XPOST"</span>                  <span class="hljs-bullet">-</span> <span class="hljs-string">"http://127.0.0.1:10080/actuator/shutdown"</span>      <span class="hljs-attr">imagePullSecrets:</span>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">regcred</span>      <span class="hljs-attr">volumes:</span>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">skywalking-agent</span>          <span class="hljs-attr">emptyDir:</span> <span class="hljs-string">&#123;&#125;</span>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">app-logs</span>          <span class="hljs-attr">hostPath:</span>            <span class="hljs-attr">path:</span> <span class="hljs-string">/opt/app-logs/&lt;change-me&gt;</span>            <span class="hljs-attr">type:</span> <span class="hljs-string">DirectoryOrCreate</span><span class="hljs-meta">---</span><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><span class="hljs-attr">metadata:</span>  <span class="hljs-attr">name:</span> <span class="hljs-string">&lt;change-me&gt;-service</span> <span class="hljs-comment"># 服务名称</span>  <span class="hljs-attr">annotations:</span>    <span class="hljs-attr">prometheus.io/path:</span> <span class="hljs-string">/actuator/prometheus</span> <span class="hljs-comment"># 应用监控metrics路径 - 对应配置文件开启prometheus</span>    <span class="hljs-attr">prometheus.io/port:</span> <span class="hljs-string">"10080"</span>    <span class="hljs-attr">prometheus.io/scrape:</span> <span class="hljs-string">"true"</span>  <span class="hljs-attr">labels:</span>    <span class="hljs-attr">app:</span> <span class="hljs-string">&lt;change-me&gt;</span><span class="hljs-attr">spec:</span>  <span class="hljs-attr">type:</span> <span class="hljs-string">ClusterIP</span>  <span class="hljs-attr">ports:</span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">10080</span>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">10080</span>  <span class="hljs-attr">selector:</span>    <span class="hljs-attr">app:</span> <span class="hljs-string">&lt;change-me&gt;</span><span class="hljs-meta">---</span><span class="hljs-comment"># 请根据实际情况，选择是否需要对外暴露Ingress</span><span class="hljs-comment">## 在微服务架构中，一般通过Gateway网关统一对外提供服务，微服务单独对外暴露Ingress情况请谨慎选择</span><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.k8s.io/v1beta1</span><span class="hljs-attr">kind:</span> <span class="hljs-string">Ingress</span><span class="hljs-attr">metadata:</span>  <span class="hljs-attr">name:</span> <span class="hljs-string">&lt;change-me&gt;-ingress</span>  <span class="hljs-attr">annotations:</span>    <span class="hljs-attr">nginx.ingress.kubernetes.io/rewrite-target:</span> <span class="hljs-string">/</span>    <span class="hljs-attr">nginx.ingress.kubernetes.io/load-balance:</span> <span class="hljs-string">"ip_hash"</span> <span class="hljs-comment"># session保持</span>    <span class="hljs-attr">nginx.ingress.kubernetes.io/upstream-hash-by:</span> <span class="hljs-string">"$request_uri"</span> <span class="hljs-comment"># 配合ip_hash使用</span><span class="hljs-attr">spec:</span>  <span class="hljs-attr">rules:</span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">host:</span> <span class="hljs-string">&lt;change-me&gt;.boer.xyz</span> <span class="hljs-comment"># Ingress 域名</span>      <span class="hljs-attr">http:</span>        <span class="hljs-attr">paths:</span>          <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/</span>            <span class="hljs-attr">backend:</span>              <span class="hljs-attr">serviceName:</span> <span class="hljs-string">&lt;change-me&gt;-service</span>              <span class="hljs-attr">servicePort:</span> <span class="hljs-number">10080</span></code></pre><h3 id="4、K8S发布"><a href="#4、K8S发布" class="headerlink" title="4、K8S发布"></a>4、K8S发布</h3><blockquote><p>此过程已通过<a href="/2020/06/23/k8s-cicd-jenkins-pipeline/">Jenkins Pipeline自动化CICD方式实现</a></p></blockquote><ol><li><strong>Git clone/pull代码</strong>：<code>git clone git://gitea.boer.xyz/spring-produce.git</code></li><li><strong>Junit单元测试</strong>：<code>mvn test</code> # 普通程序员都没有单元测试？</li><li><strong>Maven编译打包</strong>：<code>mvn clean package -Dmaven.test.skip=true</code></li><li><strong>Docker打包镜像</strong>：<code>docker build -t ${image}:${imageTag} .</code></li><li><strong>Harbor镜像推送</strong>：<code>docker push ${image}:${imageTag}</code></li><li><strong>Sed渲染模板</strong>：<pre><code class="hljs bash">sed -i <span class="hljs-string">"s|&lt;CHANGE_CAUSE&gt;|<span class="hljs-variable">$&#123;changeCause&#125;</span>|g"</span> manifests/k8s.yamlsed -i <span class="hljs-string">"s|&lt;IMAGE&gt;|<span class="hljs-variable">$&#123;image&#125;</span>|g"</span> manifests/k8s.yamlsed -i <span class="hljs-string">"s|&lt;IMAGE_TAG&gt;|<span class="hljs-variable">$&#123;imageTag&#125;</span>|g"</span> manifests/k8s.yaml</code></pre></li><li><strong>Kubectl部署应用</strong>：<code>kubectl --kubeconfig $kubeconfig apply -f manifests/k8s.yaml -n ${NAMESPACE}</code></li><li><strong>Rollout快速回滚</strong>：<code>kubectl --kubeconfig ${kubeconfig} rollout undo deployment consume-deployment -n ${NAMESPACE}</code></li></ol>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>微服务</tag>
      
      <tag>SpringCloud</tag>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes CICD工具Drone</title>
    <link href="/2020/06/24/k8s-cicd-drone/"/>
    <url>/2020/06/24/k8s-cicd-drone/</url>
    
    <content type="html"><![CDATA[<p>Drone是一个Go语言实现的CICD编排工具，超级轻量级。</p><p>Drone by Harness™ is a modern Continuous Integration platform that empowers busy teams to automate their build, test and release workflows using a powerful, cloud native pipeline engine.</p><a id="more"></a><pre><code class="hljs yaml"><span class="hljs-meta">---</span><span class="hljs-attr">kind:</span> <span class="hljs-string">pipeline</span><span class="hljs-attr">type:</span> <span class="hljs-string">kubernetes</span><span class="hljs-attr">name:</span> <span class="hljs-string">boer</span><span class="hljs-attr">steps:</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">build</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">maven:3.6.3-jdk-8</span>    <span class="hljs-attr">pull:</span> <span class="hljs-string">if-not-exists</span>    <span class="hljs-attr">volumes:</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">maven-cache</span>        <span class="hljs-attr">path:</span> <span class="hljs-string">/root/.m2</span>    <span class="hljs-attr">commands:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">mvn</span> <span class="hljs-string">clean</span> <span class="hljs-string">package</span> <span class="hljs-string">-DskipTests=true</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">package</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">docker:19.03.8</span>    <span class="hljs-attr">pull:</span> <span class="hljs-string">if-not-exists</span>    <span class="hljs-attr">volumes:</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">docker-sock</span>        <span class="hljs-attr">path:</span> <span class="hljs-string">/var/run/docker.sock</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">docker-cache</span>        <span class="hljs-attr">path:</span> <span class="hljs-string">/var/lib/docker</span>    <span class="hljs-attr">environment:</span>      <span class="hljs-attr">repo:</span> <span class="hljs-string">registry.boer.xyz/public/spring-produce</span>      <span class="hljs-attr">registry:</span> <span class="hljs-string">registry.boer.xyz</span>      <span class="hljs-attr">username:</span>        <span class="hljs-attr">from_secret:</span> <span class="hljs-string">docker_username</span>      <span class="hljs-attr">password:</span>        <span class="hljs-attr">from_secret:</span> <span class="hljs-string">docker_password</span>      <span class="hljs-attr">tags:</span> <span class="hljs-string">"$&#123;DRONE_COMMIT_SHA:0:10&#125;"</span>    <span class="hljs-attr">commands:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">docker</span> <span class="hljs-string">login</span> <span class="hljs-string">$&#123;registry&#125;</span> <span class="hljs-string">-u</span> <span class="hljs-string">$&#123;username&#125;</span> <span class="hljs-string">-p</span> <span class="hljs-string">$&#123;password&#125;</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">docker</span> <span class="hljs-string">build</span> <span class="hljs-string">-t</span> <span class="hljs-string">"$&#123;repo&#125;:$&#123;tags&#125;"</span> <span class="hljs-string">.</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">docker</span> <span class="hljs-string">push</span> <span class="hljs-string">"$&#123;repo&#125;:$&#123;tags&#125;"</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">k8s</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">boer0924/kubectl:1.18.3</span>    <span class="hljs-attr">pull:</span> <span class="hljs-string">if-not-exists</span>    <span class="hljs-attr">volumes:</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">kube-config</span>        <span class="hljs-attr">path:</span> <span class="hljs-string">/root/.kube/config</span>    <span class="hljs-attr">commands:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">kubectl</span> <span class="hljs-string">get</span> <span class="hljs-string">nodes</span><span class="hljs-attr">trigger:</span>  <span class="hljs-attr">branch:</span>    <span class="hljs-bullet">-</span> <span class="hljs-string">master</span>  <span class="hljs-attr">event:</span>    <span class="hljs-bullet">-</span> <span class="hljs-string">push</span><span class="hljs-attr">volumes:</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">maven-cache</span>    <span class="hljs-attr">host:</span>      <span class="hljs-attr">path:</span> <span class="hljs-string">/var/lib/cache/.m2</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">kube-config</span>    <span class="hljs-attr">host:</span>      <span class="hljs-attr">path:</span> <span class="hljs-string">/root/.kube/config</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">docker-cache</span>    <span class="hljs-attr">host:</span>      <span class="hljs-attr">path:</span> <span class="hljs-string">/var/lib/docker</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">docker-sock</span>    <span class="hljs-attr">host:</span>      <span class="hljs-attr">path:</span> <span class="hljs-string">/var/run/docker.sock</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>CICD</tag>
      
      <tag>Jenkins</tag>
      
      <tag>Pipeline</tag>
      
      <tag>Drone</tag>
      
      <tag>Harbor</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes CICD工具Jenkins Pipeline</title>
    <link href="/2020/06/23/k8s-cicd-jenkins-pipeline/"/>
    <url>/2020/06/23/k8s-cicd-jenkins-pipeline/</url>
    
    <content type="html"><![CDATA[<p>持续构建与发布是我们日常工作中必不可少的一个步骤，目前大多公司都采用 Jenkins 集群来搭建符合需求的 CI/CD 流程，然而传统的 Jenkins Slave 一主多从方式会存在一些痛点，比如：</p><ul><li>主 Master 发生单点故障时，整个流程都不可用了</li><li>每个 Slave 的配置环境不一样，来完成不同语言的编译打包等操作，但是这些差异化的配置导致管理起来非常不方便，维护起来也是比较费劲</li><li>资源分配不均衡，有的 Slave 要运行的 job 出现排队等待，而有的 Slave 处于空闲状态</li><li>资源有浪费，每台 Slave 可能是物理机或者虚拟机，当 Slave 处于空闲状态时，也不会完全释放掉资源。</li></ul><a id="more"></a><p>正因为上面的这些种种痛点，我们渴望一种更高效更可靠的方式来完成这个 CI/CD 流程，而 Docker 虚拟化容器技术能很好的解决这个痛点，又特别是在 Kubernetes 集群环境下面能够更好来解决上面的问题，下图是基于 Kubernetes 搭建 Jenkins 集群的简单示意图：<br><img src="/img/k8s-jenkins-arch.png" srcset="/img/loading.gif" alt=""></p><p>从图上可以看到 Jenkins Master 和 Jenkins Slave 以 Pod 形式运行在 Kubernetes 集群的 Node 上，Master 运行在其中一个节点，并且将其配置数据存储到一个 Volume 上去，Slave 运行在各个节点上，并且它不是一直处于运行状态，它会按照需求动态的创建并自动删除。</p><p>这种方式的工作流程大致为：当 Jenkins Master 接受到 Build 请求时，会根据配置的 Label 动态创建一个运行在 Pod 中的 Jenkins Slave 并注册到 Master 上，当运行完 Job 后，这个 Slave 会被注销并且这个 Pod 也会自动删除，恢复到最初状态。</p><p>那么我们使用这种方式带来了哪些好处呢？</p><ul><li>服务高可用，当 Jenkins Master 出现故障时，Kubernetes 会自动创建一个新的 Jenkins Master 容器，并且将 Volume 分配给新创建的容器，保证数据不丢失，从而达到集群服务高可用。</li><li>动态伸缩，合理使用资源，每次运行 Job 时，会自动创建一个 Jenkins Slave，Job 完成后，Slave 自动注销并删除容器，资源自动释放，而且 Kubernetes 会根据每个资源的使用情况，动态分配 Slave 到空闲的节点上创建，降低出现因某节点资源利用率高，还排队等待在该节点的情况。</li><li>扩展性好，当 Kubernetes 集群的资源严重不足而导致 Job 排队等待时，可以很容易的添加一个 Kubernetes Node 到集群中，从而实现扩展。 当然这也是 Kubernetes 集群本来的便捷性。</li></ul><h3 id="Jenkins-Pipeline"><a href="#Jenkins-Pipeline" class="headerlink" title="Jenkins Pipeline"></a>Jenkins Pipeline</h3><p>Jenkins流水线是一套插件，它支持实现和集成持续交付流水线到Jenkins中。</p><p>Jenkinsfile一般有几个配置管理方式：</p><ol><li>在Jenkins WebUI中配置管理</li><li>检入到源码管理系统中配置管理(推荐方式)</li></ol><p>Jenkinsfile: 创建一个检入到源码管理系统中的<code>Jenkinsfile</code>带来了一些直接的好处：</p><ol><li>流水线上的代码评审/迭代</li><li>对流水线进行审计跟踪</li><li>流水线的单一可信数据源，能够被项目的多个成员查看和编辑</li></ol><p>流水线支持 两种语法：声明式（在 Pipeline 2.5 引入）和脚本式流水线。<a href="https://www.jenkins.io/doc/book/pipeline/syntax/" target="_blank" rel="noopener">官方文档</a></p><h3 id="Jenkins安装"><a href="#Jenkins安装" class="headerlink" title="Jenkins安装"></a>Jenkins安装</h3><pre><code class="hljs routeros">helm fetch stable/jenkins -version 2.1.2tar -zxf jenkins-2.1.2.tgzvim jenkins/values.yamlhelm install --name jenkins -f values.yaml . --namespace devopshelm<span class="hljs-built_in"> upgrade </span>jenkins -f values.yaml . --namespace devopshelm delete --purge jenkins</code></pre><blockquote><p><a href="https://github.com/helm/charts/tree/master/stable/jenkins#200-configuration-as-code-now-default--container-does-not-run-as-root-anymore" target="_blank" rel="noopener">https://github.com/helm/charts/tree/master/stable/jenkins#200-configuration-as-code-now-default--container-does-not-run-as-root-anymore</a></p></blockquote><pre><code class="hljs yaml"><span class="hljs-comment"># values.yaml</span><span class="hljs-attr">clusterZone:</span> <span class="hljs-string">"cluster.local"</span><span class="hljs-attr">master:</span>  <span class="hljs-attr">numExecutors:</span> <span class="hljs-number">2</span> <span class="hljs-comment"># 允许在master节点上同时执行2个任务</span>  <span class="hljs-comment"># https://github.com/helm/charts/tree/master/stable/jenkins#200-configuration-as-code-now-default--container-does-not-run-as-root-anymore</span>  <span class="hljs-attr">enableXmlConfig:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 允许变更配置 -&gt; &lt;your-jenkins-ingress&gt;/configureSecurity此url下设置`安全域`为`Jenkins专有用户数据库`</span>  <span class="hljs-attr">resources:</span>    <span class="hljs-attr">requests:</span>      <span class="hljs-attr">cpu:</span> <span class="hljs-string">"50m"</span>      <span class="hljs-attr">memory:</span> <span class="hljs-string">"256Mi"</span>    <span class="hljs-attr">limits:</span>      <span class="hljs-attr">cpu:</span> <span class="hljs-string">"1000m"</span>      <span class="hljs-attr">memory:</span> <span class="hljs-string">"1024Mi"</span>  <span class="hljs-attr">installPlugins:</span>    <span class="hljs-bullet">-</span> <span class="hljs-string">kubernetes:1.25.7</span>    <span class="hljs-bullet">-</span> <span class="hljs-string">workflow-job:2.39</span>    <span class="hljs-bullet">-</span> <span class="hljs-string">workflow-aggregator:2.6</span>    <span class="hljs-bullet">-</span> <span class="hljs-string">credentials-binding:1.23</span>    <span class="hljs-bullet">-</span> <span class="hljs-string">git:4.2.2</span>    <span class="hljs-bullet">-</span> <span class="hljs-string">configuration-as-code:1.41</span>    <span class="hljs-bullet">-</span> <span class="hljs-string">blueocean:1.23.2</span>    <span class="hljs-bullet">-</span> <span class="hljs-string">git-parameter:0.9.12</span>    <span class="hljs-bullet">-</span> <span class="hljs-string">localization-zh-cn:1.0.17</span>  <span class="hljs-attr">ingress:</span>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">hostName:</span> <span class="hljs-string">jenkins.boer.xyz</span><span class="hljs-attr">agent:</span>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 我们在pipeline中自定义Agent Pod</span><span class="hljs-attr">persistence:</span>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">storageClass:</span> <span class="hljs-string">openebs-hostpath</span>  <span class="hljs-attr">accessMode:</span> <span class="hljs-string">"ReadWriteOnce"</span>  <span class="hljs-attr">size:</span> <span class="hljs-string">"2Gi"</span></code></pre><p>必备Plugins:</p><ul><li>kubernetes:1.25.7</li><li>workflow-job:2.39</li><li>workflow-aggregator:2.6</li><li>credentials-binding:1.23</li><li>git:4.2.2</li><li>configuration-as-code:1.41</li><li>blueocean:1.23.2</li><li>git-parameter:0.9.12</li><li>localization-zh-cn:1.0.17</li></ul><h3 id="Jenkins配置操作"><a href="#Jenkins配置操作" class="headerlink" title="Jenkins配置操作"></a>Jenkins配置操作</h3><h4 id="全局安全配置"><a href="#全局安全配置" class="headerlink" title="全局安全配置"></a>全局安全配置</h4><blockquote><p>系统管理 -&gt; 全局安全配置 -&gt; Authentication -&gt; 安全域 -&gt; Jenkins专有用户数据库</p></blockquote><p><img src="/img/jenkins_auth.png" srcset="/img/loading.gif" alt="auth"></p><h4 id="添加全局凭证"><a href="#添加全局凭证" class="headerlink" title="添加全局凭证"></a>添加全局凭证</h4><blockquote><p>系统管理 -&gt; Manage Credentials -&gt; Stores scoped to Jenkins -&gt; Jenkins -&gt; 全局凭据 (unrestricted) -&gt; 添加凭据</p></blockquote><h5 id="1-添加代码仓库凭证"><a href="#1-添加代码仓库凭证" class="headerlink" title="1. 添加代码仓库凭证"></a>1. 添加<code>代码仓库</code>凭证</h5><p><img src="/img/jenkins_key_gitea.jpg" srcset="/img/loading.gif" alt="key-gitea"></p><h5 id="2-添加Harbor-Registry凭证"><a href="#2-添加Harbor-Registry凭证" class="headerlink" title="2. 添加Harbor Registry凭证"></a>2. 添加Harbor Registry凭证</h5><ul><li>方法同添加<code>代码仓库</code>凭证</li><li>添加harbor统一镜像拉取账号 <a href="/2019/09/09/k8s-registry-harbor/#%E5%88%9B%E5%BB%BARegistry-secret">参考</a></li></ul><h5 id="3-添加kubeconfig凭证"><a href="#3-添加kubeconfig凭证" class="headerlink" title="3. 添加kubeconfig凭证"></a>3. 添加kubeconfig凭证</h5><p><img src="/img/jenkins_key_kubeconfig.jpg" srcset="/img/loading.gif" alt="key-kubeconfig"></p><h3 id="KubernetesPod-yaml"><a href="#KubernetesPod-yaml" class="headerlink" title="KubernetesPod.yaml"></a>KubernetesPod.yaml</h3><p><strong>划重点</strong></p><ol><li>maven缓存.m2</li><li>docker in docker</li><li>jnlp容器必须有，command不能覆盖<code>jenkins-slave</code></li></ol><pre><code class="hljs yaml"><span class="hljs-meta">---</span><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><span class="hljs-attr">metadata:</span>  <span class="hljs-attr">labels:</span>    <span class="hljs-attr">jenkins-slave:</span> <span class="hljs-literal">true</span><span class="hljs-attr">spec:</span>  <span class="hljs-attr">volumes:</span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">maven-cache</span>      <span class="hljs-attr">hostPath:</span>        <span class="hljs-attr">path:</span> <span class="hljs-string">/var/lib/cache/.m2</span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">docker-sock</span>      <span class="hljs-attr">hostPath:</span>        <span class="hljs-attr">path:</span> <span class="hljs-string">/var/run/docker.sock</span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">docker-cache</span>      <span class="hljs-attr">hostPath:</span>        <span class="hljs-attr">path:</span> <span class="hljs-string">/var/lib/docker</span>  <span class="hljs-attr">containers:</span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">jnlp</span>      <span class="hljs-attr">image:</span> <span class="hljs-string">jenkins/jnlp-slave:3.27-1</span>      <span class="hljs-attr">tty:</span> <span class="hljs-literal">true</span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">maven</span>      <span class="hljs-attr">image:</span> <span class="hljs-string">maven:3.6.3-jdk-8</span>      <span class="hljs-attr">command:</span>        <span class="hljs-bullet">-</span> <span class="hljs-string">cat</span>      <span class="hljs-attr">tty:</span> <span class="hljs-literal">true</span>      <span class="hljs-attr">volumeMounts:</span>        <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/root/.m2</span>          <span class="hljs-attr">name:</span> <span class="hljs-string">maven-cache</span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">docker</span>      <span class="hljs-attr">image:</span> <span class="hljs-string">docker:19.03.8</span>      <span class="hljs-attr">volumeMounts:</span>        <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/var/run/docker.sock</span>          <span class="hljs-attr">name:</span> <span class="hljs-string">docker-sock</span>        <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/var/lib/docker</span>          <span class="hljs-attr">name:</span> <span class="hljs-string">docker-cache</span>      <span class="hljs-attr">tty:</span> <span class="hljs-literal">true</span>      <span class="hljs-attr">command:</span>        <span class="hljs-bullet">-</span> <span class="hljs-string">cat</span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">kubectl</span>      <span class="hljs-attr">image:</span> <span class="hljs-string">boer0924/kubectl:1.18.3</span>      <span class="hljs-attr">tty:</span> <span class="hljs-literal">true</span>      <span class="hljs-attr">command:</span>        <span class="hljs-bullet">-</span> <span class="hljs-string">cat</span></code></pre><h3 id="Jenkinsfile"><a href="#Jenkinsfile" class="headerlink" title="Jenkinsfile"></a>Jenkinsfile</h3><h4 id="声明式Jenkinsfile"><a href="#声明式Jenkinsfile" class="headerlink" title="声明式Jenkinsfile"></a>声明式Jenkinsfile</h4><p><strong>划重点</strong></p><ol><li>定义agent label是为在k8s中调度job的pod名字</li><li>定义parameters来选择需要部署的环境。</li><li>Jenkinsfile的两个全局变量：env/params。<ul><li>设置env变量: <code>env.KEY = value</code></li><li>使用env变量: <code>${KEY}</code></li></ul></li><li>username&amp;password凭证的使用: <code>registryCre = credentials(&#39;registry&#39;)</code> [_USR/_PSW]<ul><li>获取username: <code>${registryCre_USR}</code></li><li>获取passowrd: <code>${registryCre_PSW}</code></li></ul></li><li>使用short commit_id作为image_tag 和 <code>kubernetes.io/change-cause</code>, 以保证镜像唯一，和可以回退到指定版本。</li><li>sed动态修改k8s资源定义文件manifests/k8s.yaml：<ul><li><CHANGE_CAUSE>: 便于指定版本回退</li><li><IMAGE_TAG>: 指定版本</li><li><INGRESS>: 不同环境不同域名</li></ul></li></ol><pre><code class="hljs yaml"><span class="hljs-string">pipeline</span> <span class="hljs-string">&#123;</span>  <span class="hljs-string">agent</span> <span class="hljs-string">&#123;</span>    <span class="hljs-string">kubernetes</span> <span class="hljs-string">&#123;</span>      <span class="hljs-string">label</span> <span class="hljs-string">'jenkins-worker'</span>      <span class="hljs-string">defaultContainer</span> <span class="hljs-string">'jnlp'</span>      <span class="hljs-string">yamlFile</span> <span class="hljs-string">'manifests/KubernetesPod.yaml'</span>    <span class="hljs-string">&#125;</span>  <span class="hljs-string">&#125;</span>  <span class="hljs-string">parameters</span> <span class="hljs-string">&#123;</span>    <span class="hljs-string">choice(name:</span> <span class="hljs-string">'ENV'</span><span class="hljs-string">,</span> <span class="hljs-attr">choices:</span> <span class="hljs-string">['test',</span> <span class="hljs-string">'pre'</span><span class="hljs-string">,</span> <span class="hljs-string">'prod'</span><span class="hljs-string">],</span> <span class="hljs-attr">description:</span> <span class="hljs-string">'选择部署环境？'</span><span class="hljs-string">)</span>  <span class="hljs-string">&#125;</span>  <span class="hljs-string">environment</span> <span class="hljs-string">&#123;</span>    <span class="hljs-string">AUTHOR</span> <span class="hljs-string">=</span> <span class="hljs-string">'boer'</span>    <span class="hljs-string">EMAIL</span> <span class="hljs-string">=</span> <span class="hljs-string">'boer0924@gmail.com'</span>    <span class="hljs-string">registryUrl</span> <span class="hljs-string">=</span> <span class="hljs-string">'registry.boer.xyz'</span>    <span class="hljs-string">image</span> <span class="hljs-string">=</span> <span class="hljs-string">"$&#123;registryUrl&#125;/public/spring-consume"</span>    <span class="hljs-string">imageTag</span> <span class="hljs-string">=</span> <span class="hljs-string">sh(script:</span> <span class="hljs-string">"git rev-parse --short HEAD"</span><span class="hljs-string">,</span> <span class="hljs-attr">returnStdout:</span> <span class="hljs-literal">true</span><span class="hljs-string">).trim()</span>    <span class="hljs-string">changeCause</span> <span class="hljs-string">=</span> <span class="hljs-string">sh(script:</span> <span class="hljs-string">"git log --oneline -1 HEAD"</span><span class="hljs-string">,</span> <span class="hljs-attr">returnStdout:</span> <span class="hljs-literal">true</span><span class="hljs-string">).trim()</span>  <span class="hljs-string">&#125;</span>  <span class="hljs-string">stages</span> <span class="hljs-string">&#123;</span>    <span class="hljs-string">stage('Test')</span> <span class="hljs-string">&#123;</span>      <span class="hljs-string">steps</span> <span class="hljs-string">&#123;</span>        <span class="hljs-string">echo</span> <span class="hljs-string">"单元测试"</span>        <span class="hljs-string">echo</span> <span class="hljs-string">"TEST"</span>        <span class="hljs-string">script</span> <span class="hljs-string">&#123;</span>          <span class="hljs-string">if</span> <span class="hljs-string">("$&#123;params.ENV&#125;"</span> <span class="hljs-string">==</span> <span class="hljs-string">'test'</span><span class="hljs-string">)</span> <span class="hljs-string">&#123;</span>            <span class="hljs-string">env.NAMESPACE</span> <span class="hljs-string">=</span> <span class="hljs-string">'boer-test'</span>            <span class="hljs-string">env.INGRESS</span> <span class="hljs-string">=</span> <span class="hljs-string">'test.consume.boer.xyz'</span>          <span class="hljs-string">&#125;</span>          <span class="hljs-string">if</span> <span class="hljs-string">("$&#123;params.ENV&#125;"</span> <span class="hljs-string">==</span> <span class="hljs-string">'pre'</span><span class="hljs-string">)</span> <span class="hljs-string">&#123;</span>            <span class="hljs-string">env.NAMESPACE</span> <span class="hljs-string">=</span> <span class="hljs-string">'boer-pre'</span>            <span class="hljs-string">env.INGRESS</span> <span class="hljs-string">=</span> <span class="hljs-string">'pre.consume.boer.xyz'</span>          <span class="hljs-string">&#125;</span>          <span class="hljs-string">if</span> <span class="hljs-string">("$&#123;params.ENV&#125;"</span> <span class="hljs-string">==</span> <span class="hljs-string">'prod'</span><span class="hljs-string">)</span> <span class="hljs-string">&#123;</span>            <span class="hljs-string">env.NAMESPACE</span> <span class="hljs-string">=</span> <span class="hljs-string">'boer-prod'</span>            <span class="hljs-string">env.INGRESS</span> <span class="hljs-string">=</span> <span class="hljs-string">'consume.boer.xyz'</span>          <span class="hljs-string">&#125;</span>        <span class="hljs-string">&#125;</span>      <span class="hljs-string">&#125;</span>    <span class="hljs-string">&#125;</span>    <span class="hljs-string">stage('Maven')</span> <span class="hljs-string">&#123;</span>      <span class="hljs-string">steps</span> <span class="hljs-string">&#123;</span>        <span class="hljs-string">container('maven')</span> <span class="hljs-string">&#123;</span>          <span class="hljs-string">echo</span> <span class="hljs-string">"编译打包"</span>          <span class="hljs-string">sh</span> <span class="hljs-string">"mvn clean package -Dmaven.test.skip=true"</span>        <span class="hljs-string">&#125;</span>      <span class="hljs-string">&#125;</span>    <span class="hljs-string">&#125;</span>    <span class="hljs-string">stage('Docker')</span> <span class="hljs-string">&#123;</span>      <span class="hljs-string">environment</span> <span class="hljs-string">&#123;</span>        <span class="hljs-string">registryCre</span> <span class="hljs-string">=</span> <span class="hljs-string">credentials('dockerhub')</span>        <span class="hljs-string">registryUser</span> <span class="hljs-string">=</span> <span class="hljs-string">"$&#123;registryCre_USR&#125;"</span>        <span class="hljs-string">registryPass</span> <span class="hljs-string">=</span> <span class="hljs-string">"$&#123;registryCre_PSW&#125;"</span>      <span class="hljs-string">&#125;</span>      <span class="hljs-string">steps</span> <span class="hljs-string">&#123;</span>        <span class="hljs-string">container('docker')</span> <span class="hljs-string">&#123;</span>          <span class="hljs-string">echo</span> <span class="hljs-string">"构建镜像"</span>          <span class="hljs-string">sh</span> <span class="hljs-string">''</span><span class="hljs-string">'</span><span class="hljs-string">          docker login $&#123;registryUrl&#125; -u $&#123;registryUser&#125; -p $&#123;registryPass&#125;</span><span class="hljs-string">          docker build -t $&#123;image&#125;:$&#123;imageTag&#125; .</span><span class="hljs-string">          docker push $&#123;image&#125;:$&#123;imageTag&#125;</span><span class="hljs-string">          '</span><span class="hljs-string">''</span>        <span class="hljs-string">&#125;</span>      <span class="hljs-string">&#125;</span>    <span class="hljs-string">&#125;</span>    <span class="hljs-string">stage('K8S')</span> <span class="hljs-string">&#123;</span>      <span class="hljs-string">environment</span> <span class="hljs-string">&#123;</span>        <span class="hljs-string">kubeconfig</span> <span class="hljs-string">=</span> <span class="hljs-string">credentials('kubeconfig')</span>      <span class="hljs-string">&#125;</span>      <span class="hljs-string">steps</span> <span class="hljs-string">&#123;</span>        <span class="hljs-string">container('kubectl')</span> <span class="hljs-string">&#123;</span>          <span class="hljs-string">echo</span> <span class="hljs-string">"Kubernetes发布"</span>          <span class="hljs-string">sh</span> <span class="hljs-string">''</span><span class="hljs-string">'</span><span class="hljs-string">          sed -i "s|&lt;CHANGE_CAUSE&gt;|$&#123;changeCause&#125;|g" manifests/k8s.yaml</span><span class="hljs-string">          sed -i "s|&lt;IMAGE&gt;|$&#123;image&#125;|g" manifests/k8s.yaml</span><span class="hljs-string">          sed -i "s|&lt;IMAGE_TAG&gt;|$&#123;imageTag&#125;|g" manifests/k8s.yaml</span><span class="hljs-string">          sed -i "s|&lt;INGRESS&gt;|$&#123;INGRESS&#125;|g" manifests/k8s.yaml</span><span class="hljs-string">          kubectl --kubeconfig $kubeconfig apply -f manifests/k8s.yaml -n $&#123;NAMESPACE&#125;</span><span class="hljs-string">          '</span><span class="hljs-string">''</span>        <span class="hljs-string">&#125;</span>      <span class="hljs-string">&#125;</span>    <span class="hljs-string">&#125;</span>    <span class="hljs-string">stage('RollOut')</span> <span class="hljs-string">&#123;</span>      <span class="hljs-string">environment</span> <span class="hljs-string">&#123;</span>        <span class="hljs-string">kubeconfig</span> <span class="hljs-string">=</span> <span class="hljs-string">credentials('kubeconfig')</span>      <span class="hljs-string">&#125;</span>      <span class="hljs-string">input</span> <span class="hljs-string">&#123;</span>        <span class="hljs-string">id</span> <span class="hljs-string">'ROLLOUT'</span>        <span class="hljs-string">message</span> <span class="hljs-string">"是否快速回滚？"</span>        <span class="hljs-string">ok</span> <span class="hljs-string">"确认"</span>        <span class="hljs-string">submitter</span> <span class="hljs-string">""</span>        <span class="hljs-string">parameters</span> <span class="hljs-string">&#123;</span>          <span class="hljs-string">choice(name:</span> <span class="hljs-string">'UNDO'</span><span class="hljs-string">,</span> <span class="hljs-attr">choices:</span> <span class="hljs-string">['NO',</span> <span class="hljs-string">'YES'</span><span class="hljs-string">],</span> <span class="hljs-attr">description:</span> <span class="hljs-string">'是否快速回滚？'</span><span class="hljs-string">)</span>        <span class="hljs-string">&#125;</span>      <span class="hljs-string">&#125;</span>      <span class="hljs-string">steps</span> <span class="hljs-string">&#123;</span>        <span class="hljs-string">container('kubectl')</span> <span class="hljs-string">&#123;</span>          <span class="hljs-string">echo</span> <span class="hljs-string">"Kubernetes快速回滚"</span>          <span class="hljs-string">script</span> <span class="hljs-string">&#123;</span>            <span class="hljs-string">if</span> <span class="hljs-string">("$&#123;UNDO&#125;"</span> <span class="hljs-string">==</span> <span class="hljs-string">'YES'</span><span class="hljs-string">)</span> <span class="hljs-string">&#123;</span>              <span class="hljs-string">sh</span> <span class="hljs-string">''</span><span class="hljs-string">'</span><span class="hljs-string">              # 快速回滚 - 回滚到最近版本</span><span class="hljs-string">              kubectl --kubeconfig $&#123;kubeconfig&#125; rollout undo deployment consume-deployment -n $&#123;NAMESPACE&#125;</span><span class="hljs-string">              # 回滚到指定版本</span><span class="hljs-string">              # kubectl -n $&#123;NAMESPACE&#125; rollout undo deployment consume-deployment --to-revision=$(kubectl -n $&#123;NAMESPACE&#125; rollout history deployment consume-deployment | grep $&#123;COMMIT_ID&#125; | awk '</span><span class="hljs-string">&#123;print</span> <span class="hljs-string">$1&#125;')</span>              <span class="hljs-comment"># kubectl -n $&#123;NAMESPACE&#125; rollout status deployment consume-deployment</span>              <span class="hljs-string">''</span><span class="hljs-string">'</span><span class="hljs-string">            &#125;</span><span class="hljs-string">          &#125;</span><span class="hljs-string">        &#125;</span><span class="hljs-string">      &#125;</span><span class="hljs-string">    &#125;</span><span class="hljs-string">  &#125;</span><span class="hljs-string">&#125;</span></code></pre><h4 id="脚本式Jenkinsfile"><a href="#脚本式Jenkinsfile" class="headerlink" title="脚本式Jenkinsfile"></a>脚本式Jenkinsfile</h4><pre><code class="hljs yaml"><span class="hljs-string">def</span> <span class="hljs-string">label</span> <span class="hljs-string">=</span> <span class="hljs-string">"jenkins-slave"</span><span class="hljs-string">properties([</span>   <span class="hljs-string">parameters([</span>      <span class="hljs-string">choice(name:</span> <span class="hljs-string">'ENV'</span><span class="hljs-string">,</span> <span class="hljs-attr">choices:</span> <span class="hljs-string">['test',</span> <span class="hljs-string">'pre'</span><span class="hljs-string">,</span> <span class="hljs-string">'prod'</span><span class="hljs-string">],</span> <span class="hljs-attr">description:</span> <span class="hljs-string">'选择部署环境？'</span><span class="hljs-string">)</span>   <span class="hljs-string">])</span><span class="hljs-string">])</span><span class="hljs-string">podTemplate(label:</span> <span class="hljs-string">label,</span> <span class="hljs-attr">containers:</span> <span class="hljs-string">[</span>  <span class="hljs-string">containerTemplate(name:</span> <span class="hljs-string">'maven'</span><span class="hljs-string">,</span> <span class="hljs-attr">image:</span> <span class="hljs-string">'maven:3.6.3-jdk-8'</span><span class="hljs-string">,</span> <span class="hljs-attr">command:</span> <span class="hljs-string">'cat'</span><span class="hljs-string">,</span> <span class="hljs-attr">ttyEnabled:</span> <span class="hljs-literal">true</span><span class="hljs-string">),</span>  <span class="hljs-string">containerTemplate(name:</span> <span class="hljs-string">'docker'</span><span class="hljs-string">,</span> <span class="hljs-attr">image:</span> <span class="hljs-string">'docker:19.03.8'</span><span class="hljs-string">,</span> <span class="hljs-attr">command:</span> <span class="hljs-string">'cat'</span><span class="hljs-string">,</span> <span class="hljs-attr">ttyEnabled:</span> <span class="hljs-literal">true</span><span class="hljs-string">),</span>  <span class="hljs-string">containerTemplate(name:</span> <span class="hljs-string">'kubectl'</span><span class="hljs-string">,</span> <span class="hljs-attr">image:</span> <span class="hljs-string">'boer0924/kubectl:1.18.3'</span><span class="hljs-string">,</span> <span class="hljs-attr">command:</span> <span class="hljs-string">'cat'</span><span class="hljs-string">,</span> <span class="hljs-attr">ttyEnabled:</span> <span class="hljs-literal">true</span><span class="hljs-string">)],</span> <span class="hljs-attr">serviceAccount:</span> <span class="hljs-string">'jenkins'</span><span class="hljs-string">,</span> <span class="hljs-attr">volumes:</span> <span class="hljs-string">[</span>  <span class="hljs-string">hostPathVolume(mountPath:</span> <span class="hljs-string">'/root/.m2'</span><span class="hljs-string">,</span> <span class="hljs-attr">hostPath:</span> <span class="hljs-string">'/var/lib/cache/.m2'</span><span class="hljs-string">),</span>  <span class="hljs-string">hostPathVolume(mountPath:</span> <span class="hljs-string">'/var/run/docker.sock'</span><span class="hljs-string">,</span> <span class="hljs-attr">hostPath:</span> <span class="hljs-string">'/var/run/docker.sock'</span><span class="hljs-string">),</span>  <span class="hljs-string">hostPathVolume(mountPath:</span> <span class="hljs-string">'/var/lib/docker'</span><span class="hljs-string">,</span> <span class="hljs-attr">hostPath:</span> <span class="hljs-string">'/var/lib/docker'</span><span class="hljs-string">)</span><span class="hljs-string">])</span> <span class="hljs-string">&#123;</span>  <span class="hljs-string">node(label)</span> <span class="hljs-string">&#123;</span>    <span class="hljs-string">if</span> <span class="hljs-string">("$&#123;params.ENV&#125;"</span> <span class="hljs-string">==</span> <span class="hljs-string">'test'</span><span class="hljs-string">)</span> <span class="hljs-string">&#123;</span>      <span class="hljs-string">env.NAMESPACE</span> <span class="hljs-string">=</span> <span class="hljs-string">'devops'</span>      <span class="hljs-string">env.INGRESS</span> <span class="hljs-string">=</span> <span class="hljs-string">'test'</span>    <span class="hljs-string">&#125;</span>    <span class="hljs-string">if</span> <span class="hljs-string">("$&#123;params.ENV&#125;"</span> <span class="hljs-string">==</span> <span class="hljs-string">'pre'</span><span class="hljs-string">)</span> <span class="hljs-string">&#123;</span>      <span class="hljs-string">env.NAMESPACE</span> <span class="hljs-string">=</span> <span class="hljs-string">'pre'</span>      <span class="hljs-string">env.INGRESS</span> <span class="hljs-string">=</span> <span class="hljs-string">'pre'</span>    <span class="hljs-string">&#125;</span>    <span class="hljs-string">if</span> <span class="hljs-string">("$&#123;params.ENV&#125;"</span> <span class="hljs-string">==</span> <span class="hljs-string">'prod'</span><span class="hljs-string">)</span> <span class="hljs-string">&#123;</span>      <span class="hljs-string">env.NAMESPACE</span> <span class="hljs-string">=</span> <span class="hljs-string">'prod'</span>      <span class="hljs-string">env.INGRESS</span> <span class="hljs-string">=</span> <span class="hljs-string">'prod'</span>    <span class="hljs-string">&#125;</span>    <span class="hljs-string">def</span> <span class="hljs-string">myRepo</span> <span class="hljs-string">=</span> <span class="hljs-string">checkout</span> <span class="hljs-string">scm</span>    <span class="hljs-string">def</span> <span class="hljs-string">gitCommit</span> <span class="hljs-string">=</span> <span class="hljs-string">myRepo.GIT_COMMIT</span>    <span class="hljs-string">def</span> <span class="hljs-string">gitBranch</span> <span class="hljs-string">=</span> <span class="hljs-string">myRepo.GIT_BRANCH</span>    <span class="hljs-string">def</span> <span class="hljs-string">imageTag</span> <span class="hljs-string">=</span> <span class="hljs-string">sh(script:</span> <span class="hljs-string">"git rev-parse --short HEAD"</span><span class="hljs-string">,</span> <span class="hljs-attr">returnStdout:</span> <span class="hljs-literal">true</span><span class="hljs-string">).trim()</span>    <span class="hljs-string">def</span> <span class="hljs-string">changeCause</span> <span class="hljs-string">=</span> <span class="hljs-string">sh(script:</span> <span class="hljs-string">"git log --oneline -1 HEAD"</span><span class="hljs-string">,</span> <span class="hljs-attr">returnStdout:</span> <span class="hljs-literal">true</span><span class="hljs-string">).trim()</span>    <span class="hljs-string">def</span> <span class="hljs-string">dockerRegistryUrl</span> <span class="hljs-string">=</span> <span class="hljs-string">"registry.boer.xyz"</span>    <span class="hljs-string">def</span> <span class="hljs-string">imageEndpoint</span> <span class="hljs-string">=</span> <span class="hljs-string">"public/spring-produce"</span>    <span class="hljs-string">def</span> <span class="hljs-string">image</span> <span class="hljs-string">=</span> <span class="hljs-string">"$&#123;dockerRegistryUrl&#125;/$&#123;imageEndpoint&#125;"</span>    <span class="hljs-string">stage('单元测试')</span> <span class="hljs-string">&#123;</span>      <span class="hljs-string">echo</span> <span class="hljs-string">"1.测试阶段"</span>    <span class="hljs-string">&#125;</span>    <span class="hljs-string">stage('代码编译打包')</span> <span class="hljs-string">&#123;</span>      <span class="hljs-string">try</span> <span class="hljs-string">&#123;</span>        <span class="hljs-string">container('maven')</span> <span class="hljs-string">&#123;</span>          <span class="hljs-string">echo</span> <span class="hljs-string">"2. 代码编译打包阶段"</span>          <span class="hljs-string">sh</span> <span class="hljs-string">"mvn clean package -Dmaven.test.skip=true"</span>        <span class="hljs-string">&#125;</span>      <span class="hljs-string">&#125;</span> <span class="hljs-string">catch</span> <span class="hljs-string">(exc)</span> <span class="hljs-string">&#123;</span>        <span class="hljs-string">println</span> <span class="hljs-string">"构建失败 - $&#123;currentBuild.fullDisplayName&#125;"</span>        <span class="hljs-string">throw(exc)</span>      <span class="hljs-string">&#125;</span>    <span class="hljs-string">&#125;</span>    <span class="hljs-string">stage('构建</span> <span class="hljs-string">Docker</span> <span class="hljs-string">镜像')</span> <span class="hljs-string">&#123;</span>      <span class="hljs-string">withCredentials([[$class:</span> <span class="hljs-string">'UsernamePasswordMultiBinding'</span><span class="hljs-string">,</span>        <span class="hljs-attr">credentialsId:</span> <span class="hljs-string">'dockerhub'</span><span class="hljs-string">,</span>        <span class="hljs-attr">usernameVariable:</span> <span class="hljs-string">'DOCKER_HUB_USER'</span><span class="hljs-string">,</span>        <span class="hljs-attr">passwordVariable:</span> <span class="hljs-string">'DOCKER_HUB_PASSWORD'</span><span class="hljs-string">]])</span> <span class="hljs-string">&#123;</span>          <span class="hljs-string">container('docker')</span> <span class="hljs-string">&#123;</span>            <span class="hljs-string">echo</span> <span class="hljs-string">"3. 构建 Docker 镜像阶段"</span>            <span class="hljs-string">sh</span> <span class="hljs-string">""</span><span class="hljs-string">"</span><span class="hljs-string">              docker login $&#123;dockerRegistryUrl&#125; -u $&#123;DOCKER_HUB_USER&#125; -p $&#123;DOCKER_HUB_PASSWORD&#125;</span><span class="hljs-string">              docker build -t $&#123;image&#125;:$&#123;imageTag&#125; .</span><span class="hljs-string">              docker push $&#123;image&#125;:$&#123;imageTag&#125;</span><span class="hljs-string">              "</span><span class="hljs-string">""</span>          <span class="hljs-string">&#125;</span>        <span class="hljs-string">&#125;</span>    <span class="hljs-string">&#125;</span>    <span class="hljs-string">stage('运行</span> <span class="hljs-string">Kubectl')</span> <span class="hljs-string">&#123;</span>      <span class="hljs-string">withCredentials([file(credentialsId:</span> <span class="hljs-string">'kubeconfig'</span><span class="hljs-string">,</span> <span class="hljs-attr">variable:</span> <span class="hljs-string">'KUBECONFIG'</span><span class="hljs-string">)])</span> <span class="hljs-string">&#123;</span>        <span class="hljs-string">container('kubectl')</span> <span class="hljs-string">&#123;</span>          <span class="hljs-string">sh</span> <span class="hljs-string">"mkdir -p ~/.kube &amp;&amp; cp $&#123;KUBECONFIG&#125; ~/.kube/config"</span>          <span class="hljs-string">echo</span> <span class="hljs-string">"查看当前目录"</span>          <span class="hljs-string">sh</span> <span class="hljs-string">""</span><span class="hljs-string">"</span><span class="hljs-string">            sed -i "</span><span class="hljs-string">s|&lt;CHANGE_CAUSE&gt;|$&#123;changeCause&#125;|g"</span> <span class="hljs-string">manifests/k8s.yaml</span>            <span class="hljs-string">sed</span> <span class="hljs-string">-i</span> <span class="hljs-string">"s|&lt;IMAGE&gt;|$&#123;image&#125;|g"</span> <span class="hljs-string">manifests/k8s.yaml</span>            <span class="hljs-string">sed</span> <span class="hljs-string">-i</span> <span class="hljs-string">"s|&lt;IMAGE_TAG&gt;|$&#123;imageTag&#125;|g"</span> <span class="hljs-string">manifests/k8s.yaml</span>            <span class="hljs-string">sed</span> <span class="hljs-string">-i</span> <span class="hljs-string">"s|&lt;INGRESS&gt;|$&#123;INGRESS&#125;|g"</span> <span class="hljs-string">manifests/k8s.yaml</span>            <span class="hljs-string">kubectl</span> <span class="hljs-string">apply</span> <span class="hljs-string">-f</span> <span class="hljs-string">manifests/k8s.yaml</span> <span class="hljs-string">--namespace</span> <span class="hljs-string">$&#123;NAMESPACE&#125;</span>          <span class="hljs-string">""</span><span class="hljs-string">"</span><span class="hljs-string">        &#125;</span><span class="hljs-string">      &#125;</span><span class="hljs-string">    &#125;</span><span class="hljs-string"></span><span class="hljs-string">    stage('快速回滚?') &#123;</span><span class="hljs-string">      withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG')]) &#123;</span><span class="hljs-string">        container('kubectl') &#123;</span><span class="hljs-string">          sh "</span><span class="hljs-string">mkdir</span> <span class="hljs-string">-p</span> <span class="hljs-string">~/.kube</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">cp</span> <span class="hljs-string">$&#123;KUBECONFIG&#125;</span> <span class="hljs-string">~/.kube/config"</span>          <span class="hljs-string">def</span> <span class="hljs-string">userInput</span> <span class="hljs-string">=</span> <span class="hljs-string">input(</span>            <span class="hljs-attr">id:</span> <span class="hljs-string">'userInput'</span><span class="hljs-string">,</span>            <span class="hljs-attr">message:</span> <span class="hljs-string">'是否需要快速回滚？'</span><span class="hljs-string">,</span>            <span class="hljs-attr">parameters:</span> <span class="hljs-string">[</span>              <span class="hljs-string">[</span>                <span class="hljs-string">$class:</span> <span class="hljs-string">'ChoiceParameterDefinition'</span><span class="hljs-string">,</span>                <span class="hljs-attr">choices:</span> <span class="hljs-string">"N\nY"</span><span class="hljs-string">,</span>                <span class="hljs-attr">name:</span> <span class="hljs-string">'回滚?'</span>              <span class="hljs-string">]</span>            <span class="hljs-string">]</span>          <span class="hljs-string">)</span>          <span class="hljs-string">if</span> <span class="hljs-string">(userInput</span> <span class="hljs-string">==</span> <span class="hljs-string">"Y"</span><span class="hljs-string">)</span> <span class="hljs-string">&#123;</span>            <span class="hljs-string">sh</span> <span class="hljs-string">"kubectl rollout undo deployment produce-deployment -n $&#123;NAMESPACE&#125;"</span>          <span class="hljs-string">&#125;</span>        <span class="hljs-string">&#125;</span>      <span class="hljs-string">&#125;</span>    <span class="hljs-string">&#125;</span>  <span class="hljs-string">&#125;</span><span class="hljs-string">&#125;</span></code></pre><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><blockquote><p>划重点<br>1.根据${COMMIT_ID}找出REVISION (<code>自动</code>)<br>2.根据commit_msg找出REVISION (<code>人工</code>)</p></blockquote><pre><code class="hljs bash">$ kubectl -n <span class="hljs-variable">$&#123;NAMESPACE&#125;</span> rollout <span class="hljs-built_in">history</span> deployment consume-deployment deployment.apps/consume-deployment REVISION  CHANGE-CAUSE1         a03d0eb optimize change-cause msg2         73f5a5c resource quota3         2772a88 resource quota up4         254b592 plus probe time5         87989d8 更新配置文件<span class="hljs-comment"># 1.根据$&#123;COMMIT_ID&#125;找出REVISION(自动) 2.根据commit_msg找出REVISION(人工)</span>$ kubectl -n <span class="hljs-variable">$&#123;NAMESPACE&#125;</span> rollout undo deployment consume-deployment --to-revision=$(kubectl -n <span class="hljs-variable">$&#123;NAMESPACE&#125;</span> rollout <span class="hljs-built_in">history</span> deployment consume-deployment | grep <span class="hljs-variable">$&#123;COMMIT_ID&#125;</span> | awk <span class="hljs-string">'&#123;print $1&#125;'</span>)$ kubectl -n <span class="hljs-variable">$&#123;NAMESPACE&#125;</span> rollout status deployment consume-deployment</code></pre><h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><ul><li><a href="https://www.jenkins.io/doc/book/pipeline/syntax/" target="_blank" rel="noopener">https://www.jenkins.io/doc/book/pipeline/syntax/</a></li><li><a href="https://www.jenkins.io/doc/pipeline/steps/workflow-multibranch/" target="_blank" rel="noopener">https://www.jenkins.io/doc/pipeline/steps/workflow-multibranch/</a></li><li><a href="https://github.com/jenkinsci/kubernetes-plugin/tree/master/examples/declarative_from_yaml_file" target="_blank" rel="noopener">https://github.com/jenkinsci/kubernetes-plugin/tree/master/examples/declarative_from_yaml_file</a></li><li><a href="https://plugins.jenkins.io/kubernetes/" target="_blank" rel="noopener">https://plugins.jenkins.io/kubernetes/</a></li><li><a href="http://blog.jboost.cn/k8s3-cd.html" target="_blank" rel="noopener">http://blog.jboost.cn/k8s3-cd.html</a></li><li><a href="https://plugins.jenkins.io/git-parameter/" target="_blank" rel="noopener">https://plugins.jenkins.io/git-parameter/</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>CICD</tag>
      
      <tag>Jenkins</tag>
      
      <tag>Pipeline</tag>
      
      <tag>Harbor</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>打破认知边界·融入未来世界</title>
    <link href="/2020/06/18/theai-train/"/>
    <url>/2020/06/18/theai-train/</url>
    
    <content type="html"><![CDATA[<p>《打破认知边界·融入未来世界》培训心得</p><h3 id="不管你接受不接受-人工智能都来了"><a href="#不管你接受不接受-人工智能都来了" class="headerlink" title="不管你接受不接受,人工智能都来了"></a>不管你接受不接受,人工智能都来了</h3><p>不管是从国家战略「新基建」主要包含5G基建、特高压、城际高速铁路和城际轨道交通、新能源汽车充电桩、大数据中心、人工智能、工业互联网等七大领域。人工智能屹立其中。<br>还是从你能”触摸”的人工智能：苹果公司的语音助手Siri；微软公司的人工智能助理Cortana(小娜)；小米科技打造的智能化语音助手小爱同学及其后续产品小爱音箱等一大批AI产品等。<br>最后到2016年，李世石与谷歌deepmind团队打造的AlphaGo对弈失败的直播震惊了世界，其后中国棋手柯洁同样惨败于AlphaGo的蒙特卡洛树算法之下。<br>这时方才知道，AI距离我们如此之近，AI的运用场景如此广泛。</p><a id="more"></a><p>AI在某一个方面战胜人类可能只是个时间早晚的问题<br>而在十几年前IBM的深蓝服务器和国际象棋大师卡斯帕罗夫对战时候，人们还是很惊愕，世界舆论哗然一片。<br>历史总是惊人相似，如果我们今天不努力、不反省、不学习，必然会被历史的车轮又一次碾碎。</p><h3 id="自省力"><a href="#自省力" class="headerlink" title="自省力"></a>自省力</h3><p>不能只满足我们引以为自豪的5G，更应该看到SpaceX推出的星链计划(Starlink)对世界格局的扭转<br>自卑之人，不敢反省<br>虚弱之人，逃避问题<br>自负之人，不屑于反省<br>自我之人，不懂得反省<br>好强之人，不愿反省</p><h3 id="学习力"><a href="#学习力" class="headerlink" title="学习力"></a>学习力</h3><p>未来企业和个人竞争力取决于学习力。 学习力=学习动力+学习毅力+学习能力=把知识转换化为智慧和知识资本=竞争力<br>学习动力是内在的驱动力，包括需要、情感和兴趣<br>学习毅力是学习意志，学习意志是驱使目标和克服困难的目标管理能力。<br>学习能力是感知力、记忆力、思维力、逻辑力、想象力等的总和，亦因此而形成对知识和信息的采集、存储、处理、决策、应用能力的基础性智力，是学习力的基础因素。<br>每天进步一盎司，摆脱功利和浮躁。<br>让学习无处不在，化于无形，溶于血液，变成习惯。<br>用心倾听世界和他人，并保持同理心和换位本能</p><p>所以“真正的敌人是我们自己” “凡是你排斥的，都是你应该学习的。”</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>你的心态才是你的真正主人。<br>你的最大的敌人往往是你自己。<br>你的思维往往决定你的高度。<br>你的心胸往往决定你的快（痛）感。<br>你的认知边界最终决定你的世界。</p>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Openconnect VPN</title>
    <link href="/2020/05/10/oc-vpn-connect/"/>
    <url>/2020/05/10/oc-vpn-connect/</url>
    
    <content type="html"><![CDATA[<p>2020年已注定是不平凡的一年<br>新冠肺炎疫情<br>科比逝世<br>……<br>疫情影响下各个公司启动远程办公，VPN成了必不可少的服务。</p><p><a href="http://www.infradead.org/openconnect/" target="_blank" rel="noopener">http://www.infradead.org/openconnect/</a><br>Openconnect server (ocserv) is an SSL VPN server for administrators who require elaborate user management and control. Openconnect server provides user management interfaces and back-ends necessary in enterprise environments, as well as security features, such as isolation of connected clients, features currently not available to any existing VPN servers.</p><a id="more"></a><h3 id="1-安装ocserv"><a href="#1-安装ocserv" class="headerlink" title="1. 安装ocserv"></a>1. 安装ocserv</h3><pre><code class="hljs bash"><span class="hljs-comment"># ocserv 已经在epel仓库中提供了，所以可以直接通过yum安装</span>yum install epel-releaseyum install ocserv</code></pre><h3 id="2-创建-CA"><a href="#2-创建-CA" class="headerlink" title="2. 创建 CA"></a>2. 创建 CA</h3><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /etc/ocservmkdir CA<span class="hljs-built_in">cd</span> CA<span class="hljs-comment">## Root CA</span>vim ca.tmplcn = <span class="hljs-string">"boer"</span> organization = <span class="hljs-string">"boer"</span> serial = 1 expiration_days = 3650ca signing_key cert_signing_key crl_signing_key<span class="hljs-comment"># Root CA 密钥</span>certtool --generate-privkey --outfile ca-key.pem<span class="hljs-comment"># 签发证书</span>certtool --generate-self-signed --load-privkey ca-key.pem --template ca.tmpl --outfile ca-cert.pem<span class="hljs-comment">## Server CA</span>vim server.tmpl<span class="hljs-comment">#cn 为服务器密码或者执行该服务器的域名</span>cn = <span class="hljs-string">"vpn.boer.xyz"</span> organization = <span class="hljs-string">"boer"</span> expiration_days = 3650signing_key encryption_keytls_www_server<span class="hljs-comment"># Server 密钥</span>certtool --generate-privkey --outfile server-key.pem<span class="hljs-comment"># 签发证书</span>certtool --generate-certificate --load-privkey server-key.pem --load-ca-certificate ca-cert.pem --load-ca-privkey ca-key.pem --template server.tmpl --outfile server-cert.pem<span class="hljs-comment"># 证书路径（上述步骤创建）：</span>/etc/ocserv/CA/ca-cert.pem /etc/ocserv/CA/server-cert.pem/etc/ocserv/CA/server-key.pem</code></pre><h3 id="3-配置文件"><a href="#3-配置文件" class="headerlink" title="3. 配置文件"></a>3. 配置文件</h3><pre><code class="hljs bash"><span class="hljs-comment"># 创建路由分组管理目录</span>mkdir -p /etc/ocserv/groupvim /etc/ocserv/ocserv.confauth = <span class="hljs-string">"plain[/etc/ocserv/ocpasswd]"</span>tcp-port = 443 <span class="hljs-comment"># *</span>run-as-user = ocservrun-as-group = ocservconfig-per-group = /etc/ocserv/group/ <span class="hljs-comment"># *</span>default-group-config = /etc/ocserv/group/Defaultdefault-select-group = Defaultauto-select-group = <span class="hljs-literal">false</span> socket-file = ocserv.sockchroot-dir = /var/lib/ocservisolate-workers = <span class="hljs-literal">true</span>max-clients = 50 <span class="hljs-comment"># *</span>max-same-clients = 2keepalive = 32400dpd = 90mobile-dpd = 1800switch-to-tcp-timeout = 25try-mtu-discovery = <span class="hljs-literal">true</span> <span class="hljs-comment"># false</span>server-cert = /etc/ocserv/CA/server-cert.pem <span class="hljs-comment"># *</span>server-key = /etc/ocserv/CA/server-key.pem <span class="hljs-comment"># *</span>ca-cert = /etc/ocserv/CA/ca-cert.pem <span class="hljs-comment"># *</span>cert-user-oid = 2.5.4.3 <span class="hljs-comment"># 0.9.2342.19200300.100.1.1</span>tls-priorities = <span class="hljs-string">"NORMAL:%SERVER_PRECEDENCE:%COMPAT:-VERS-SSL3.0"</span>auth-timeout = 240min-reauth-time = 300max-ban-score = 0ban-reset-time = 300cookie-timeout = 300deny-roaming = <span class="hljs-literal">false</span>rekey-time = 172800rekey-method = ssluse-occtl = <span class="hljs-literal">true</span>pid-file = /var/run/ocserv.piddevice = vpnspredictable-ips = <span class="hljs-literal">true</span>default-domain = boer.xyz <span class="hljs-comment"># *</span>ipv4-network = 192.168.5.0/24 <span class="hljs-comment"># *</span>dns = 192.168.5.1 <span class="hljs-comment"># * 自建dns服务</span>split-dns = *.boer.xyz <span class="hljs-comment"># *</span>ping-leases = <span class="hljs-literal">false</span>cisco-client-compat = <span class="hljs-literal">true</span>dtls-legacy = <span class="hljs-literal">true</span>user-profile = profile.xml<span class="hljs-comment"># 创建一个登陆用的用户名与密码</span>ocpasswd -c /etc/ocserv/ocpasswd boer</code></pre><h3 id="4-转发与安全配置"><a href="#4-转发与安全配置" class="headerlink" title="4. 转发与安全配置"></a>4. 转发与安全配置</h3><ul><li>network 192.169.5.0/24 为/etc/ocserv/ocserv.conf中的ipv4-network = 192.168.5.0/24 </li><li>ocserv WAN interface 为eth0</li></ul><h4 id="4-1-修改内核配置"><a href="#4-1-修改内核配置" class="headerlink" title="4.1 修改内核配置"></a>4.1 修改内核配置</h4><pre><code class="hljs bash">vim /etc/sysctl.conf<span class="hljs-comment"># Protect from IP Spoofing</span>net.ipv4.conf.all.rp_filter = 1net.ipv4.conf.default.rp_filter = 1<span class="hljs-comment"># Ignore ICMP broadcast requests</span>net.ipv4.icmp_echo_ignore_broadcasts = 1<span class="hljs-comment"># Protect from bad icmp error messages</span>net.ipv4.icmp_ignore_bogus_error_responses = 1<span class="hljs-comment"># Disable source packet routing</span>net.ipv4.conf.all.accept_source_route = 0net.ipv6.conf.all.accept_source_route = 0net.ipv4.conf.default.accept_source_route = 0net.ipv6.conf.default.accept_source_route = 0<span class="hljs-comment"># Turn on exec shield</span>kernel.exec-shield = 1kernel.randomize_va_space = 1<span class="hljs-comment"># Block SYN attacks</span>net.ipv4.tcp_syncookies = 1net.ipv4.tcp_max_syn_backlog = 2048net.ipv4.tcp_synack_retries = 2net.ipv4.tcp_syn_retries = 5<span class="hljs-comment"># Log Martians</span>net.ipv4.conf.all.log_martians = 1net.ipv4.icmp_ignore_bogus_error_responses = 1<span class="hljs-comment"># Ignore send redirects</span>net.ipv4.conf.all.send_redirects = 0net.ipv4.conf.default.send_redirects = 0<span class="hljs-comment"># Ignore ICMP redirects</span>net.ipv4.conf.all.accept_redirects = 0net.ipv6.conf.all.accept_redirects = 0net.ipv4.conf.default.accept_redirects = 0net.ipv6.conf.default.accept_redirects = 0net.ipv4.conf.all.secure_redirects = 0net.ipv4.conf.default.secure_redirects = 0net.ipv6.conf.all.accept_ra = 2net.ipv6.conf.eth0.accept_ra = 2net.ipv4.ip_forward = 1</code></pre><p>使之生效： sysctl -p</p><h4 id="4-2-IPtables"><a href="#4-2-IPtables" class="headerlink" title="4.2 IPtables"></a>4.2 IPtables</h4><pre><code class="hljs bash">systemctl stop firewalldsystemctl <span class="hljs-built_in">disable</span> firewalldyum install iptables systemcctl start iptablessystemcctl <span class="hljs-built_in">enable</span> iptables</code></pre><h4 id="4-3-IPtables配置"><a href="#4-3-IPtables配置" class="headerlink" title="4.3 IPtables配置"></a>4.3 IPtables配置</h4><pre><code class="hljs bash">vim /etc/sysconfig/iptables<span class="hljs-comment"># sample configuration for iptables service</span><span class="hljs-comment"># you can edit this manually or use system-config-firewall</span><span class="hljs-comment"># please do not ask us to add additional ports/services to this default configuration</span><span class="hljs-comment">#*filter</span><span class="hljs-comment">#:INPUT ACCEPT [0:0]</span><span class="hljs-comment">#:FORWARD ACCEPT [0:0]</span><span class="hljs-comment">#:OUTPUT ACCEPT [0:0]</span><span class="hljs-comment">#-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</span><span class="hljs-comment">#-A INPUT -p icmp -j ACCEPT</span><span class="hljs-comment">#-A INPUT -i lo -j ACCEPT</span><span class="hljs-comment">#-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT</span><span class="hljs-comment">#-A INPUT -j REJECT --reject-with icmp-host-prohibited</span><span class="hljs-comment">#-A FORWARD -j REJECT --reject-with icmp-host-prohibited</span><span class="hljs-comment">#COMMIT</span><span class="hljs-comment">#</span>*nat:INPUT ACCEPT [0:0]:PREROUTING ACCEPT [0:0]:OUTPUT ACCEPT [0:0]:POSTROUTING ACCEPT [0:0]<span class="hljs-comment"># Generic NAT for LAN Network 192.168.5.0/24</span>-A POSTROUTING -s 192.168.5.0/24 -o eth0 -j MASQUERADECOMMIT*mangle:PREROUTING ACCEPT [0:0]:INPUT ACCEPT [0:0]:FORWARD ACCEPT [0:0]:OUTPUT ACCEPT [0:0]:POSTROUTING ACCEPT [0:0]COMMIT*filter:INPUT ACCEPT [0:0]:FORWARD ACCEPT [0:0]:OUTPUT ACCEPT [0:0]<span class="hljs-comment"># START INPUT RULES</span><span class="hljs-comment"># Stateful Rule - INPUT</span>-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT<span class="hljs-comment"># ACCEPT traffic from Loopback interface</span>-A INPUT -i lo -j ACCEPT<span class="hljs-comment"># ACCEPT SSH from LAN</span>-A INPUT -p tcp -m tcp -i eth0 --dport 22 -j ACCEPT<span class="hljs-comment"># ACCEPT DHCP from LAN</span>-A INPUT -p udp -m udp -i eth1 --dport 67:68 -j ACCEPT<span class="hljs-comment"># ACCEPT Webmin from LAN (Optional, only for Webmin users)</span>-A INPUT -p tcp -m tcp -i eth0 --dport 10000 -j ACCEPT<span class="hljs-comment"># ACCEPT DNS UDP From LAN</span>-A INPUT -p udp -m udp -i eth0 --dport 53 -j ACCEPT<span class="hljs-comment"># ACCEPT DNS TCP From LAN</span>-A INPUT -p tcp -m tcp -i eth0 --dport 53 -j ACCEPT<span class="hljs-comment"># ACCEPT ping from LAN</span>-A INPUT -p icmp --icmp-type <span class="hljs-built_in">echo</span>-request -i eth1 -j ACCEPT<span class="hljs-comment"># ACCEPT OpenConnect TCP From WAN</span>-A INPUT -p tcp -m tcp -i eth0 --dport 443 -j ACCEPT<span class="hljs-comment"># ACCEPT OpenConnect UPD From WAN</span>-A INPUT -p udp -m udp -i eth0 --dport 443 -j ACCEPT<span class="hljs-comment"># DROP wan traffic</span>-A INPUT -i eth0 -j DROP<span class="hljs-comment"># LOG LAN</span>-A INPUT -i eth1 -j LOG --<span class="hljs-built_in">log</span>-prefix <span class="hljs-string">"IPTABLES-LOG-INPUT-LAN:"</span> --<span class="hljs-built_in">log</span>-level 4<span class="hljs-comment"># ACCEPT LAN traffic - Learning rule - Should be changed to DROP once custom rules are created.</span>-A INPUT -i eth1 -j ACCEPT<span class="hljs-comment"># LAST RULE - DROP all traffic</span>-A INPUT -j DROP<span class="hljs-comment"># END INPUT RULES</span><span class="hljs-comment"># START FORWARD RULES</span><span class="hljs-comment"># Stateful Rule - FORWARD</span>-A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT<span class="hljs-comment"># ACCEPT LAN to WAN</span>-A FORWARD -s 192.168.5.0/24 -j ACCEPT<span class="hljs-comment"># LOG Forwarded traffic</span>-A FORWARD -j LOG --<span class="hljs-built_in">log</span>-prefix <span class="hljs-string">"IPTABLES-LOG-FORWARD:"</span> --<span class="hljs-built_in">log</span>-level 4<span class="hljs-comment"># LAST RULE - ACCEPT all traffic - Should be changed to DROP once custom rules are created.</span>-A FORWARD -j ACCEPT<span class="hljs-comment"># END FORWARD RULES</span><span class="hljs-comment"># START OUTPUT RULES</span><span class="hljs-comment"># Stateful Rule - OUTPUT</span>-A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT<span class="hljs-comment"># LOG Outgoing traffic</span>-A OUTPUT -j LOG --<span class="hljs-built_in">log</span>-prefix <span class="hljs-string">"IPTABLES-LOG-OUTPUT:"</span> --<span class="hljs-built_in">log</span>-level 4<span class="hljs-comment"># LAST RULE - ACCEPT all traffic - Should be    changed to DROP once custom rules are created.</span>-A OUTPUT -j ACCEPT<span class="hljs-comment"># END OUTPUT RULES</span>COMMIT</code></pre><p>使之生效【重启机器后需要重新生效一下】<br>iptables-restore &lt; /etc/sysconfig/iptables</p><h3 id="5-ocserv-Oops"><a href="#5-ocserv-Oops" class="headerlink" title="5. ocserv Oops"></a>5. ocserv Oops</h3><pre><code class="hljs bash"><span class="hljs-comment"># 添加用户</span>ocpasswd -c /etc/ocserv/ocpasswd 【用户名】<span class="hljs-comment"># 添加用户至某个分组</span>ocpasswd -c /etc/ocserv/ocpasswd -g 【分组名称】 【用户名】<span class="hljs-comment"># 锁定用户</span>ocpasswd -c /etc/ocserv/ocpasswd -l 【用户名】<span class="hljs-comment"># 解锁用户</span>ocpasswd -c /etc/ocserv/ocpasswd -u 【用户名】<span class="hljs-comment"># 删除用户</span>ocpasswd -c /etc/ocserv/ocpasswd -d 【用户名】<span class="hljs-comment"># 查看当前状态:</span><span class="hljs-comment">## 查看当前服务运行状态:</span>occtl -n show status<span class="hljs-comment">## 查看当前在线用户详情:</span>occtl -n show users<span class="hljs-comment"># 踢掉当前在线用户:</span><span class="hljs-comment">## 通过用户名:</span>occtl disconnect user 【用户名】<span class="hljs-comment">## 通过id:</span>occtl disconnect id 【id号】</code></pre><h3 id="6-客户端"><a href="#6-客户端" class="headerlink" title="6. 客户端"></a>6. 客户端</h3><h4 id="6-1-Redhat系"><a href="#6-1-Redhat系" class="headerlink" title="6.1 Redhat系"></a>6.1 Redhat系</h4><pre><code class="hljs gml">https:<span class="hljs-comment">//copr.fedorainfracloud.org/coprs/dwmw2/openconnect/</span>yum install openconnectopenconnect --user=boer -b <span class="hljs-symbol">x</span>.<span class="hljs-symbol">x</span>.<span class="hljs-symbol">x</span>.<span class="hljs-symbol">x</span>:xyz</code></pre><h4 id="6-2-Windows-amp-MacOS"><a href="#6-2-Windows-amp-MacOS" class="headerlink" title="6.2 Windows &amp; MacOS"></a>6.2 Windows &amp; MacOS</h4><p><a href="https://github.com/openconnect/openconnect-gui" target="_blank" rel="noopener">https://github.com/openconnect/openconnect-gui</a></p><h4 id="6-3-Android"><a href="#6-3-Android" class="headerlink" title="6.3 Android"></a>6.3 Android</h4><p><a href="https://play.google.com/store/apps/details?id=com.github.digitalsoftwaresolutions.openconnect" target="_blank" rel="noopener">https://play.google.com/store/apps/details?id=com.github.digitalsoftwaresolutions.openconnect</a></p><hr><p>感谢我的同事zp</p>]]></content>
    
    
    <categories>
      
      <category>DevOps</category>
      
    </categories>
    
    
    <tags>
      
      <tag>boer</tag>
      
      <tag>DevOps</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes部署代码仓库Gitea</title>
    <link href="/2020/04/24/k8s-codeing-gitea/"/>
    <url>/2020/04/24/k8s-codeing-gitea/</url>
    
    <content type="html"><![CDATA[<p>Gitea 是一个开源社区驱动的<strong>轻量级</strong>代码托管解决方案</p><blockquote><p><a href="https://docs.gitea.io/zh-cn/comparison/" target="_blank" rel="noopener">https://docs.gitea.io/zh-cn/comparison/</a></p></blockquote><ul><li>支持活动时间线</li><li>支持 SSH 以及 HTTP/HTTPS 协议</li><li>支持 SMTP、LDAP 和反向代理的用户认证</li><li>支持反向代理子路径</li><li>支持用户、组织和仓库管理系统</li><li>支持添加和删除仓库协作者</li><li>支持仓库和组织级别 Web 钩子（包括 Slack 集成）</li><li>支持仓库 Git 钩子和部署密钥</li><li>支持仓库工单（Issue）、合并请求（Pull Request）以及 Wiki</li><li>支持迁移和镜像仓库以及它的 Wiki</li><li>支持在线编辑仓库文件和 Wiki</li><li>支持自定义源的 Gravatar 和 Federated Avatar</li><li>支持邮件服务</li><li>支持后台管理面板</li><li>支持 MySQL、PostgreSQL、SQLite3, MSSQL 和 TiDB（实验性支持） 数据库</li><li>支持多语言本地化（21 种语言）</li></ul><a id="more"></a><h3 id="Database"><a href="#Database" class="headerlink" title="Database"></a>Database</h3><h4 id="Fetch-MySQL-Helm-Charts"><a href="#Fetch-MySQL-Helm-Charts" class="headerlink" title="Fetch MySQL Helm Charts"></a>Fetch MySQL Helm Charts</h4><pre><code class="hljs bash">helm repo add stable https://mirror.azure.cn/kubernetes/chartshelm repo add incubator https://mirror.azure.cn/kubernetes/charts-incubator<span class="hljs-built_in">cd</span> ~/k8s/helm/chartshelm search mysql --version 1.6.4helm fetch stable/mysql --version 1.6.4tar -zxf mysql-1.6.4.tgz<span class="hljs-built_in">cd</span> mysql<span class="hljs-comment"># modify values.yaml 详见下文</span>helm install --name mysql -f values.yaml . --namespace devopshelm upgrade -f values.yaml mysql . --namespace devopshelm delete --purge mysql <span class="hljs-comment"># It's Dangerous</span></code></pre><h4 id="MySQL-Helm-values-yaml"><a href="#MySQL-Helm-values-yaml" class="headerlink" title="MySQL Helm values.yaml"></a>MySQL Helm values.yaml</h4><p>划重点</p><ol><li>创建gitea库、用户、密码</li><li>openebs动态持久卷storageClass</li><li>设置默认字符集initializationFiles</li><li>metallb service服务暴露<pre><code class="hljs yaml"><span class="hljs-attr">image:</span> <span class="hljs-string">"mysql"</span><span class="hljs-attr">imageTag:</span> <span class="hljs-string">"5.7.30"</span><span class="hljs-attr">strategy:</span>  <span class="hljs-attr">type:</span> <span class="hljs-string">Recreate</span><span class="hljs-attr">mysqlRootPassword:</span> <span class="hljs-string">Root@123</span><span class="hljs-attr">mysqlUser:</span> <span class="hljs-string">gitea</span><span class="hljs-attr">mysqlPassword:</span> <span class="hljs-string">Gitea@123</span><span class="hljs-attr">mysqlDatabase:</span> <span class="hljs-string">gitea</span><span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><span class="hljs-attr">persistence:</span>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment">## database data Persistent Volume Storage Class</span>  <span class="hljs-comment">## If defined, storageClassName: &lt;storageClass&gt;</span>  <span class="hljs-comment">## If set to "-", storageClassName: "", which disables dynamic provisioning</span>  <span class="hljs-comment">## If undefined (the default) or set to null, no storageClassName spec is</span>  <span class="hljs-comment">##   set, choosing the default provisioner.  (gp2 on AWS, standard on</span>  <span class="hljs-comment">##   GKE, AWS &amp; OpenStack)</span>  <span class="hljs-comment">##</span>  <span class="hljs-comment"># storageClass: "-"</span>  <span class="hljs-attr">storageClass:</span> <span class="hljs-string">"openebs-hostpath"</span>  <span class="hljs-attr">accessMode:</span> <span class="hljs-string">ReadWriteOnce</span>  <span class="hljs-attr">size:</span> <span class="hljs-string">10Gi</span>  <span class="hljs-attr">annotations:</span> <span class="hljs-string">&#123;&#125;</span><span class="hljs-attr">securityContext:</span>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span>  <span class="hljs-attr">runAsUser:</span> <span class="hljs-number">999</span>  <span class="hljs-attr">fsGroup:</span> <span class="hljs-number">999</span><span class="hljs-attr">resources:</span>  <span class="hljs-attr">requests:</span>    <span class="hljs-attr">memory:</span> <span class="hljs-string">256Mi</span>    <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><span class="hljs-attr">configurationFilesPath:</span> <span class="hljs-string">/etc/mysql/conf.d/</span><span class="hljs-attr">configurationFiles:</span> <span class="hljs-string">&#123;&#125;</span><span class="hljs-attr">initializationFiles:</span>  <span class="hljs-attr">first-db.sql:</span> <span class="hljs-string">|-</span>    <span class="hljs-string">CREATE</span> <span class="hljs-string">DATABASE</span> <span class="hljs-string">IF</span> <span class="hljs-string">NOT</span> <span class="hljs-string">EXISTS</span> <span class="hljs-string">first</span> <span class="hljs-string">DEFAULT</span> <span class="hljs-string">CHARACTER</span> <span class="hljs-string">SET</span> <span class="hljs-string">utf8</span> <span class="hljs-string">DEFAULT</span> <span class="hljs-string">COLLATE</span> <span class="hljs-string">utf8_general_ci;</span><span class="hljs-attr">metrics:</span>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span>  <span class="hljs-attr">image:</span> <span class="hljs-string">prom/mysqld-exporter</span>  <span class="hljs-attr">imageTag:</span> <span class="hljs-string">v0.10.0</span>  <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span>  <span class="hljs-attr">resources:</span> <span class="hljs-string">&#123;&#125;</span>  <span class="hljs-attr">annotations:</span> <span class="hljs-string">&#123;&#125;</span>    <span class="hljs-comment"># prometheus.io/scrape: "true"</span>    <span class="hljs-comment"># prometheus.io/port: "9104"</span>  <span class="hljs-attr">livenessProbe:</span>    <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">15</span>    <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">5</span>  <span class="hljs-attr">readinessProbe:</span>    <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">5</span>    <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">1</span>  <span class="hljs-attr">flags:</span> <span class="hljs-string">[]</span>  <span class="hljs-attr">serviceMonitor:</span>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span>    <span class="hljs-attr">additionalLabels:</span> <span class="hljs-string">&#123;&#125;</span><span class="hljs-attr">service:</span>  <span class="hljs-comment"># annotations: &#123;&#125;</span>  <span class="hljs-attr">annotations:</span>    <span class="hljs-attr">metallb.universe.tf/address-pool:</span> <span class="hljs-string">default</span>  <span class="hljs-comment">## Specify a service type</span>  <span class="hljs-comment">## ref: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services---service-types</span>  <span class="hljs-attr">type:</span> <span class="hljs-string">LoadBalancer</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">3306</span>  <span class="hljs-comment"># nodePort: 32000</span>  <span class="hljs-comment"># loadBalancerIP:</span></code></pre></li></ol><h3 id="Gitea"><a href="#Gitea" class="headerlink" title="Gitea"></a>Gitea</h3><p>划重点</p><ol><li>openebs动态持久卷storageClass</li><li>metallb service暴露ssh端口</li><li>ingress service暴露http端口<pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><span class="hljs-attr">metadata:</span>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">devops</span>  <span class="hljs-attr">name:</span> <span class="hljs-string">gitea-deployment</span>  <span class="hljs-attr">labels:</span>    <span class="hljs-attr">app:</span> <span class="hljs-string">gitea</span><span class="hljs-attr">spec:</span>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span>  <span class="hljs-attr">selector:</span>    <span class="hljs-attr">matchLabels:</span>      <span class="hljs-attr">app:</span> <span class="hljs-string">gitea</span>  <span class="hljs-attr">template:</span>    <span class="hljs-attr">metadata:</span>      <span class="hljs-attr">labels:</span>        <span class="hljs-attr">app:</span> <span class="hljs-string">gitea</span>    <span class="hljs-attr">spec:</span>      <span class="hljs-attr">containers:</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">gitea</span>        <span class="hljs-attr">image:</span> <span class="hljs-string">gitea/gitea:1.12.2</span>        <span class="hljs-attr">ports:</span>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">3000</span>          <span class="hljs-attr">name:</span> <span class="hljs-string">gitea-http</span>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">22</span>          <span class="hljs-attr">name:</span> <span class="hljs-string">gitea-ssh</span>        <span class="hljs-attr">volumeMounts:</span>        <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/data</span>          <span class="hljs-attr">name:</span> <span class="hljs-string">gitea-data</span>      <span class="hljs-attr">volumes:</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">gitea-data</span>        <span class="hljs-attr">persistentVolumeClaim:</span>          <span class="hljs-attr">claimName:</span> <span class="hljs-string">gitea-pvc</span><span class="hljs-meta">---</span><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolumeClaim</span><span class="hljs-attr">metadata:</span>  <span class="hljs-attr">name:</span> <span class="hljs-string">gitea-pvc</span>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">devops</span><span class="hljs-attr">spec:</span>  <span class="hljs-attr">storageClassName:</span> <span class="hljs-string">openebs-hostpath</span>  <span class="hljs-attr">accessModes:</span>    <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteOnce</span>  <span class="hljs-attr">resources:</span>    <span class="hljs-attr">requests:</span>      <span class="hljs-attr">storage:</span> <span class="hljs-string">5Gi</span><span class="hljs-meta">---</span><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><span class="hljs-attr">metadata:</span>  <span class="hljs-attr">name:</span> <span class="hljs-string">gitea-service</span>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">devops</span>  <span class="hljs-attr">annotations:</span>    <span class="hljs-attr">metallb.universe.tf/address-pool:</span> <span class="hljs-string">default</span><span class="hljs-attr">spec:</span>  <span class="hljs-attr">selector:</span>    <span class="hljs-attr">app:</span> <span class="hljs-string">gitea</span>  <span class="hljs-attr">type:</span> <span class="hljs-string">LoadBalancer</span>  <span class="hljs-attr">ports:</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">gitea-http</span>    <span class="hljs-attr">port:</span> <span class="hljs-number">3000</span>    <span class="hljs-attr">targetPort:</span> <span class="hljs-string">gitea-http</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">gitea-ssh</span>    <span class="hljs-attr">port:</span> <span class="hljs-number">22</span>    <span class="hljs-attr">targetPort:</span> <span class="hljs-string">gitea-ssh</span><span class="hljs-meta">---</span><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.k8s.io/v1beta1</span><span class="hljs-attr">kind:</span> <span class="hljs-string">Ingress</span><span class="hljs-attr">metadata:</span>  <span class="hljs-attr">name:</span> <span class="hljs-string">gitea-ingress</span>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">devops</span>  <span class="hljs-attr">annotations:</span>    <span class="hljs-attr">nginx.ingress.kubernetes.io/rewrite-target:</span> <span class="hljs-string">/</span>    <span class="hljs-attr">nginx.ingress.kubernetes.io/load-balance:</span> <span class="hljs-string">"ip_hash"</span>    <span class="hljs-attr">nginx.ingress.kubernetes.io/upstream-hash-by:</span> <span class="hljs-string">"$request_uri"</span><span class="hljs-attr">spec:</span>  <span class="hljs-attr">rules:</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">host:</span> <span class="hljs-string">gitea.boer.xyz</span>    <span class="hljs-attr">http:</span>      <span class="hljs-attr">paths:</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/</span>        <span class="hljs-attr">backend:</span>          <span class="hljs-attr">serviceName:</span> <span class="hljs-string">gitea-service</span>          <span class="hljs-attr">servicePort:</span> <span class="hljs-number">3000</span></code></pre></li></ol><h3 id="Gitea按照引导"><a href="#Gitea按照引导" class="headerlink" title="Gitea按照引导"></a>Gitea按照引导</h3><p><img src="/img/gitea_installer.png" srcset="/img/loading.gif" alt="gitea_installer"></p><ul><li>数据库类型：MySQL</li><li>数据库主机：mysql service-name:3306</li><li>用户/密码/数据库： gitea</li><li>http域名：gitea.boer.xyz (ingress域名)</li><li>ssh通过域名：gitea.boer.xyz (与ingress域名一致)</li><li>最下面创建管理员账号（如果未创建，则第一个注册账号为管理员）</li></ul><hr><blockquote><p>添加SSHKey，开始使用吧！</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Devops</tag>
      
      <tag>Gogs</tag>
      
      <tag>Gitea</tag>
      
      <tag>Gitlab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes日志系统EFK</title>
    <link href="/2019/10/24/k8s-logging-efk/"/>
    <url>/2019/10/24/k8s-logging-efk/</url>
    
    <content type="html"><![CDATA[<p>Elasticsearch + Filebeat + Kibana = EFK<br>F: it’s not Fluentd</p><blockquote><p>Fluentd需要学习配置语法, Filebeat相对熟悉</p></blockquote><p><a href="https://github.com/elastic/helm-charts" target="_blank" rel="noopener">https://github.com/elastic/helm-charts</a></p><a id="more"></a><h3 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h3><ul><li>Helm &gt;=2.8.0 and &lt;3.0.0</li><li>Kubernetes &gt;=1.8</li><li>3 Work-node</li><li>1GB of RAM for the JVM heap</li></ul><h3 id="Helm-Charts"><a href="#Helm-Charts" class="headerlink" title="Helm Charts"></a>Helm Charts</h3><pre><code class="hljs bash">helm repo add elastic https://helm.elastic.cohelm repo update<span class="hljs-built_in">cd</span> ~/k8s/helm/chartshelm search elasticsearch --version 7.6.2helm search filebeat --version 7.6.2helm search kibana --version 7.6.2helm fetch elastic/elasticsearch --version 7.6.2helm fetch elastic/filebeat --version 7.6.2helm fetch elastic/kibana --version 7.6.2tar -zxf elasticsearch-7.6.2.tgztar -zxf filebeat-7.6.2.tgztar -zxf kibana-7.6.2.tgz<span class="hljs-comment"># 安装</span>helm install --name elasticsearch -f values.yaml . --namespace logginghelm install --name filebeat -f values.yaml . --namespace logginghelm install --name kibana -f values.yaml . --namespace logging<span class="hljs-comment"># 更新</span>helm upgrade -f values.yaml elasticsearch . --namespace logginghelm upgrade -f values.yaml filebeat . --namespace logginghelm upgrade -f values.yaml kibana . --namespace logging<span class="hljs-comment"># 删除</span>helm delete --purge elasticsearchhelm delete --purge filebeathelm delete --purge kibana<span class="hljs-comment"># 删除es-pvc *仅测试</span>kubectl -n logging delete pvc -l app=elasticsearch-logging</code></pre><h3 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h3><h4 id="创建CA证书"><a href="#创建CA证书" class="headerlink" title="创建CA证书"></a>创建CA证书</h4><pre><code class="hljs bash">curl -LO https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.6.2-linux-x86_64.tar.gztar -zxf elasticsearch-7.6.2-linux-x86_64.tar.gz<span class="hljs-built_in">cd</span> elasticsearch-7.6.2<span class="hljs-comment"># 生成RootCA</span>bin/elasticsearch-certutil ca --days 36500 <span class="hljs-comment"># elastic-stack-ca.p12</span><span class="hljs-comment"># 签发证书</span>bin/elasticsearch-certutil cert --ca elastic-stack-ca.p12 --days 36500 <span class="hljs-comment"># elastic-certificates.p12</span><span class="hljs-comment"># 转换证书、验证有效期</span>openssl pkcs12 -<span class="hljs-keyword">in</span> elastic-certificates.p12 -out elastic-certificates.pem -nodesopenssl x509 -<span class="hljs-keyword">in</span> elastic-certificates.pem -noout -dates<span class="hljs-comment"># CA secret</span>kubectl -n logging create secret generic elastic-certificates --from-file=elastic-certificates.p12<span class="hljs-comment"># 挂载secret</span><span class="hljs-comment">## 详见下面values.yaml</span>secretMounts:  - name: elastic-certificates    secretName: elastic-certificates    path: /usr/share/elasticsearch/config/certs<span class="hljs-comment"># 使用CA</span><span class="hljs-comment">## 详见下面values.yaml</span>xpack.security.enabled: <span class="hljs-literal">true</span>xpack.security.transport.ssl.enabled: <span class="hljs-literal">true</span>xpack.security.transport.ssl.verification_mode: certificate xpack.security.transport.ssl.keystore.path: certs/elastic-certificates.p12 xpack.security.transport.ssl.truststore.path: certs/elastic-certificates.p12</code></pre><h4 id="Elasticsearch-Helm-Values配置"><a href="#Elasticsearch-Helm-Values配置" class="headerlink" title="Elasticsearch Helm Values配置"></a>Elasticsearch Helm Values配置</h4><pre><code class="hljs yaml"><span class="hljs-comment"># vim values.yaml</span><span class="hljs-attr">clusterName:</span> <span class="hljs-string">"elasticsearch"</span><span class="hljs-attr">nodeGroup:</span> <span class="hljs-string">"logging"</span><span class="hljs-comment"># The service that non master groups will try to connect to when joining the cluster</span><span class="hljs-comment"># This should be set to clusterName + "-" + nodeGroup for your master group</span><span class="hljs-attr">masterService:</span> <span class="hljs-string">"elasticsearch-logging"</span><span class="hljs-attr">esConfig:</span>  <span class="hljs-attr">elasticsearch.yml:</span> <span class="hljs-string">|</span>    <span class="hljs-attr">xpack.security.enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 开启xpack.security, 所以需要下面ssl证书, 所以需要下面extraEnvs</span>    <span class="hljs-attr">xpack.security.transport.ssl.enabled:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">xpack.security.transport.ssl.verification_mode:</span> <span class="hljs-string">certificate</span>    <span class="hljs-attr">xpack.security.transport.ssl.keystore.path:</span> <span class="hljs-string">certs/elastic-certificates.p12</span>    <span class="hljs-attr">xpack.security.transport.ssl.truststore.path:</span> <span class="hljs-string">certs/elastic-certificates.p12</span>    <span class="hljs-attr">xpack.monitoring.enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 开启xpack.monitoring监控</span>    <span class="hljs-attr">xpack.monitoring.collection.enabled:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">xpack.monitoring.exporters.my_local:</span> <span class="hljs-comment"># 监控数据export当前集群。用自己监控自己, not最佳实践</span>      <span class="hljs-attr">type:</span> <span class="hljs-string">local</span>      <span class="hljs-attr">use_ingest:</span> <span class="hljs-literal">false</span><span class="hljs-attr">extraEnvs:</span> <span class="hljs-comment"># 不安全。应该使用secrets存储密码 @TODO</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">ELASTIC_USERNAME</span>    <span class="hljs-attr">value:</span> <span class="hljs-string">"elastic"</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">ELASTIC_PASSWORD</span>    <span class="hljs-attr">value:</span> <span class="hljs-string">"123456"</span><span class="hljs-attr">secretMounts:</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">elastic-certificates</span>    <span class="hljs-attr">secretName:</span> <span class="hljs-string">elastic-certificates</span>    <span class="hljs-attr">path:</span> <span class="hljs-string">/usr/share/elasticsearch/config/certs</span><span class="hljs-attr">esJavaOpts:</span> <span class="hljs-string">"-Xmx1g -Xms1g"</span> <span class="hljs-comment"># es heapsize</span><span class="hljs-attr">resources:</span>  <span class="hljs-attr">requests:</span>    <span class="hljs-attr">cpu:</span> <span class="hljs-string">"1000m"</span>    <span class="hljs-attr">memory:</span> <span class="hljs-string">"2Gi"</span>  <span class="hljs-attr">limits:</span>    <span class="hljs-attr">cpu:</span> <span class="hljs-string">"1000m"</span>    <span class="hljs-attr">memory:</span> <span class="hljs-string">"2Gi"</span><span class="hljs-attr">volumeClaimTemplate:</span>  <span class="hljs-attr">accessModes:</span> <span class="hljs-string">[</span> <span class="hljs-string">"ReadWriteOnce"</span> <span class="hljs-string">]</span>  <span class="hljs-attr">storageClassName:</span> <span class="hljs-string">"openebs-hostpath"</span> <span class="hljs-comment"># StorageClass # 建议LocalPV 性能好</span>  <span class="hljs-attr">resources:</span>    <span class="hljs-attr">requests:</span>      <span class="hljs-attr">storage:</span> <span class="hljs-string">200Gi</span><span class="hljs-attr">clusterHealthCheckParams:</span> <span class="hljs-string">"wait_for_status=green&amp;timeout=3s"</span> <span class="hljs-comment"># readinessProbe</span><span class="hljs-attr">ingress:</span> <span class="hljs-comment"># 是否Ingress暴露</span>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">annotations:</span>    <span class="hljs-attr">kubernetes.io/ingress.class:</span> <span class="hljs-string">nginx</span>  <span class="hljs-attr">path:</span> <span class="hljs-string">/</span>  <span class="hljs-attr">hosts:</span>    <span class="hljs-bullet">-</span> <span class="hljs-string">elasticsearch.boer.xyz</span></code></pre><h3 id="Filebeat"><a href="#Filebeat" class="headerlink" title="Filebeat"></a>Filebeat</h3><h4 id="Filebeat-Helm-Values配置"><a href="#Filebeat-Helm-Values配置" class="headerlink" title="Filebeat Helm Values配置"></a>Filebeat Helm Values配置</h4><pre><code class="hljs yaml"><span class="hljs-meta">---</span><span class="hljs-attr">filebeatConfig:</span>  <span class="hljs-attr">filebeat.yml:</span> <span class="hljs-string">|</span>    <span class="hljs-attr">filebeat.inputs:</span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">docker</span>      <span class="hljs-attr">containers.ids:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">'*'</span>    <span class="hljs-attr">processors:</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">add_kubernetes_metadata:</span> <span class="hljs-string">~</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">drop_fields:</span> <span class="hljs-comment"># drop掉不需要的字段</span>          <span class="hljs-attr">fields:</span> <span class="hljs-string">["ecs",</span> <span class="hljs-string">"log"</span><span class="hljs-string">,</span> <span class="hljs-string">"input"</span><span class="hljs-string">,</span> <span class="hljs-string">"agent"</span><span class="hljs-string">]</span> <span class="hljs-comment"># 缩进很重要</span>          <span class="hljs-attr">ignore_missing:</span> <span class="hljs-literal">false</span>        <span class="hljs-attr">setup.template.name:</span> <span class="hljs-string">"kube-logging-template"</span>    <span class="hljs-attr">setup.template.pattern:</span> <span class="hljs-string">"kube-logging*"</span>    <span class="hljs-attr">setup.ilm.enabled:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># fix输出到filebeat-&lt;version&gt; &#123;now/d&#125;-000001, BUG?</span>    <span class="hljs-attr">output.elasticsearch:</span>      <span class="hljs-attr">host:</span> <span class="hljs-string">'$&#123;NODE_NAME&#125;'</span>      <span class="hljs-attr">hosts:</span> <span class="hljs-string">'$&#123;ELASTICSEARCH_HOSTS:elasticsearch-logging:9200&#125;'</span> <span class="hljs-comment"># es-svc:9200</span>      <span class="hljs-attr">index:</span> <span class="hljs-string">"kube-logging"</span> <span class="hljs-comment"># iLM管理的alias</span>      <span class="hljs-comment"># index: "kube-logging-%&#123;+yyyy.MM.dd&#125;"</span>      <span class="hljs-attr">username:</span> <span class="hljs-string">"elastic"</span>      <span class="hljs-attr">password:</span> <span class="hljs-string">"123456"</span></code></pre><h3 id="Kibana"><a href="#Kibana" class="headerlink" title="Kibana"></a>Kibana</h3><h4 id="Kibana-Helm-Values配置"><a href="#Kibana-Helm-Values配置" class="headerlink" title="Kibana Helm Values配置"></a>Kibana Helm Values配置</h4><pre><code class="hljs yaml"><span class="hljs-attr">elasticsearchHosts:</span> <span class="hljs-string">"http://elasticsearch-logging:9200"</span><span class="hljs-attr">extraEnvs:</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">"NODE_OPTIONS"</span>    <span class="hljs-attr">value:</span> <span class="hljs-string">"--max-old-space-size=1800"</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">ELASTICSEARCH_USERNAME</span>    <span class="hljs-attr">value:</span> <span class="hljs-string">"elastic"</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">ELASTICSEARCH_PASSWORD</span>    <span class="hljs-attr">value:</span> <span class="hljs-string">"123456"</span><span class="hljs-attr">healthCheckPath:</span> <span class="hljs-string">"/app/kibana"</span><span class="hljs-comment"># healthCheckPath: "/api/status" # readinessProbe搞死你</span><span class="hljs-attr">kibanaConfig:</span> <span class="hljs-comment"># exec进pod发现默认配置文件错误</span>  <span class="hljs-attr">kibana.yml:</span> <span class="hljs-string">|</span>    <span class="hljs-attr">elasticsearch:</span>      <span class="hljs-attr">hosts:</span> <span class="hljs-string">[</span> <span class="hljs-string">"http://elasticsearch-logging:9200"</span> <span class="hljs-string">]</span>      <span class="hljs-attr">username:</span> <span class="hljs-string">"elastic"</span>      <span class="hljs-attr">password:</span> <span class="hljs-string">"123456"</span><span class="hljs-attr">ingress:</span>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">annotations:</span>    <span class="hljs-attr">kubernetes.io/ingress.class:</span> <span class="hljs-string">nginx</span>    <span class="hljs-comment"># kubernetes.io/tls-acme: "true"</span>  <span class="hljs-attr">path:</span> <span class="hljs-string">/</span>  <span class="hljs-attr">hosts:</span>    <span class="hljs-bullet">-</span> <span class="hljs-string">logging.boer.xyz</span>  <span class="hljs-attr">tls:</span> <span class="hljs-string">[]</span></code></pre><h4 id="Kibana-Pod-readinessProbe"><a href="#Kibana-Pod-readinessProbe" class="headerlink" title="Kibana Pod readinessProbe"></a>Kibana Pod readinessProbe</h4><pre><code class="hljs bash"><span class="hljs-function"><span class="hljs-title">http</span></span> () &#123;    <span class="hljs-built_in">local</span> path=<span class="hljs-string">"<span class="hljs-variable">$&#123;1&#125;</span>"</span>    <span class="hljs-built_in">set</span> -- -XGET -s --fail    <span class="hljs-keyword">if</span> [ -n <span class="hljs-string">"<span class="hljs-variable">$&#123;ELASTICSEARCH_USERNAME&#125;</span>"</span> ] &amp;&amp; [ -n <span class="hljs-string">"<span class="hljs-variable">$&#123;ELASTICSEARCH_PASSWORD&#125;</span>"</span> ]; <span class="hljs-keyword">then</span>    <span class="hljs-built_in">set</span> -- <span class="hljs-string">"<span class="hljs-variable">$@</span>"</span> -u <span class="hljs-string">"<span class="hljs-variable">$&#123;ELASTICSEARCH_USERNAME&#125;</span>:<span class="hljs-variable">$&#123;ELASTICSEARCH_PASSWORD&#125;</span>"</span>    <span class="hljs-keyword">fi</span>    STATUS=$(curl --output /dev/null --write-out <span class="hljs-string">"%&#123;http_code&#125;"</span> -k <span class="hljs-string">"<span class="hljs-variable">$@</span>"</span> <span class="hljs-string">"http://localhost:5601<span class="hljs-variable">$&#123;path&#125;</span>"</span>)    <span class="hljs-keyword">if</span> [[ <span class="hljs-string">"<span class="hljs-variable">$&#123;STATUS&#125;</span>"</span> -eq 200 ]]; <span class="hljs-keyword">then</span>    <span class="hljs-built_in">exit</span> 0    <span class="hljs-keyword">fi</span>    <span class="hljs-built_in">echo</span> <span class="hljs-string">"Error: Got HTTP code <span class="hljs-variable">$&#123;STATUS&#125;</span> but expected a 200"</span>    <span class="hljs-built_in">exit</span> 1&#125;<span class="hljs-comment"># 解析后的命令</span>curl -XGET -s --fail --output /dev/null --write-out <span class="hljs-string">"%&#123;http_code&#125;"</span> -k -u elastic:123456 http://localhost:5601/app/kibana<span class="hljs-comment"># exec进pod curl一下</span><span class="hljs-comment"># ready否，请10min再下结论 ***</span></code></pre><h3 id="iLM管理索引生命周期"><a href="#iLM管理索引生命周期" class="headerlink" title="iLM管理索引生命周期"></a>iLM管理索引生命周期</h3><pre><code class="hljs bash">GET _cluster/healthGET _cat/indices<span class="hljs-comment"># iLM策略, 50gb/1d切割, 2d: forcemerge, 5d: freeze, 10d: 删除</span>PUT _ilm/policy/kube-logging-policy   &#123;  <span class="hljs-string">"policy"</span>: &#123;                           <span class="hljs-string">"phases"</span>: &#123;      <span class="hljs-string">"hot"</span>: &#123;                              <span class="hljs-string">"actions"</span>: &#123;          <span class="hljs-string">"rollover"</span>: &#123;            <span class="hljs-string">"max_size"</span>: <span class="hljs-string">"50gb"</span>,            <span class="hljs-string">"max_age"</span>: <span class="hljs-string">"1d"</span>            <span class="hljs-comment"># "max_docs": 6000</span>          &#125;        &#125;      &#125;,      <span class="hljs-string">"warm"</span>: &#123;        <span class="hljs-string">"min_age"</span>: <span class="hljs-string">"2d"</span>,        <span class="hljs-string">"actions"</span>: &#123;          <span class="hljs-string">"forcemerge"</span>: &#123;            <span class="hljs-string">"max_num_segments"</span>: 1          &#125;        &#125;      &#125;,      <span class="hljs-string">"cold"</span>: &#123;        <span class="hljs-string">"min_age"</span>: <span class="hljs-string">"5d"</span>,        <span class="hljs-string">"actions"</span>: &#123;          <span class="hljs-string">"freeze"</span>: &#123;&#125;        &#125;      &#125;,      <span class="hljs-string">"delete"</span>: &#123;        <span class="hljs-string">"min_age"</span>: <span class="hljs-string">"10d"</span>,                   <span class="hljs-string">"actions"</span>: &#123;          <span class="hljs-string">"delete"</span>: &#123;&#125;                      &#125;      &#125;    &#125;  &#125;&#125;<span class="hljs-comment"># 创建索引模板</span>PUT _template/kube-logging-template&#123;  <span class="hljs-string">"index_patterns"</span>: [<span class="hljs-string">"kube-logging*"</span>],   <span class="hljs-string">"settings"</span>: &#123;    <span class="hljs-string">"number_of_shards"</span>: 3,    <span class="hljs-string">"number_of_replicas"</span>: 1,    <span class="hljs-string">"index.lifecycle.name"</span>: <span class="hljs-string">"kube-logging-policy"</span>,     <span class="hljs-string">"index.lifecycle.rollover_alias"</span>: <span class="hljs-string">"kube-logging"</span>,    <span class="hljs-string">"index.refresh_interval"</span>: <span class="hljs-string">"30s"</span>,    <span class="hljs-string">"index.translog.durability"</span>: <span class="hljs-string">"async"</span>,    <span class="hljs-string">"index.translog.sync_interval"</span>:<span class="hljs-string">"30s"</span>  &#125;&#125;<span class="hljs-comment"># 创建第一个关联索引</span>PUT %3Ckube-logging-%7Bnow%2Fd%7D-000001%3E&#123;  <span class="hljs-string">"aliases"</span>: &#123;    <span class="hljs-string">"kube-logging"</span>: &#123;&#125;  &#125;&#125;GET kube-logging-2020.07.09-000001/_search<span class="hljs-comment"># iLM生效时间</span>PUT _cluster/settings&#123;  <span class="hljs-string">"persistent"</span>: &#123;    <span class="hljs-string">"indices.lifecycle.poll_interval"</span>: <span class="hljs-string">"30s"</span>  &#125;&#125;GET _ilm/statusPOST _ilm/start</code></pre><h3 id="ES进阶配置"><a href="#ES进阶配置" class="headerlink" title="ES进阶配置"></a>ES进阶配置</h3><pre><code class="hljs bash"><span class="hljs-comment"># 单机多节点部署避免主副分片被分配到同一物理机</span>cluster.routing.allocation.same_shard.host: <span class="hljs-literal">true</span>cluster.routing.allocation.awareness.attributes: box_typeindex.routing.allocation.require.box_type: hot <span class="hljs-comment"># 冷热分离</span>index.routing.allocation.total_shards_per_node: 1</code></pre><h3 id="Filebeat配置"><a href="#Filebeat配置" class="headerlink" title="Filebeat配置"></a>Filebeat配置</h3><pre><code class="hljs yaml"><span class="hljs-attr">filebeat.inputs:</span><span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">log</span>  <span class="hljs-attr">paths:</span>     <span class="hljs-bullet">-</span> <span class="hljs-string">/home/apps/Logs/*.boer.lo/*.log</span>  <span class="hljs-attr">fields:</span> <span class="hljs-string">&#123;ip:</span> <span class="hljs-string">ipv4address,</span> <span class="hljs-attr">log_type:</span> <span class="hljs-string">apps&#125;</span>  <span class="hljs-attr">fields_under_root:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">multiline.match:</span> <span class="hljs-string">after</span>  <span class="hljs-attr">multiline.negate:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">multiline.pattern:</span> <span class="hljs-string">^[0-9]&#123;4&#125;-[0-9]&#123;2&#125;-[0-9]&#123;2&#125;</span>  <span class="hljs-attr">tail_files:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">symlinks:</span> <span class="hljs-literal">true</span><span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">log</span>  <span class="hljs-attr">paths:</span> <span class="hljs-string">[/home/apps/Logs/nginx/*.log]</span>  <span class="hljs-attr">fields:</span> <span class="hljs-string">&#123;ip:</span> <span class="hljs-string">ipv4address,</span> <span class="hljs-attr">log_type:</span> <span class="hljs-string">elb&#125;</span>  <span class="hljs-attr">fields_under_root:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">tail_files:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">symlinks:</span> <span class="hljs-literal">true</span><span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">log</span>  <span class="hljs-attr">paths:</span> <span class="hljs-string">[/var/log/messages,</span> <span class="hljs-string">/var/log/secure,</span> <span class="hljs-string">/var/log/cron,</span> <span class="hljs-string">/var/log/spooler,</span> <span class="hljs-string">/var/log/audit/audit.log]</span>  <span class="hljs-attr">fields:</span> <span class="hljs-string">&#123;ip:</span> <span class="hljs-string">ipv4address,</span> <span class="hljs-attr">log_type:</span> <span class="hljs-string">syslog&#125;</span>  <span class="hljs-attr">fields_under_root:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">tail_files:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">symlinks:</span> <span class="hljs-literal">true</span><span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">log</span>  <span class="hljs-attr">paths:</span> <span class="hljs-string">[/home/apps/Logs/*.boer.lo/monitor/*.log]</span>  <span class="hljs-attr">fields:</span> <span class="hljs-string">&#123;ip:</span> <span class="hljs-string">ipv4address,</span> <span class="hljs-attr">log_type:</span> <span class="hljs-string">monitor&#125;</span>  <span class="hljs-attr">fields_under_root:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">tail_files:</span> <span class="hljs-literal">true</span>   <span class="hljs-attr">symlinks:</span> <span class="hljs-literal">true</span><span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">log</span>  <span class="hljs-attr">paths:</span>    <span class="hljs-bullet">-</span> <span class="hljs-string">"/home/apps/Logs/*.boer.lo/audit/*.log"</span>    <span class="hljs-bullet">-</span> <span class="hljs-string">"/home/apps/Logs/*.boer.xyz/audit/*.log"</span>  <span class="hljs-attr">fields:</span> <span class="hljs-string">&#123;ip:</span> <span class="hljs-string">ipv4address,</span> <span class="hljs-attr">log_type:</span> <span class="hljs-string">audit&#125;</span>  <span class="hljs-attr">fields_under_root:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">tail_files:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">symlinks:</span> <span class="hljs-literal">true</span><span class="hljs-attr">processors:</span><span class="hljs-bullet">-</span> <span class="hljs-attr">rename:</span>    <span class="hljs-attr">fields:</span>     <span class="hljs-bullet">-</span> <span class="hljs-attr">from:</span> <span class="hljs-string">"log.file.path"</span>       <span class="hljs-attr">to:</span> <span class="hljs-string">"source"</span>    <span class="hljs-attr">ignore_missing:</span> <span class="hljs-literal">false</span>    <span class="hljs-attr">fail_on_error:</span> <span class="hljs-literal">true</span><span class="hljs-bullet">-</span> <span class="hljs-attr">drop_fields:</span>    <span class="hljs-attr">fields:</span> <span class="hljs-string">["log","ecs","host","agent"]</span> <span class="hljs-bullet">-</span> <span class="hljs-attr">drop_fields:</span>    <span class="hljs-attr">when:</span>      <span class="hljs-attr">equals:</span>        <span class="hljs-attr">log_type:</span> <span class="hljs-string">monitor</span>    <span class="hljs-attr">fields:</span> <span class="hljs-string">["input_type","source"]</span>    <span class="hljs-attr">output.kafka:</span>  <span class="hljs-attr">hosts:</span> <span class="hljs-string">["node1.kafka.boer.lo:9092",</span> <span class="hljs-string">"node2.kafka.boer.lo:9092"</span><span class="hljs-string">,</span> <span class="hljs-string">"node3.kafka.boer.lo:9092"</span><span class="hljs-string">,</span> <span class="hljs-string">"node4.kafka.boer.lo:9092"</span><span class="hljs-string">]</span>  <span class="hljs-attr">topic:</span> <span class="hljs-string">"<span class="hljs-template-variable">%&#123;[log_type]&#125;</span>"</span>  <span class="hljs-attr">partition.round_robin:</span>    <span class="hljs-attr">reachable_only:</span> <span class="hljs-literal">false</span>  <span class="hljs-attr">required_acks:</span> <span class="hljs-number">1</span>  <span class="hljs-attr">compression:</span> <span class="hljs-string">lz4</span>  <span class="hljs-attr">max_message_bytes:</span> <span class="hljs-number">1000000</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Elasticsearch</tag>
      
      <tag>Kubernetes</tag>
      
      <tag>logging</tag>
      
      <tag>Filebeat</tag>
      
      <tag>Kibana</tag>
      
      <tag>Fluentd</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes监控系统Prometheus</title>
    <link href="/2019/10/10/k8s-monitoring-prometheus/"/>
    <url>/2019/10/10/k8s-monitoring-prometheus/</url>
    
    <content type="html"><![CDATA[<p>Prometheus : Monitoring &amp; TSDB<br>Alertmanager : 告警中心<br>node-exporter : 宿主机Node基础监控<br>metrics-server (heapster) : 集群资源监控/HPA<br>kube-state-metrics : K8S资源监控<br>Grafana : 用户UI展示</p><a id="more"></a><h3 id="Prometheus-Operator"><a href="#Prometheus-Operator" class="headerlink" title="Prometheus Operator"></a>Prometheus Operator</h3><p>The Operator acts on the following custom resource definitions (CRDs):</p><ul><li><strong>Prometheus</strong>, which defines a desired Prometheus deployment. # 定义Prometheus集群</li><li><strong>Alertmanager</strong>, which defines a desired Alertmanager deployment. # 定义Alertmanager集群</li><li><strong>ThanosRuler</strong>, which defines a desired Thanos Ruler deployment.</li><li><strong>ServiceMonitor</strong>, which declaratively specifies how groups of Kubernetes services should be monitored. The Operator automatically generates Prometheus scrape configuration based on the current state of the objects in the API server. # 定义监控项</li><li><strong>PodMonitor</strong>, which declaratively specifies how group of pods should be monitored. The Operator automatically generates Prometheus scrape configuration based on the current state of the objects in the API server.</li><li><strong>Probe</strong>, which declaratively specifies how groups of ingresses or static targets should be monitored. The Operator automatically generates Prometheus scrape configuration based on the definition.</li><li><strong>PrometheusRule</strong>, which defines a desired set of Prometheus alerting and/or recording rules. The Operator generates a rule file, which can be used by Prometheus instances. # 定义告警策略</li></ul><p><a href="https://github.com/prometheus-operator/prometheus-operator#prometheus-operator-vs-kube-prometheus-vs-community-helm-chart" target="_blank" rel="noopener">Prometheus Operator vs. kube-prometheus vs. community helm chart</a></p><h3 id="kube-prometheus"><a href="#kube-prometheus" class="headerlink" title="kube-prometheus"></a>kube-prometheus</h3><p>Components included in this package:</p><ul><li>The Prometheus Operator</li><li>Highly available Prometheus</li><li>Highly available Alertmanager</li><li>Prometheus node-exporter</li><li>Prometheus Adapter for Kubernetes Metrics APIs</li><li>kube-state-metrics</li><li>Grafana</li></ul><p>The kube-prometheus stack includes a resource metrics API server, <strong>so the metrics-server addon is not necessary.</strong></p><h3 id="kube-prometheus方式部署监控方案"><a href="#kube-prometheus方式部署监控方案" class="headerlink" title="kube-prometheus方式部署监控方案"></a>kube-prometheus方式部署监控方案</h3><pre><code class="hljs bash"><span class="hljs-comment">## https://github.com/opsnull/follow-me-install-kubernetes-cluster/blob/master/08-4.kube-prometheus%E6%8F%92%E4%BB%B6.md</span><span class="hljs-comment">## </span><span class="hljs-built_in">cd</span> ~/k8sgit <span class="hljs-built_in">clone</span> https://github.com/coreos/kube-prometheus.git<span class="hljs-built_in">cd</span> kube-prometheussed -i -e <span class="hljs-string">'s_quay.io_quay.mirrors.ustc.edu.cn_'</span> manifests/*.yaml manifests/setup/*.yaml <span class="hljs-comment"># quay.mirrors.ustc.edu.cn源</span>kubectl apply -f manifests/setup/ <span class="hljs-comment"># 先部署Prometheus Operator</span>kubectl apply -f manifests/ <span class="hljs-comment"># 再部署Prometheus, Alertmanager等各种CRD资源</span></code></pre><h3 id="暴露Ingress"><a href="#暴露Ingress" class="headerlink" title="暴露Ingress"></a>暴露Ingress</h3><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.k8s.io/v1beta1</span><span class="hljs-attr">kind:</span> <span class="hljs-string">Ingress</span><span class="hljs-attr">metadata:</span>  <span class="hljs-attr">name:</span> <span class="hljs-string">monitoring-ingress</span>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">monitoring</span>  <span class="hljs-attr">annotations:</span>    <span class="hljs-attr">nginx.ingress.kubernetes.io/rewrite-target:</span> <span class="hljs-string">/</span>    <span class="hljs-attr">nginx.ingress.kubernetes.io/load-balance:</span> <span class="hljs-string">"ip_hash"</span>    <span class="hljs-attr">nginx.ingress.kubernetes.io/upstream-hash-by:</span> <span class="hljs-string">"$request_uri"</span><span class="hljs-attr">spec:</span>  <span class="hljs-attr">rules:</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">host:</span> <span class="hljs-string">monitoring.boer.xyz</span>    <span class="hljs-attr">http:</span>      <span class="hljs-attr">paths:</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/</span>        <span class="hljs-attr">backend:</span>          <span class="hljs-attr">serviceName:</span> <span class="hljs-string">grafana</span>          <span class="hljs-attr">servicePort:</span> <span class="hljs-number">3000</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">host:</span> <span class="hljs-string">prometheus.boer.xyz</span>    <span class="hljs-attr">http:</span>      <span class="hljs-attr">paths:</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/</span>        <span class="hljs-comment"># pathType: Prefix</span>        <span class="hljs-attr">backend:</span>          <span class="hljs-attr">serviceName:</span> <span class="hljs-string">prometheus-k8s</span>          <span class="hljs-attr">servicePort:</span> <span class="hljs-number">9090</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">host:</span> <span class="hljs-string">alertmanager.boer.xyz</span>    <span class="hljs-attr">http:</span>      <span class="hljs-attr">paths:</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/</span>        <span class="hljs-attr">backend:</span>          <span class="hljs-attr">serviceName:</span> <span class="hljs-string">alertmanager-main</span>          <span class="hljs-attr">servicePort:</span> <span class="hljs-number">9093</span></code></pre><h3 id="kube-prometheus自定义配置"><a href="#kube-prometheus自定义配置" class="headerlink" title="kube-prometheus自定义配置"></a>kube-prometheus自定义配置</h3><p><code>cd ~/k8s/kube-prometheus</code></p><h4 id="Grafana-数据持久化"><a href="#Grafana-数据持久化" class="headerlink" title="Grafana 数据持久化"></a>Grafana 数据持久化</h4><pre><code class="hljs yaml"><span class="hljs-comment"># vim manifests/grafana-deployment.yaml</span>      <span class="hljs-attr">volumes:</span>      <span class="hljs-comment"># - emptyDir: &#123;&#125;</span>      <span class="hljs-comment">#   name: grafana-storage</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">grafana-storage</span>        <span class="hljs-attr">persistentVolumeClaim:</span>          <span class="hljs-attr">claimName:</span> <span class="hljs-string">grafana-storage-k8s</span><span class="hljs-meta">---</span><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolumeClaim</span><span class="hljs-attr">metadata:</span>  <span class="hljs-attr">labels:</span>    <span class="hljs-attr">app:</span> <span class="hljs-string">grafana</span>    <span class="hljs-attr">grafana:</span> <span class="hljs-string">k8s</span>  <span class="hljs-attr">name:</span> <span class="hljs-string">grafana-storage-k8s</span>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">monitoring</span><span class="hljs-attr">spec:</span>  <span class="hljs-attr">accessModes:</span>  <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteOnce</span>  <span class="hljs-attr">resources:</span>    <span class="hljs-attr">requests:</span>      <span class="hljs-attr">storage:</span> <span class="hljs-string">2Gi</span>  <span class="hljs-attr">storageClassName:</span> <span class="hljs-string">openebs-hostpath</span></code></pre><h4 id="Prometheus自定义配置"><a href="#Prometheus自定义配置" class="headerlink" title="Prometheus自定义配置"></a>Prometheus自定义配置</h4><pre><code class="hljs yaml"><span class="hljs-comment"># vim manifests/prometheus-prometheus.yaml</span>  <span class="hljs-attr">retention:</span> <span class="hljs-string">72h</span> <span class="hljs-comment"># 数据保存时长</span>  <span class="hljs-attr">externalUrl:</span> <span class="hljs-string">http://prometheus.boer.xyz</span> <span class="hljs-comment"># 对应Ingress地址</span>  <span class="hljs-attr">additionalScrapeConfigs:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">additional-scrape-configs</span> <span class="hljs-comment"># 自动发现监控&lt;详见下文&gt;</span>    <span class="hljs-attr">key:</span> <span class="hljs-string">prometheus-additional.yaml</span>  <span class="hljs-attr">storage:</span> <span class="hljs-comment"># 数据持久化</span>    <span class="hljs-attr">volumeClaimTemplate:</span>      <span class="hljs-attr">spec:</span>        <span class="hljs-attr">storageClassName:</span> <span class="hljs-string">openebs-hostpath</span>        <span class="hljs-attr">resources:</span>          <span class="hljs-attr">requests:</span>            <span class="hljs-attr">storage:</span> <span class="hljs-string">5Gi</span></code></pre><h4 id="Alertmanager自定义配置"><a href="#Alertmanager自定义配置" class="headerlink" title="Alertmanager自定义配置"></a>Alertmanager自定义配置</h4><pre><code class="hljs yaml"><span class="hljs-comment"># vim manifests/alertmanager-alertmanager.yaml</span><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">monitoring.coreos.com/v1</span><span class="hljs-attr">kind:</span> <span class="hljs-string">Alertmanager</span><span class="hljs-attr">metadata:</span>  <span class="hljs-attr">labels:</span>    <span class="hljs-attr">alertmanager:</span> <span class="hljs-string">main</span>  <span class="hljs-attr">name:</span> <span class="hljs-string">main</span>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">monitoring</span><span class="hljs-attr">spec:</span>  <span class="hljs-attr">image:</span> <span class="hljs-string">quay.mirrors.ustc.edu.cn/prometheus/alertmanager:v0.20.0</span>  <span class="hljs-attr">nodeSelector:</span>    <span class="hljs-attr">kubernetes.io/os:</span> <span class="hljs-string">linux</span>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span>  <span class="hljs-attr">securityContext:</span>    <span class="hljs-attr">fsGroup:</span> <span class="hljs-number">2000</span>    <span class="hljs-attr">runAsNonRoot:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">runAsUser:</span> <span class="hljs-number">1000</span>  <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">alertmanager-main</span>  <span class="hljs-attr">version:</span> <span class="hljs-string">v0.20.0</span>  <span class="hljs-attr">externalUrl:</span> <span class="hljs-string">http://alertmanager.boer.xyz</span> <span class="hljs-comment"># 对应Ingress地址</span></code></pre><h3 id="Alertmanager企业微信告警"><a href="#Alertmanager企业微信告警" class="headerlink" title="Alertmanager企业微信告警"></a>Alertmanager企业微信告警</h3><pre><code class="hljs yaml"><span class="hljs-comment"># vim alertmanager-main-secrets.yaml</span><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><span class="hljs-attr">kind:</span> <span class="hljs-string">Secret</span><span class="hljs-attr">type:</span> <span class="hljs-string">Opaque</span><span class="hljs-attr">metadata:</span>  <span class="hljs-attr">name:</span> <span class="hljs-string">alertmanager-main</span>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">monitoring</span><span class="hljs-attr">data:</span> <span class="hljs-string">&#123;&#125;</span><span class="hljs-attr">stringData:</span>  <span class="hljs-attr">alertmanager.yaml:</span> <span class="hljs-string">|-</span>    <span class="hljs-attr">"global":</span>      <span class="hljs-attr">"resolve_timeout":</span> <span class="hljs-string">"5m"</span>    <span class="hljs-attr">"inhibit_rules":</span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">"equal":</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">"namespace"</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">"alertname"</span>      <span class="hljs-attr">"source_match":</span>        <span class="hljs-attr">"severity":</span> <span class="hljs-string">"critical"</span>      <span class="hljs-attr">"target_match_re":</span>        <span class="hljs-attr">"severity":</span> <span class="hljs-string">"warning|info"</span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">"equal":</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">"namespace"</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">"alertname"</span>      <span class="hljs-attr">"source_match":</span>        <span class="hljs-attr">"severity":</span> <span class="hljs-string">"warning"</span>      <span class="hljs-attr">"target_match_re":</span>        <span class="hljs-attr">"severity":</span> <span class="hljs-string">"info"</span>    <span class="hljs-attr">"receivers":</span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">"name":</span> <span class="hljs-string">"Default"</span>      <span class="hljs-attr">"wechat_configs":</span> <span class="hljs-comment"># 企业微信接收告警信息 https://work.weixin.qq.com/api/doc/90000/90135/90236#%E6%96%87%E6%9C%AC%E6%B6%88%E6%81%AF</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">"corp_id":</span> <span class="hljs-string">"&lt;corp_id&gt;"</span>        <span class="hljs-attr">"to_user":</span> <span class="hljs-string">"&lt;user1|user2&gt;"</span>        <span class="hljs-attr">"agent_id":</span> <span class="hljs-string">"&lt;1000007&gt;"</span>        <span class="hljs-attr">"api_secret":</span> <span class="hljs-string">"&lt;api_secret&gt;"</span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">"name":</span> <span class="hljs-string">"Watchdog"</span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">"name":</span> <span class="hljs-string">"Critical"</span>    <span class="hljs-attr">"route":</span>      <span class="hljs-attr">"group_by":</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">"alertname"</span> <span class="hljs-comment"># 按alertname分组告警</span>      <span class="hljs-attr">"group_interval":</span> <span class="hljs-string">"5m"</span>      <span class="hljs-attr">"group_wait":</span> <span class="hljs-string">"30s"</span>      <span class="hljs-attr">"receiver":</span> <span class="hljs-string">"Default"</span>      <span class="hljs-attr">"repeat_interval":</span> <span class="hljs-string">"12h"</span> <span class="hljs-comment"># 重复告警间隔时间</span>      <span class="hljs-attr">"routes":</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">"match":</span>          <span class="hljs-attr">"alertname":</span> <span class="hljs-string">"Watchdog"</span>        <span class="hljs-attr">"receiver":</span> <span class="hljs-string">"Default"</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">"match":</span>          <span class="hljs-attr">"severity":</span> <span class="hljs-string">"critical"</span>        <span class="hljs-attr">"receiver":</span> <span class="hljs-string">"Default"</span><span class="hljs-comment"># 强制应用配置</span><span class="hljs-string">kubectl</span> <span class="hljs-string">delete</span> <span class="hljs-string">-f</span> <span class="hljs-string">alertmanager-main-secrets.yaml</span><span class="hljs-string">kubectl</span> <span class="hljs-string">apply</span> <span class="hljs-string">-f</span> <span class="hljs-string">alertmanager-main-secrets.yaml</span></code></pre><h3 id="自动发现监控配置"><a href="#自动发现监控配置" class="headerlink" title="自动发现监控配置"></a>自动发现监控配置</h3><blockquote><p><a href="https://github.com/prometheus-operator/prometheus-operator/blob/master/Documentation/additional-scrape-config.md" target="_blank" rel="noopener">https://github.com/prometheus-operator/prometheus-operator/blob/master/Documentation/additional-scrape-config.md</a></p></blockquote><pre><code class="hljs yaml"><span class="hljs-comment"># vim prometheus-additional.yaml</span><span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">'kubernetes-endpoints'</span>  <span class="hljs-attr">kubernetes_sd_configs:</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">role:</span> <span class="hljs-string">endpoints</span>  <span class="hljs-attr">relabel_configs:</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> <span class="hljs-string">[__meta_kubernetes_service_annotation_prometheus_io_scrape]</span>    <span class="hljs-attr">action:</span> <span class="hljs-string">keep</span>    <span class="hljs-attr">regex:</span> <span class="hljs-literal">true</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> <span class="hljs-string">[__meta_kubernetes_service_annotation_prometheus_io_scheme]</span>    <span class="hljs-attr">action:</span> <span class="hljs-string">replace</span>    <span class="hljs-attr">target_label:</span> <span class="hljs-string">__scheme__</span>    <span class="hljs-attr">regex:</span> <span class="hljs-string">(https?)</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> <span class="hljs-string">[__meta_kubernetes_service_annotation_prometheus_io_path]</span>    <span class="hljs-attr">action:</span> <span class="hljs-string">replace</span>    <span class="hljs-attr">target_label:</span> <span class="hljs-string">__metrics_path__</span>    <span class="hljs-attr">regex:</span> <span class="hljs-string">(.+)</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> <span class="hljs-string">[__address__,</span> <span class="hljs-string">__meta_kubernetes_service_annotation_prometheus_io_port]</span>    <span class="hljs-attr">action:</span> <span class="hljs-string">replace</span>    <span class="hljs-attr">target_label:</span> <span class="hljs-string">__address__</span>    <span class="hljs-attr">regex:</span> <span class="hljs-string">([^:]+)(?::\d+)?;(\d+)</span>    <span class="hljs-attr">replacement:</span> <span class="hljs-string">$1:$2</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">action:</span> <span class="hljs-string">labelmap</span>    <span class="hljs-attr">regex:</span> <span class="hljs-string">__meta_kubernetes_service_label_(.+)</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> <span class="hljs-string">[__meta_kubernetes_namespace]</span>    <span class="hljs-attr">action:</span> <span class="hljs-string">replace</span>    <span class="hljs-attr">target_label:</span> <span class="hljs-string">kubernetes_namespace</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> <span class="hljs-string">[__meta_kubernetes_service_name]</span>    <span class="hljs-attr">action:</span> <span class="hljs-string">replace</span>    <span class="hljs-attr">target_label:</span> <span class="hljs-string">kubernetes_name</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> <span class="hljs-string">[__meta_kubernetes_pod_name]</span>    <span class="hljs-attr">action:</span> <span class="hljs-string">replace</span>    <span class="hljs-attr">target_label:</span> <span class="hljs-string">kubernetes_pod_name</span><span class="hljs-meta">---</span><span class="hljs-comment"># vim additional-scrape-configs.yaml</span><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><span class="hljs-attr">kind:</span> <span class="hljs-string">Secret</span><span class="hljs-attr">metadata:</span>  <span class="hljs-attr">name:</span> <span class="hljs-string">additional-scrape-configs</span>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">monitoring</span><span class="hljs-attr">data:</span>  <span class="hljs-attr">prometheus-additional.yaml:</span> <span class="hljs-string">LSBqb2JfbmFtZTogJ2t1YmVybmV0ZXMtZW5kcG9pbnRzJwogIGt1YmVybmV0ZXNfc2RfY29uZmlnczoKICAtIHJvbGU6IGVuZHBvaW50cwogIHJlbGFiZWxfY29uZmlnczoKICAtIHNvdXJjZV9sYWJlbHM6IFtfX21ldGFfa3ViZXJuZXRlc19zZXJ2aWNlX2Fubm90YXRpb25fcHJvbWV0aGV1c19pb19zY3JhcGVdCiAgICBhY3Rpb246IGtlZXAKICAgIHJlZ2V4OiB0cnVlCiAgLSBzb3VyY2VfbGFiZWxzOiBbX19tZXRhX2t1YmVybmV0ZXNfc2VydmljZV9hbm5vdGF0aW9uX3Byb21ldGhldXNfaW9fc2NoZW1lXQogICAgYWN0aW9uOiByZXBsYWNlCiAgICB0YXJnZXRfbGFiZWw6IF9fc2NoZW1lX18KICAgIHJlZ2V4OiAoaHR0cHM/KQogIC0gc291cmNlX2xhYmVsczogW19fbWV0YV9rdWJlcm5ldGVzX3NlcnZpY2VfYW5ub3RhdGlvbl9wcm9tZXRoZXVzX2lvX3BhdGhdCiAgICBhY3Rpb246IHJlcGxhY2UKICAgIHRhcmdldF9sYWJlbDogX19tZXRyaWNzX3BhdGhfXwogICAgcmVnZXg6ICguKykKICAtIHNvdXJjZV9sYWJlbHM6IFtfX2FkZHJlc3NfXywgX19tZXRhX2t1YmVybmV0ZXNfc2VydmljZV9hbm5vdGF0aW9uX3Byb21ldGhldXNfaW9fcG9ydF0KICAgIGFjdGlvbjogcmVwbGFjZQogICAgdGFyZ2V0X2xhYmVsOiBfX2FkZHJlc3NfXwogICAgcmVnZXg6IChbXjpdKykoPzo6XGQrKT87KFxkKykKICAgIHJlcGxhY2VtZW50OiAkMTokMgogIC0gYWN0aW9uOiBsYWJlbG1hcAogICAgcmVnZXg6IF9fbWV0YV9rdWJlcm5ldGVzX3NlcnZpY2VfbGFiZWxfKC4rKQogIC0gc291cmNlX2xhYmVsczogW19fbWV0YV9rdWJlcm5ldGVzX25hbWVzcGFjZV0KICAgIGFjdGlvbjogcmVwbGFjZQogICAgdGFyZ2V0X2xhYmVsOiBrdWJlcm5ldGVzX25hbWVzcGFjZQogIC0gc291cmNlX2xhYmVsczogW19fbWV0YV9rdWJlcm5ldGVzX3NlcnZpY2VfbmFtZV0KICAgIGFjdGlvbjogcmVwbGFjZQogICAgdGFyZ2V0X2xhYmVsOiBrdWJlcm5ldGVzX25hbWUKICAtIHNvdXJjZV9sYWJlbHM6IFtfX21ldGFfa3ViZXJuZXRlc19wb2RfbmFtZV0KICAgIGFjdGlvbjogcmVwbGFjZQogICAgdGFyZ2V0X2xhYmVsOiBrdWJlcm5ldGVzX3BvZF9uYW1lCg==</span><span class="hljs-meta">---</span><span class="hljs-comment"># 注意manifests/prometheus-prometheus.yaml additionalScrapeConfigs配置项</span><span class="hljs-meta">---</span><span class="hljs-comment"># 需要自动发现监控的应用配置示例: (springboot)</span><span class="hljs-attr">prometheus.io/path:</span> <span class="hljs-string">/actuator/prometheus</span><span class="hljs-attr">prometheus.io/port:</span> <span class="hljs-string">'10080'</span><span class="hljs-attr">prometheus.io/scrape:</span> <span class="hljs-string">'true'</span></code></pre><p><img src="https://for-boer-blog.oss-cn-beijing.aliyuncs.com/20200821152346.png?x-oss-process=style/blog-img-watermark" srcset="/img/loading.gif" alt=""></p><p><img src="https://for-boer-blog.oss-cn-beijing.aliyuncs.com/altermanager_groupby.jpg?x-oss-process=style/blog-img-watermark" srcset="/img/loading.gif" alt=""></p><p><img src="https://for-boer-blog.oss-cn-beijing.aliyuncs.com/20200821112157.png?x-oss-process=style/blog-img-watermark" srcset="/img/loading.gif" alt=""></p><h3 id="Grafana插件"><a href="#Grafana插件" class="headerlink" title="Grafana插件"></a>Grafana插件</h3><blockquote><p><a href="https://grafana.com/grafana/plugins/devopsprodigy-kubegraf-app" target="_blank" rel="noopener">https://grafana.com/grafana/plugins/devopsprodigy-kubegraf-app</a></p></blockquote><p><img src="https://for-boer-blog.oss-cn-beijing.aliyuncs.com/20200821154757.png?x-oss-process=style/blog-img-watermark" srcset="/img/loading.gif" alt=""></p><h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><ol><li><a href="https://github.com/prometheus-operator/prometheus-operator" target="_blank" rel="noopener">https://github.com/prometheus-operator/prometheus-operator</a></li><li><a href="https://github.com/prometheus-operator/kube-prometheus" target="_blank" rel="noopener">https://github.com/prometheus-operator/kube-prometheus</a></li><li><a href="https://github.com/opsnull/follow-me-install-kubernetes-cluster/blob/master/08-4.kube-prometheus%E6%8F%92%E4%BB%B6.md" target="_blank" rel="noopener">https://github.com/opsnull/follow-me-install-kubernetes-cluster/blob/master/08-4.kube-prometheus%E6%8F%92%E4%BB%B6.md</a></li><li><a href="https://www.qikqiak.com/k8strain/monitor/operator/install/" target="_blank" rel="noopener">https://www.qikqiak.com/k8strain/monitor/operator/install/</a></li><li><a href="https://work.weixin.qq.com/api/doc/90000/90135/90236#%E6%96%87%E6%9C%AC%E6%B6%88%E6%81%AF" target="_blank" rel="noopener">https://work.weixin.qq.com/api/doc/90000/90135/90236#%E6%96%87%E6%9C%AC%E6%B6%88%E6%81%AF</a></li><li><a href="https://github.com/prometheus-operator/prometheus-operator/blob/master/Documentation/additional-scrape-config.md" target="_blank" rel="noopener">https://github.com/prometheus-operator/prometheus-operator/blob/master/Documentation/additional-scrape-config.md</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Prometheus</tag>
      
      <tag>Monitoring</tag>
      
      <tag>Operator</tag>
      
      <tag>CRD</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubeadm部署HA高可用Kubernetes集群</title>
    <link href="/2019/09/24/k8s-ha-deployment/"/>
    <url>/2019/09/24/k8s-ha-deployment/</url>
    
    <content type="html"><![CDATA[<p><a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/" target="_blank" rel="noopener">https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/</a></p><p>system requirement<br>2C2G</p><a id="more"></a><h3 id="安装Aliyun-YUM-Repo"><a href="#安装Aliyun-YUM-Repo" class="headerlink" title="安装Aliyun YUM Repo"></a>安装Aliyun YUM Repo</h3><pre><code class="hljs bash"><span class="hljs-comment">## https://developer.aliyun.com/mirror/</span><span class="hljs-comment">### base</span>mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backupcurl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo<span class="hljs-comment">### epel</span>mv /etc/yum.repos.d/epel.repo /etc/yum.repos.d/epel.repo.backupmv /etc/yum.repos.d/epel-testing.repo /etc/yum.repos.d/epel-testing.repo.backupwget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo<span class="hljs-comment"># 安装必需软件</span><span class="hljs-comment">### https://github.com/opsnull/follow-me-install-kubernetes-cluster/blob/master/01.%E5%88%9D%E5%A7%8B%E5%8C%96%E7%B3%BB%E7%BB%9F%E5%92%8C%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F.md</span>yum install -y chrony conntrack ipvsadm ipset jq iptables curl sysstat libseccomp wget socat git</code></pre><h3 id="优化内核参数"><a href="#优化内核参数" class="headerlink" title="优化内核参数"></a>优化内核参数</h3><pre><code class="hljs bash">cat &lt;&lt;EOF | sudo tee /etc/sysctl.d/k8s.confnet.bridge.bridge-nf-call-iptables=1net.bridge.bridge-nf-call-ip6tables=1net.ipv4.ip_forward=1net.ipv4.tcp_tw_recycle=0net.ipv4.tcp_tw_reuse=1net.ipv4.tcp_timestamps=1net.ipv4.neigh.default.gc_thresh1=1024net.ipv4.neigh.default.gc_thresh2=2048net.ipv4.neigh.default.gc_thresh3=4096vm.swappiness=0vm.overcommit_memory=1vm.panic_on_oom=0vm.max_map_count = 262144fs.inotify.max_user_instances=8192fs.inotify.max_user_watches=1048576fs.file-max=52706963fs.nr_open=52706963net.ipv6.conf.all.disable_ipv6=1net.netfilter.nf_conntrack_max=2310720EOFsysctl --system</code></pre><h3 id="IPVS加载内核模块"><a href="#IPVS加载内核模块" class="headerlink" title="IPVS加载内核模块"></a>IPVS加载内核模块</h3><pre><code class="hljs bash"><span class="hljs-comment">## https://github.com/kubernetes/kubernetes/blob/master/pkg/proxy/ipvs/README.md</span>vim /etc/sysconfig/modules/ipvs.modules<span class="hljs-meta">#!/bin/bash</span>modprobe -- ip_vsmodprobe -- ip_vs_rrmodprobe -- ip_vs_wrrmodprobe -- ip_vs_shmodprobe -- nf_conntrack_ipv4</code></pre><blockquote><p>modprobe br_netfilter</p></blockquote><h3 id="SELinux"><a href="#SELinux" class="headerlink" title="SELinux"></a>SELinux</h3><pre><code class="hljs bash">setenforce 0sed -i <span class="hljs-string">'s/^SELINUX=.*/SELINUX=disabled/'</span> /etc/selinux/config</code></pre><h3 id="关闭-swap-分区"><a href="#关闭-swap-分区" class="headerlink" title="关闭 swap 分区"></a>关闭 swap 分区</h3><pre><code class="hljs bash">swapoff -ased -i <span class="hljs-string">'/ swap / s/^\(.*\)$/#\1/g'</span> /etc/fstab</code></pre><h3 id="设置iptables默认转发策略"><a href="#设置iptables默认转发策略" class="headerlink" title="设置iptables默认转发策略"></a>设置iptables默认转发策略</h3><pre><code class="hljs bash">systemctl stop firewalldsystemctl <span class="hljs-built_in">disable</span> firewalldiptables -F &amp;&amp; iptables -X &amp;&amp; iptables -F -t nat &amp;&amp; iptables -X -t natiptables -P FORWARD ACCEPT</code></pre><h3 id="关闭无用服务"><a href="#关闭无用服务" class="headerlink" title="关闭无用服务"></a>关闭无用服务</h3><p><code>systemctl stop postfix &amp;&amp; systemctl disable postfix</code></p><h3 id="安装Aliyun-YUM-Repo-1"><a href="#安装Aliyun-YUM-Repo-1" class="headerlink" title="安装Aliyun YUM Repo"></a>安装Aliyun YUM Repo</h3><pre><code class="hljs bash"><span class="hljs-comment">## https://developer.aliyun.com/mirror/</span><span class="hljs-comment">### k8s</span>cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo[kubernetes]name=Kubernetesbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/enabled=1gpgcheck=1repo_gpgcheck=1gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpgEOF</code></pre><h3 id="安装kube-amp-docker"><a href="#安装kube-amp-docker" class="headerlink" title="安装kube* &amp; docker"></a>安装kube* &amp; docker</h3><pre><code class="hljs bash">yum install -y kubelet kubeadm kubectl <span class="hljs-comment"># 注意版本需要和镜像版本对应</span>systemctl <span class="hljs-built_in">enable</span> kubelet &amp;&amp; systemctl start kubeletyum install -y yum-utils device-mapper-persistent-data lvm2yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<span class="hljs-comment"># https://docs.docker.com/engine/install/centos/</span>yum remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-engineyum update -y &amp;&amp; yum install -y \  containerd.io-1.2.13 \  docker-ce-19.03.8 \  docker-ce-cli-19.03.8mkdir /etc/docker<span class="hljs-comment"># 镜像加速  https://cr.console.aliyun.com/cn-beijing/instances/mirrors</span>cat &gt; /etc/docker/daemon.json &lt;&lt;EOF&#123;  <span class="hljs-string">"registry-mirrors"</span>: [<span class="hljs-string">"https://890une7x.mirror.aliyuncs.com"</span>],  <span class="hljs-string">"exec-opts"</span>: [<span class="hljs-string">"native.cgroupdriver=systemd"</span>],  <span class="hljs-string">"log-driver"</span>: <span class="hljs-string">"json-file"</span>,  <span class="hljs-string">"log-opts"</span>: &#123;    <span class="hljs-string">"max-size"</span>: <span class="hljs-string">"100m"</span>  &#125;,  <span class="hljs-string">"storage-driver"</span>: <span class="hljs-string">"overlay2"</span>,  <span class="hljs-string">"storage-opts"</span>: [    <span class="hljs-string">"overlay2.override_kernel_check=true"</span>  ]&#125;EOFmkdir -p /etc/systemd/system/docker.service.dsystemctl start docker.servicesystemctl <span class="hljs-built_in">enable</span> docker.servicesystemctl status docker.service</code></pre><h3 id="kubectl-autocompletion"><a href="#kubectl-autocompletion" class="headerlink" title="kubectl autocompletion"></a>kubectl autocompletion</h3><p><code>https://kubernetes.io/docs/tasks/tools/install-kubectl/#enabling-shell-autocompletion</code></p><h3 id="kubeadm-config"><a href="#kubeadm-config" class="headerlink" title="kubeadm config"></a>kubeadm config</h3><p><code>vim kubeadm-config.yaml</code></p><pre><code class="hljs yaml"><span class="hljs-comment"># kubeadm init --config kubeadm-config.yaml --upload-certs</span><span class="hljs-comment"># kubeadm config print init-defaults</span><span class="hljs-comment"># https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/high-availability/</span><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubeadm.k8s.io/v1beta2</span><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterConfiguration</span><span class="hljs-comment"># https://storage.googleapis.com/kubernetes-release/release/stable.txt</span><span class="hljs-comment"># kubernetesVersion: stable</span><span class="hljs-attr">kubernetesVersion:</span> <span class="hljs-string">v1.18.3</span><span class="hljs-attr">controlPlaneEndpoint:</span> <span class="hljs-string">&lt;your-lb-ip&gt;:&lt;port&gt;</span><span class="hljs-attr">certificatesDir:</span> <span class="hljs-string">/etc/kubernetes/pki</span><span class="hljs-attr">clusterName:</span> <span class="hljs-string">kubernetes</span><span class="hljs-attr">apiServer:</span>  <span class="hljs-attr">timeoutForControlPlane:</span> <span class="hljs-string">4m0s</span><span class="hljs-attr">controllerManager:</span> <span class="hljs-string">&#123;&#125;</span><span class="hljs-attr">scheduler:</span> <span class="hljs-string">&#123;&#125;</span><span class="hljs-attr">imageRepository:</span> <span class="hljs-string">registry.aliyuncs.com/google_containers</span><span class="hljs-attr">networking:</span>  <span class="hljs-attr">dnsDomain:</span> <span class="hljs-string">cluster.local</span>  <span class="hljs-attr">podSubnet:</span> <span class="hljs-number">172.30</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">/16</span>  <span class="hljs-attr">serviceSubnet:</span> <span class="hljs-number">10.96</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">/12</span><span class="hljs-attr">dns:</span>  <span class="hljs-attr">type:</span> <span class="hljs-string">CoreDNS</span><span class="hljs-attr">etcd:</span>  <span class="hljs-attr">local:</span>    <span class="hljs-attr">dataDir:</span> <span class="hljs-string">/var/lib/etcd</span><span class="hljs-meta">---</span><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubeproxy.config.k8s.io/v1alpha1</span><span class="hljs-attr">kind:</span> <span class="hljs-string">KubeProxyConfiguration</span><span class="hljs-attr">mode:</span> <span class="hljs-string">ipvs</span><span class="hljs-comment">## 自定义CA</span><span class="hljs-comment"># https://kubernetes.io/docs/tasks/administer-cluster/kubeadm/kubeadm-certs/</span><span class="hljs-comment"># This means you can, for example, copy an existing CA into /etc/kubernetes/pki/ca.crt and /etc/kubernetes/pki/ca.key, and kubeadm will use this CA for signing the rest of the certificates</span></code></pre><h3 id="kubeadm-deploy"><a href="#kubeadm-deploy" class="headerlink" title="kubeadm deploy"></a>kubeadm deploy</h3><pre><code class="hljs bash">kubeadm init --config kubeadm-config.yaml --upload-certskubeadm config images pull --config kubeadm-config.yaml <span class="hljs-comment"># 先拉取镜像</span>curl -LO https://docs.projectcalico.org/v3.14/manifests/calico.yaml<span class="hljs-comment"># 更改CALICO_IPV4POOL_CIDR 为podSubnet: 172.30.0.0/16</span><span class="hljs-comment"># - name: CALICO_IPV4POOL_CIDR</span><span class="hljs-comment">#   value: "172.30.0.0/16"</span><span class="hljs-comment"># 更改为BGP模式 https://docs.projectcalico.org/reference/node/configuration</span><span class="hljs-comment"># Enable IPIP</span><span class="hljs-comment"># - name: CALICO_IPV4POOL_IPIP</span><span class="hljs-comment">#   value: "Never"</span>kubectl apply -f calico.yaml<span class="hljs-comment"># core-dns pod不再pending</span>kubeadm resetkubectl delete node &lt;node-name&gt;</code></pre><h3 id="ipvs重建"><a href="#ipvs重建" class="headerlink" title="ipvs重建"></a>ipvs重建</h3><pre><code class="hljs bash"><span class="hljs-comment"># 如果安装时为iptables模式</span>kubectl -n kube-system edit cm kube-proxy<span class="hljs-comment"># mode: "ipvs"</span>kubectl get pod -n kube-system | grep kube-proxy | awk <span class="hljs-string">'&#123;system("kubectl delete pod "$1" -n kube-system")&#125;'</span> <span class="hljs-comment"># 重建kube-proxy的pod</span></code></pre><h3 id="Calico-BGP模式重建"><a href="#Calico-BGP模式重建" class="headerlink" title="Calico BGP模式重建"></a>Calico BGP模式重建</h3><pre><code class="hljs bash"><span class="hljs-comment"># https://docs.projectcalico.org/archive/v3.14/getting-started/kubernetes/installation/config-options</span>curl -LO https://docs.projectcalico.org/v3.14/manifests/calico.yaml<span class="hljs-comment"># 更改CALICO_IPV4POOL_CIDR 为podSubnet: 172.30.0.0/16</span><span class="hljs-comment"># - name: CALICO_IPV4POOL_CIDR</span><span class="hljs-comment">#   value: "172.30.0.0/16"</span><span class="hljs-comment"># 更改为BGP模式 https://docs.projectcalico.org/reference/node/configuration</span><span class="hljs-comment"># Enable IPIP</span><span class="hljs-comment"># - name: CALICO_IPV4POOL_IPIP</span><span class="hljs-comment">#   value: "Never"</span>kubectl apply -f calico.yaml</code></pre><h3 id="Operations"><a href="#Operations" class="headerlink" title="Operations"></a>Operations</h3><pre><code class="hljs bash"><span class="hljs-comment">## 切换默认namespace</span>kubectl config <span class="hljs-built_in">set</span>-context $(kubectl config current-context) --namespace=&lt;insert-namespace-name-here&gt;<span class="hljs-comment"># Validate it</span>kubectl config view | grep namespace<span class="hljs-comment"># create registry secret</span>kubectl create secret docker-registry boer-harbor --docker-server=harbor.boer.xyz --docker-username=admin --docker-password=Admin@123 --docker-email=boer0924@gmail.com --namespace=boer-public<span class="hljs-comment"># join node</span>kubeadm token listkubeadm token create --<span class="hljs-built_in">print</span>-join-commandkubectl drain <span class="hljs-variable">$NODENAME</span>kubectl uncordon <span class="hljs-variable">$NODENAME</span><span class="hljs-comment"># https://docs.docker.com/engine/reference/commandline/ps/#filtering</span>docker rm $(docker ps -a -f status=exited -q)docker ps --format <span class="hljs-string">"&#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Command&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;"</span>docker ps --filter <span class="hljs-string">"status=exited"</span></code></pre><h4 id="etcdctl"><a href="#etcdctl" class="headerlink" title="etcdctl"></a>etcdctl</h4><pre><code class="hljs bash"><span class="hljs-comment"># https://jimmysong.io/kubernetes-handbook/guide/using-etcdctl-to-access-kubernetes-data.html</span>curl -LO etcd-v3.4.3-linux-amd64.tar.gz<span class="hljs-built_in">alias</span> etcdctl=<span class="hljs-string">'etcdctl --cacert=/etc/kubernetes/pki/etcd/ca.crt --cert=/etc/kubernetes/pki/etcd/peer.crt --key=/etc/kubernetes/pki/etcd/peer.key'</span>etcdctl get /registry/namespaces/kube-system -w=json | jq .etcdctl member listetcdctl <span class="hljs-built_in">help</span><span class="hljs-comment"># 备份</span>etcdctl snapshot saveetcdctl snapshot statusetcdctl snapshot restore</code></pre><h4 id="Calicoctl"><a href="#Calicoctl" class="headerlink" title="Calicoctl"></a>Calicoctl</h4><pre><code class="hljs bash"><span class="hljs-comment"># https://docs.projectcalico.org/archive/v3.14/getting-started/clis/calicoctl/</span>curl -O -L  https://github.com/projectcalico/calicoctl/releases/download/v3.14.1/calicoctlmv calicoctl /usr/<span class="hljs-built_in">local</span>/bin/chmod a+x /usr/<span class="hljs-built_in">local</span>/bin/calicoctlvim /etc/calico/calicoctl.cfgapiVersion: projectcalico.org/v3kind: CalicoAPIConfigmetadata:spec:  datastoreType: <span class="hljs-string">"kubernetes"</span>  kubeconfig: <span class="hljs-string">"/root/.kube/config"</span>calicoctl get nodescalicoctl node status <span class="hljs-comment"># 查看calico运行模式</span>calicoctl get ipPool -o yaml</code></pre><h4 id="Helm-v2安装"><a href="#Helm-v2安装" class="headerlink" title="Helm v2安装"></a>Helm v2安装</h4><pre><code class="hljs bash"><span class="hljs-comment"># https://qhh.me/2019/08/08/Helm-%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</span>curl -LO https://get.helm.sh/helm-v2.16.6-linux-amd64.tar.gzvim rbac-config.yamlapiVersion: v1kind: ServiceAccountmetadata:  name: tiller  namespace: kube-system---apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRoleBindingmetadata:  name: tillerroleRef:  apiGroup: rbac.authorization.k8s.io  kind: ClusterRole  name: cluster-adminsubjects:  - kind: ServiceAccount    name: tiller    namespace: kube-systemhelm init --service-account tiller -i registry.aliyuncs.com/google_containers/tiller:v2.16.6helm repo listhelm repo add stable https://mirror.azure.cn/kubernetes/chartshelm repo add incubator https://mirror.azure.cn/kubernetes/charts-incubatorhelm repo updatehelm fetch stable/mysql <span class="hljs-comment"># 当前目录现在xxx.tgz</span>helm install stable/mysql</code></pre><h3 id="MetalLB"><a href="#MetalLB" class="headerlink" title="MetalLB"></a>MetalLB</h3><pre><code class="hljs bash"><span class="hljs-comment"># 不让私有云用户成为K8S世界的二等公民</span><span class="hljs-comment"># https://metallb.universe.tf/installation/</span><span class="hljs-comment"># 用法demo</span>apiVersion: v1kind: Servicemetadata:  name: theapp-service  annotations:    metallb.universe.tf/address-pool: default  labels:    app: theappspec:  <span class="hljs-built_in">type</span>: LoadBalancer  <span class="hljs-comment"># type: NodePort</span>  <span class="hljs-comment"># type: ClusterIP</span>  ports:  - port: 5000    targetPort: 5000    <span class="hljs-comment"># nodePort: 31090</span>  selector:    app: theappkubectl get svc <span class="hljs-comment"># curl -v EXTERNAL-IP</span></code></pre><p>MetalLB (头等舱)<br><img src="/img/figure/metallb.jpg" srcset="/img/loading.gif" alt="metallb"></p><center>vs</center><p>NodePort (经济舱)<br><img src="/img/figure/nodeport.jpg" srcset="/img/loading.gif" alt="nodeport"></p><h3 id="Ingress-Nginx-L7"><a href="#Ingress-Nginx-L7" class="headerlink" title="Ingress-Nginx L7"></a>Ingress-Nginx L7</h3><pre><code class="hljs bash"><span class="hljs-comment"># https://kubernetes.github.io/ingress-nginx/deploy/#bare-metal</span><span class="hljs-comment"># 更改controller-service的type: LoadBalancer(默认NodePort)</span><span class="hljs-comment"># 添加MetalLB annotations</span>metadata:  annotations:    metallb.universe.tf/address-pool: defaultspec:  <span class="hljs-built_in">type</span>: LoadBalancer<span class="hljs-comment"># 用法demo</span>apiVersion: networking.k8s.io/v1beta1kind: Ingressmetadata:  name: theapp-ingress  annotations:    nginx.ingress.kubernetes.io/rewrite-target: /    nginx.ingress.kubernetes.io/load-balance: <span class="hljs-string">"ip_hash"</span>    nginx.ingress.kubernetes.io/upstream-hash-by: <span class="hljs-string">"<span class="hljs-variable">$request_uri</span>"</span>spec:  rules:  - host: theapp.boer.xyz    http:      paths:      - path: /        backend:          serviceName: theapp-service          servicePort: 5000</code></pre><h3 id="Rancher卸载"><a href="#Rancher卸载" class="headerlink" title="Rancher卸载"></a>Rancher卸载</h3><pre><code class="hljs routeros"><span class="hljs-comment"># https://blog.csdn.net/gui951753/article/details/106160427</span>kubectl<span class="hljs-built_in"> proxy </span>&amp;<span class="hljs-attribute">NAMESPACE</span>=localkubectl <span class="hljs-builtin-name">get</span> namespace <span class="hljs-variable">$NAMESPACE</span> -o json |jq <span class="hljs-string">'.spec = &#123;"finalizers":[]&#125;'</span> &gt;temp.jsoncurl -k -H <span class="hljs-string">"Content-Type: application/json"</span> -X PUT --data-binary @temp.json 127.0.0.1:8001/api/v1/namespaces/<span class="hljs-variable">$NAMESPACE</span>/finalize<span class="hljs-comment"># https://github.com/rancher/rancher/issues/14715#issuecomment-430194650</span>kubectl <span class="hljs-builtin-name">get</span> customresourcedefinitions | grep cattle.io | awk <span class="hljs-string">'&#123;print $1&#125;'</span> | xargs kubectl delete customresourcedefinitions</code></pre><h3 id="模型概览"><a href="#模型概览" class="headerlink" title="模型概览"></a>模型概览</h3><p><img src="/img/figure/k8s_network_outbound.jpg" srcset="/img/loading.gif" alt="k8s-boer"></p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://github.com/opsnull/follow-me-install-kubernetes-cluster" target="_blank" rel="noopener">https://github.com/opsnull/follow-me-install-kubernetes-cluster</a></li><li><a href="https://www.qikqiak.com/k8strain" target="_blank" rel="noopener">https://www.qikqiak.com/k8strain</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>Calico</tag>
      
      <tag>IPVS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes镜像仓库Harbor</title>
    <link href="/2019/09/09/k8s-registry-harbor/"/>
    <url>/2019/09/09/k8s-registry-harbor/</url>
    
    <content type="html"><![CDATA[<p>在Kubernetes之上部署Harbor</p><p>Harbor is an open source registry that secures artifacts with policies and role-based access control, ensures images are scanned and free from vulnerabilities, and signs images as trusted. Harbor, a CNCF Graduated project, delivers compliance, performance, and interoperability to help you consistently and securely manage artifacts across cloud native compute platforms like Kubernetes and Docker.</p><blockquote><p>在企业级Registry的行列，竟然没有Harbor的竞品…</p></blockquote><a id="more"></a><h3 id="Helm-Charts"><a href="#Helm-Charts" class="headerlink" title="Helm Charts"></a>Helm Charts</h3><pre><code class="hljs bash">~/k8s/chartshelm repo add harbor https://helm.goharbor.iohelm listhelm install --name harbor -f values.yaml . --namespace harborhelm upgrade -f values.yaml harbor . --namespace harborhelm delete --purge harborkubectl -n harbor delete pvc $(kubectl -n harbor get pvc | grep harbor | awk <span class="hljs-string">'&#123;print $1&#125;'</span>)helm status harborhelm fetch harbor/harbor --version 1.3.2tar -zxf harbor-1.3.2.tgz</code></pre><h3 id="Harbor-Helm-Values配置"><a href="#Harbor-Helm-Values配置" class="headerlink" title="Harbor Helm Values配置"></a>Harbor Helm Values配置</h3><pre><code class="hljs yaml"><span class="hljs-comment"># vim harbor/values.yaml</span><span class="hljs-attr">expose:</span>  <span class="hljs-attr">type:</span> <span class="hljs-string">ingress</span>  <span class="hljs-attr">tls:</span>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">ingress:</span>    <span class="hljs-attr">hosts:</span>      <span class="hljs-attr">core:</span> <span class="hljs-string">registry.boer.xyz</span>      <span class="hljs-attr">notary:</span> <span class="hljs-string">notary.boer.xyz</span>    <span class="hljs-attr">controller:</span> <span class="hljs-string">default</span>    <span class="hljs-attr">annotations:</span>      <span class="hljs-attr">kubernetes.io/ingress.class:</span> <span class="hljs-string">"nginx"</span>      <span class="hljs-attr">ingress.kubernetes.io/ssl-redirect:</span> <span class="hljs-string">"true"</span>      <span class="hljs-attr">ingress.kubernetes.io/proxy-body-size:</span> <span class="hljs-string">"0"</span>      <span class="hljs-attr">nginx.ingress.kubernetes.io/ssl-redirect:</span> <span class="hljs-string">"true"</span>      <span class="hljs-attr">nginx.ingress.kubernetes.io/proxy-body-size:</span> <span class="hljs-string">"0"</span><span class="hljs-attr">externalURL:</span> <span class="hljs-string">https://registry.boer.xyz</span><span class="hljs-attr">persistence:</span>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">resourcePolicy:</span> <span class="hljs-string">"keep"</span>  <span class="hljs-attr">persistentVolumeClaim:</span>    <span class="hljs-attr">registry:</span>      <span class="hljs-attr">storageClass:</span> <span class="hljs-string">"openebs-hostpath"</span>    <span class="hljs-attr">chartmuseum:</span>      <span class="hljs-attr">storageClass:</span> <span class="hljs-string">"openebs-hostpath"</span>    <span class="hljs-attr">jobservice:</span>      <span class="hljs-attr">storageClass:</span> <span class="hljs-string">"openebs-hostpath"</span>    <span class="hljs-attr">database:</span>      <span class="hljs-attr">storageClass:</span> <span class="hljs-string">"openebs-hostpath"</span>    <span class="hljs-attr">redis:</span>      <span class="hljs-attr">storageClass:</span> <span class="hljs-string">"openebs-hostpath"</span><span class="hljs-attr">harborAdminPassword:</span> <span class="hljs-string">"&lt;your-secret-password&gt;"</span> <span class="hljs-comment"># 注意替换</span></code></pre><h3 id="Registry证书分发"><a href="#Registry证书分发" class="headerlink" title="Registry证书分发"></a>Registry证书分发</h3><pre><code class="hljs bash">kubectl -n harbor get secret harbor-harbor-ingress -o yaml<span class="hljs-comment"># 其中 data 区域中 ca.crt 对应的值就是我们需要证书，不过需要注意还需要做一个base64的解码</span><span class="hljs-comment"># 保存data区域ca.crt的base64 -d内容到harbor.crt</span><span class="hljs-comment">## docker私有registry -  证书分发</span>mkdir -p /etc/docker/certs.d/registry.boer.xyzcp harbor.crt /etc/docker/certs.d/registry.boer.xyz <span class="hljs-comment"># 所有master\node均需配置</span><span class="hljs-comment">## 本地浏览器 - 证书分发</span><span class="hljs-comment"># 下载harbor.crt到本地电脑，双击-导入浏览器，添加到信任的根证书目录</span><span class="hljs-comment"># Chrome会提示: 连接时安全的。</span><span class="hljs-comment"># ~灼眼的小红锁变成了可爱的小绿锁~</span></code></pre><h3 id="Registry域名"><a href="#Registry域名" class="headerlink" title="Registry域名"></a>Registry域名</h3><blockquote><p>如果你的环境没有自己的DNS服务器</p></blockquote><pre><code class="hljs bash"><span class="hljs-comment"># ansible下发harbor解析hosts</span><span class="hljs-comment">## 添加hosts</span>ansible k8s -m lineinfile -a <span class="hljs-string">"dest=/etc/hosts line='10.10.253.17 registry.boer.xyz'"</span><span class="hljs-comment">## 删除hosts</span>ansible k8s -m lineinfile -a <span class="hljs-string">"dest=/etc/hosts line='10.10.253.17 registry.boer.xyz' state=absent"</span></code></pre><h3 id="创建Registry-secret"><a href="#创建Registry-secret" class="headerlink" title="创建Registry secret"></a>创建Registry secret</h3><blockquote><p>思路分享：Harbor建一个账号(比如: deployer)，作为K8S的公用镜像拉取账号。<br>注意将公用账户加入<strong>每一个项目</strong>的成员，并赋予<strong>项目管理员</strong>以上权限。</p></blockquote><pre><code class="hljs bash">kubectl create secret docker-registry regcred --docker-server=registry.boer.xyz --docker-username=deployer --docker-password=&lt;your-password&gt; --docker-email=boer0924@gmail.com --namespace=boer-public</code></pre><h3 id="用法Demo"><a href="#用法Demo" class="headerlink" title="用法Demo"></a>用法Demo</h3><pre><code class="hljs yaml"><span class="hljs-comment">## docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]</span><span class="hljs-comment"># docker tag boer0924/theapp:0.0.1 registry.boer.xyz/public/theapp:0.0.1</span><span class="hljs-comment"># docker push registry.boer.xyz/public/theapp:0.0.1 # 上传镜像</span><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><span class="hljs-attr">template:</span>  <span class="hljs-attr">spec:</span>    <span class="hljs-attr">containers:</span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">theapp</span>      <span class="hljs-attr">image:</span> <span class="hljs-string">registry.boer.xyz/public/theapp:0.0.1</span>      <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">Always</span>      <span class="hljs-attr">ports:</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">5000</span>    <span class="hljs-attr">imagePullSecrets:</span> <span class="hljs-comment"># 划重点</span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">regcred</span></code></pre><h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><ul><li><a href="https://www.qikqiak.com/post/harbor-quick-install/" target="_blank" rel="noopener">https://www.qikqiak.com/post/harbor-quick-install/</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>Harbor</tag>
      
      <tag>Docker</tag>
      
      <tag>Registry</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>中间件运维规范(初稿)</title>
    <link href="/2019/06/13/middleware-devops-guide/"/>
    <url>/2019/06/13/middleware-devops-guide/</url>
    
    <content type="html"><![CDATA[<p>本文记录中间件<code>RabbitMQ</code>, <code>Kafka</code>, <code>Elasticsearch</code>系统的集群部署，需求方必备信息，日常巡检等应该check的重要节点。</p><a id="more"></a><h1 id="中间件运维规范-初稿"><a href="#中间件运维规范-初稿" class="headerlink" title="中间件运维规范(初稿)"></a>中间件运维规范(初稿)</h1><h2 id="os-level"><a href="#os-level" class="headerlink" title="os-level:"></a>os-level:</h2><p>其他内核优化同操作系统内核基线</p><pre><code class="hljs angelscript">vm.max_map_count=<span class="hljs-number">262144</span>* soft nofile <span class="hljs-number">102400</span>* hard nofile <span class="hljs-number">204800</span></code></pre><h2 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h2><p>一、集群部署</p><ol><li>配置MNESIA_BASE, LOG_BASE</li><li>启动management, federation插件</li><li>配置logrotate</li><li>修改默认控制登录密码</li><li>配置netdata监控, 并验证</li><li>创建测试exchange\queue验证可用性</li><li>创建元数据: vhost\exchange\queue\user\policy</li><li>配置镜像队列</li></ol><p>二、需求方提供信息</p><ol><li>集群信息</li><li>exchange 名字</li><li>exchange 类型</li><li>queue 名字</li><li>queue 是否持久化</li><li>routing_key</li></ol><p>三、日常巡检</p><ol><li>内存、磁盘(全局流控)</li><li>rabbitmq进程fd、mmap占用量</li><li>消息积压情况</li><li>是否信用卡流控</li><li>connections/channel连接数量</li></ol><h2 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h2><p>一、集群部署</p><ol><li>log.retention.hours 建议72甚至更小</li><li>num.replica.fetchers flowwers数据同步线程数, 建议cpu core数</li><li>num.recovery.threads.per.data.dir 数据恢复线程数, 建议cpu core数</li></ol><p>二、需求方提供信息</p><ol><li>topic名字, 建议name: test-for-native 中划线分割，避免下划线/点</li><li>分区、副本数量, 建议分区为broker的倍数，副本数为3broker/2,5broker/3</li><li>预估7/3天topic数据量(消息落盘后占用磁盘空间大小), 若topic数据量较大, 且重要级别较高建议副本为broker数</li><li>消费积压监控功能netdata已在开发中…</li></ol><p>三、日常巡检</p><ol><li>分区是否均衡、leader是否是优先副本</li><li>kafka配置data.dirs磁盘容量情况</li><li>kafka进程fd、mmap占用量</li></ol><h2 id="ES"><a href="#ES" class="headerlink" title="ES"></a>ES</h2><p>一、集群部署</p><ol><li>cluster-name</li><li>node.name</li><li>network.host</li><li>jvm.options配置堆内存</li><li>discovery.zen.minimum_master_nodes: (N/2)+1 防脑裂</li></ol><p>二、需求方提供信息</p><ol><li>索引名</li><li>索引主分片、复制分片数量</li><li>索引mapping</li><li>索引管理策略(index分割策略、删除index策略等)</li><li>预估索引占用磁盘空间大小</li><li>是否需要其他es插件，并提供配置</li></ol><p>三、日常巡检</p><ol><li>集群状态, 强制green</li><li>path.data配置占用磁盘容量情况</li><li>path.logs配置占用磁盘容量情况(考虑logrotate/log4j日志轮转)</li></ol><h2 id="配置示例"><a href="#配置示例" class="headerlink" title="配置示例"></a>配置示例</h2><p>rabbitmq:</p><pre><code class="hljs ini"><span class="hljs-attr">cluster_partition_handling</span> = pause_minority<span class="hljs-attr">vm_memory_high_watermark</span> = <span class="hljs-number">0.4</span><span class="hljs-attr">vm_memory_high_watermark_paging_ratio</span> = <span class="hljs-number">0.75</span><span class="hljs-attr">hipe_compile</span> = ture<span class="hljs-attr">queue_index_max_journal_entries</span> = <span class="hljs-number">262144</span><span class="hljs-attr">frame_max</span> = <span class="hljs-number">128</span>KB<span class="hljs-attr">delegate_count</span> = <span class="hljs-number">16</span><span class="hljs-attr">msg_store_file_size_limit</span> = <span class="hljs-number">16</span>MB</code></pre><p>kafka:</p><pre><code class="hljs ini"><span class="hljs-attr">broker.id</span>=<span class="hljs-number">34</span><span class="hljs-attr">listeners</span>=PLAINTEXT://<span class="hljs-number">10.193</span>.<span class="hljs-number">196.34</span>:<span class="hljs-number">9092</span><span class="hljs-attr">advertised.listeners</span>=PLAINTEXT://<span class="hljs-number">10.193</span>.<span class="hljs-number">196.34</span>:<span class="hljs-number">9092</span><span class="hljs-attr">socket.send.buffer.bytes</span>=<span class="hljs-number">102400</span><span class="hljs-attr">socket.receive.buffer.bytes</span>=<span class="hljs-number">102400</span><span class="hljs-attr">socket.request.max.bytes</span>=<span class="hljs-number">104857600</span><span class="hljs-attr">log.dirs</span>=/home/finance/Data/kafka<span class="hljs-attr">num.partitions</span>=<span class="hljs-number">9</span><span class="hljs-attr">offsets.topic.replication.factor</span>=<span class="hljs-number">1</span><span class="hljs-attr">transaction.state.log.replication.factor</span>=<span class="hljs-number">1</span><span class="hljs-attr">transaction.state.log.min.isr</span>=<span class="hljs-number">1</span><span class="hljs-comment">#</span><span class="hljs-attr">log.segment.bytes</span>=<span class="hljs-number">1073741824</span><span class="hljs-attr">log.retention.check.interval.ms</span>=<span class="hljs-number">300000</span><span class="hljs-attr">zookeeper.connect</span>=<span class="hljs-number">10.193</span>.<span class="hljs-number">196.32</span>:<span class="hljs-number">2181</span>,<span class="hljs-number">10.193</span>.<span class="hljs-number">196.33</span>:<span class="hljs-number">2181</span>,<span class="hljs-number">10.193</span>.<span class="hljs-number">196.34</span>:<span class="hljs-number">2181</span>/kafka<span class="hljs-attr">group.initial.rebalance.delay.ms</span>=<span class="hljs-number">0</span><span class="hljs-comment">#</span><span class="hljs-attr">zookeeper.connection.timeout.ms</span>=<span class="hljs-number">10000</span><span class="hljs-comment">#</span><span class="hljs-attr">log.retention.hours</span>=<span class="hljs-number">24</span><span class="hljs-attr">offsets.retention.minutes</span>=<span class="hljs-number">1440</span><span class="hljs-comment">#</span><span class="hljs-attr">auto.create.topics.enable</span>=<span class="hljs-literal">false</span><span class="hljs-attr">delete.topic.enable</span>=<span class="hljs-literal">true</span><span class="hljs-attr">auto.leader.rebalance.enable</span>=<span class="hljs-literal">true</span><span class="hljs-comment">#</span><span class="hljs-attr">num.network.threads</span>=<span class="hljs-number">3</span><span class="hljs-attr">num.io.threads</span>=<span class="hljs-number">8</span><span class="hljs-attr">num.recovery.threads.per.data.dir</span>=<span class="hljs-number">6</span><span class="hljs-attr">num.replica.fetchers</span>=<span class="hljs-number">3</span><span class="hljs-attr">log.cleaner.threads</span>=<span class="hljs-number">3</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>DevOps</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Elasticsearch</tag>
      
      <tag>RabbitMQ</tag>
      
      <tag>Kafka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>APM - Pinpoint笔记</title>
    <link href="/2019/05/09/pinpoint-deployment/"/>
    <url>/2019/05/09/pinpoint-deployment/</url>
    
    <content type="html"><![CDATA[<h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><ul><li><a href="https://naver.github.io/pinpoint/installation.html" target="_blank" rel="noopener">https://naver.github.io/pinpoint/installation.html</a></li><li><a href="https://naver.github.io/pinpoint/faq.html" target="_blank" rel="noopener">https://naver.github.io/pinpoint/faq.html</a></li></ul><a id="more"></a><h3 id="组件说明"><a href="#组件说明" class="headerlink" title="组件说明"></a>组件说明</h3><table><thead><tr><th><strong>HBase</strong></th><th>for storage</th></tr></thead><tbody><tr><td><strong>Pinpoint Collector</strong></td><td>Pinpoint core</td></tr><tr><td><strong>Pinpoint Web</strong></td><td>Web UI</td></tr><tr><td><strong>Pinpoint Agent</strong></td><td>attached to a java application for profiling</td></tr></tbody></table><h3 id="hbase脚本"><a href="#hbase脚本" class="headerlink" title="hbase脚本"></a>hbase脚本</h3><pre><code class="hljs bash">https://github.com/naver/pinpoint/tree/master/hbase/scripts</code></pre><h3 id="War包部署方式"><a href="#War包部署方式" class="headerlink" title="War包部署方式"></a>War包部署方式</h3><pre><code class="hljs bash">curl -LO https://archive.apache.org/dist/hbase/1.2.7/hbase-1.2.7-bin.tar.gz下载pinpoint组件war/jar包https://github.com/naver/pinpoint/releaseshttps://raw.githubusercontent.com/naver/pinpoint/master/hbase/scripts/hbase-create.hbasebin/hbase shell ./hbase-create.hbase</code></pre><h3 id="Docker部署方式"><a href="#Docker部署方式" class="headerlink" title="Docker部署方式"></a>Docker部署方式</h3><pre><code class="hljs bash">https://github.com/naver/pinpoint-dockerdocker-compose pulldocker-compose up -ddocker-compose ps</code></pre><h3 id="Agent配置"><a href="#Agent配置" class="headerlink" title="Agent配置"></a>Agent配置</h3><pre><code class="hljs bash">https://github.com/naver/pinpoint/blob/master/doc/installation.md<span class="hljs-comment">#profiles-2</span>vim <span class="hljs-variable">$Agent_Home</span>/pinpoint.configpinpoint.profiler.profiles.active=release<span class="hljs-comment"># 替换全部127.0.0.1为你自己的pinpoint server地址</span>vim profiles/release/pinpoint-env.config <span class="hljs-comment"># release对应上面配置文件pinpoint.profiler.profiles.active=release</span><span class="hljs-comment"># 替换全部127.0.0.1为你自己的pinpoint server地址</span>profiler.sampling.rate=&lt;your-want&gt; <span class="hljs-comment"># agent采样频率</span></code></pre><h3 id="应用配置"><a href="#应用配置" class="headerlink" title="应用配置"></a>应用配置</h3><pre><code class="hljs bash">-javaagent:<span class="hljs-variable">$&#123;pinpointPath&#125;</span>/pinpoint-bootstrap-2.0.2.jar-Dpinpoint.applicationName=&lt; 应用名, length&lt;24 &gt;-Dpinpoint.agentId=&lt; 全局唯一, length&lt;24 &gt;</code></pre><h3 id="填坑"><a href="#填坑" class="headerlink" title="填坑"></a>填坑</h3><ul><li>服务名 &amp; AgentID长度不能超过24 <code>https://github.com/naver/pinpoint/issues/3504</code></li><li>AgentID全局唯一</li></ul><h3 id="删除AgentID-APP"><a href="#删除AgentID-APP" class="headerlink" title="删除AgentID/APP"></a>删除AgentID/APP</h3><pre><code class="hljs bash">https://naver.github.io/pinpoint/faq.html<span class="hljs-comment">#how-do-i-delete-application-name-andor-agent-id-from-hbase</span></code></pre><h3 id="修改HBase数据保存时间"><a href="#修改HBase数据保存时间" class="headerlink" title="修改HBase数据保存时间"></a>修改HBase数据保存时间</h3><pre><code class="hljs bash"><span class="hljs-comment"># Shortening the TTL values, especially for `AgentStatV2` and `TraceV2`</span>describe <span class="hljs-string">'TraceV2'</span><span class="hljs-built_in">disable</span> <span class="hljs-string">'TraceV2'</span>alter <span class="hljs-string">'TraceV2'</span>, &#123;NAME =&gt; <span class="hljs-string">'S'</span>, TTL =&gt; <span class="hljs-string">'604800'</span>&#125; <span class="hljs-comment"># 7days</span><span class="hljs-built_in">enable</span> <span class="hljs-string">'TraceV2'</span>describe <span class="hljs-string">'TraceV2'</span><span class="hljs-comment"># 业务低峰期major_compact</span>hbase shell &lt; https://github.com/naver/pinpoint/blob/master/hbase/scripts/hbase-major-compact-htable.hbase</code></pre><hr><p>Stay Hungry, Stay Foolish.</p>]]></content>
    
    
    <categories>
      
      <category>DevOps</category>
      
    </categories>
    
    
    <tags>
      
      <tag>APM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Elasticsearch数据迁移</title>
    <link href="/2019/03/24/es-data-migrate/"/>
    <url>/2019/03/24/es-data-migrate/</url>
    
    <content type="html"><![CDATA[<ol><li>_reindex适用场景 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.1/docs-reindex.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/6.1/docs-reindex.html</a><ul><li>同一集群不同索引数据迁移</li><li>不同集群索引数据迁移</li></ul></li><li>动态调整迁移速度</li><li>随时取消任务</li><li>Built-in，无需安装(反例logstash)</li><li>5.x - 7.x版本api均包含以上功能(可做为es数据迁移通用方案)</li><li>_reindex、logstash等都通过scroll\bulk API实现，读写性能无差别</li><li>logstash等三方工具适合blue-green网络不可达的情况下，作为代理迁移数据 (blue - green不通，blue -&gt; logstash -&gt; green代理)</li></ol><a id="more"></a><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>es集群</p><table><thead><tr><th>node</th><th>type</th></tr></thead><tbody><tr><td>10.10.62.20</td><td>-</td></tr><tr><td>10.10.62.21</td><td>-</td></tr><tr><td>10.10.62.22</td><td>-</td></tr><tr><td>10.10.62.80</td><td>hot</td></tr><tr><td>10.10.62.81</td><td>hot</td></tr><tr><td>10.10.62.82</td><td>hot</td></tr></tbody></table><p>索引<code>message_qq_201812</code>在节点<code>10.10.62.20, 10.10.62.21, 10.10.62.22</code>, 计划迁移到节点<code>10.10.62.80, 10.10.62.81, 10.10.62.82</code>的<code>message_wechat_201812</code>索引, 观察无异常后下线节点<code>10.10.62.20, 10.10.62.21, 10.10.62.22</code></p><h3 id="1、创建index模板"><a href="#1、创建index模板" class="headerlink" title="1、创建index模板"></a>1、创建index模板</h3><p><strong>消息平台已存在index模板</strong></p><pre><code class="hljs bash">curl -XPUT http://&lt;es-client&gt;:9200/_template/message_wechat_template -H <span class="hljs-string">'Content-Type: application/json'</span> -d <span class="hljs-string">'&#123;</span><span class="hljs-string">  "order": 0,</span><span class="hljs-string">  "index_patterns": [</span><span class="hljs-string">    "message_wechat*"</span><span class="hljs-string">  ],</span><span class="hljs-string">  "settings": &#123;</span><span class="hljs-string">    "index": &#123;</span><span class="hljs-string">      "number_of_shards": "3",</span><span class="hljs-string">      "number_of_replicas": "1",</span><span class="hljs-string">      "routing": &#123;</span><span class="hljs-string">        "allocation": &#123;</span><span class="hljs-string">          "require": &#123;</span><span class="hljs-string">            "box_type": "hot"</span><span class="hljs-string">          &#125;</span><span class="hljs-string">        &#125;</span><span class="hljs-string">      &#125;</span><span class="hljs-string">    &#125;</span><span class="hljs-string">  &#125;,</span><span class="hljs-string">  "mappings": &#123;&#125;,</span><span class="hljs-string">  "aliases": &#123;</span><span class="hljs-string">    "message_wechat": &#123;&#125;</span><span class="hljs-string">  &#125;</span><span class="hljs-string">&#125;'</span></code></pre><h3 id="2、-创建index"><a href="#2、-创建index" class="headerlink" title="2、 创建index"></a>2、 创建index</h3><pre><code class="hljs bash">curl -XPUT http://&lt;es-client&gt;:9200/message_wechat_201812curl http://&lt;es-client&gt;:9200/_cat/shards/message_wechat_201812 <span class="hljs-comment"># 确认shards在目标主机</span></code></pre><h3 id="3、执行迁移"><a href="#3、执行迁移" class="headerlink" title="3、执行迁移"></a>3、执行迁移</h3><p><code>message_qq_201812</code> -&gt; <code>message_wechat_201812</code></p><pre><code class="hljs bash">curl -XPOST http: //&lt;es-client&gt;:9200/_reindex?wait_for_completion=<span class="hljs-literal">false</span> -H <span class="hljs-string">'Content-Type: application/json'</span> -d <span class="hljs-string">'&#123;</span><span class="hljs-string">  "source": &#123;</span><span class="hljs-string">    "index": "message_qq_201812",</span><span class="hljs-string">    "size": 1000</span><span class="hljs-string">  &#125;,</span><span class="hljs-string">  "dest": &#123;</span><span class="hljs-string">    "index": "message_wechat_201812"</span><span class="hljs-string">  &#125;</span><span class="hljs-string">&#125;'</span></code></pre><blockquote><p><strong>记录taskId</strong> <code>{&quot;task&quot;:&quot;YoYJXpjnQICRtr5EErLZQA:3208554&quot;}</code></p></blockquote><h3 id="4、动态调整速度"><a href="#4、动态调整速度" class="headerlink" title="4、动态调整速度"></a>4、动态调整速度</h3><pre><code class="hljs bash">curl -XPOST http://&lt;es-client&gt;:9200/_reindex/YoYJXpjnQICRtr5EErLZQA:3208554/_rethrottle?requests_per_second=1000</code></pre><h3 id="5、取消任务"><a href="#5、取消任务" class="headerlink" title="5、取消任务"></a>5、取消任务</h3><p><code>curl -XPOST http://&lt;es-client&gt;:9200/_tasks/YoYJXpjnQICRtr5EErLZQA:3208554/_cancel</code></p><h3 id="6、删除老index"><a href="#6、删除老index" class="headerlink" title="6、删除老index"></a>6、删除老index</h3><blockquote><p>待新索引验证无误后</p></blockquote><p><code>curl -XDELETE http://&lt;es-client&gt;:9200/message_qq_201812</code></p><h3 id="7、-task索引"><a href="#7、-task索引" class="headerlink" title="7、.task索引"></a>7、.task索引</h3><p>手动创建_reindex等task后，es会自动创建一个.task的index</p><ol><li>删除.task，如序6</li><li>让es自动迁移.tasks, 如序8</li></ol><h3 id="8、逐台下线老节点"><a href="#8、逐台下线老节点" class="headerlink" title="8、逐台下线老节点"></a>8、逐台下线老节点</h3><p><strong>注意: 逐台平滑下线</strong></p>]]></content>
    
    
    <categories>
      
      <category>Elastic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Elasticsearch</tag>
      
      <tag>Logstash</tag>
      
      <tag>reindex</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>那些年，拉取Docker镜像犯的困</title>
    <link href="/2018/09/15/pull-docker-images/"/>
    <url>/2018/09/15/pull-docker-images/</url>
    
    <content type="html"><![CDATA[<p>曾多少次，你在拉取Docker镜像时出现Timeout<br>曾几何时，你想在没有Docker客户端的情况下拉取Docker镜像<br>又有多少回，即使你有梯子也翻不过<code>GCR</code>, <code>Quay</code>等镜像仓库的墙…</p><a id="more"></a><p>以下，我们列举几种拉取镜像的场景并给出解决方法</p><ol><li>安装K8S集群时</li><li>Docker客户端拉取时</li><li>无需Docker客户端拉取镜像</li><li>翻越<code>Quay</code>等镜像仓库的墙</li></ol><h3 id="1-K8S"><a href="#1-K8S" class="headerlink" title="1. K8S"></a>1. K8S</h3><blockquote><p>registry.aliyuncs.com/google_containers</p></blockquote><pre><code class="hljs yaml"><span class="hljs-comment">## kubeadm-config.yaml</span><span class="hljs-comment"># kubeadm init --config kubeadm-config.yaml --upload-certs</span><span class="hljs-comment"># kubeadm config print init-defaults</span><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubeadm.k8s.io/v1beta2</span><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterConfiguration</span><span class="hljs-attr">kubernetesVersion:</span> <span class="hljs-string">v1.18.3</span><span class="hljs-attr">controlPlaneEndpoint:</span> <span class="hljs-string">k8s.meitianiot.lo:6443</span><span class="hljs-attr">certificatesDir:</span> <span class="hljs-string">/etc/kubernetes/pki</span><span class="hljs-attr">clusterName:</span> <span class="hljs-string">kubernetes</span><span class="hljs-attr">apiServer:</span>  <span class="hljs-attr">timeoutForControlPlane:</span> <span class="hljs-string">4m0s</span><span class="hljs-attr">controllerManager:</span> <span class="hljs-string">&#123;&#125;</span><span class="hljs-attr">scheduler:</span> <span class="hljs-string">&#123;&#125;</span><span class="hljs-attr">imageRepository:</span> <span class="hljs-string">registry.aliyuncs.com/google_containers</span><span class="hljs-attr">networking:</span>  <span class="hljs-attr">dnsDomain:</span> <span class="hljs-string">cluster.local</span>  <span class="hljs-attr">podSubnet:</span> <span class="hljs-number">172.30</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">/16</span>  <span class="hljs-attr">serviceSubnet:</span> <span class="hljs-number">10.96</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">/12</span><span class="hljs-attr">dns:</span>  <span class="hljs-attr">type:</span> <span class="hljs-string">CoreDNS</span><span class="hljs-attr">etcd:</span>  <span class="hljs-attr">local:</span>    <span class="hljs-attr">dataDir:</span> <span class="hljs-string">/var/lib/etcd</span><span class="hljs-meta">---</span><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubeproxy.config.k8s.io/v1alpha1</span><span class="hljs-attr">kind:</span> <span class="hljs-string">KubeProxyConfiguration</span><span class="hljs-attr">mode:</span> <span class="hljs-string">ipvs</span></code></pre><h3 id="2-Docker镜像加速"><a href="#2-Docker镜像加速" class="headerlink" title="2. Docker镜像加速"></a>2. Docker镜像加速</h3><blockquote><p><a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors" target="_blank" rel="noopener">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></p></blockquote><pre><code class="hljs json">&#123;  <span class="hljs-attr">"registry-mirrors"</span>: [<span class="hljs-string">"https://890une7x.mirror.aliyuncs.com"</span>],  <span class="hljs-attr">"exec-opts"</span>: [<span class="hljs-string">"native.cgroupdriver=systemd"</span>],  <span class="hljs-attr">"log-driver"</span>: <span class="hljs-string">"json-file"</span>,  <span class="hljs-attr">"log-opts"</span>: &#123;    <span class="hljs-attr">"max-size"</span>: <span class="hljs-string">"100m"</span>  &#125;,  <span class="hljs-attr">"storage-driver"</span>: <span class="hljs-string">"overlay2"</span>,  <span class="hljs-attr">"storage-opts"</span>: [    <span class="hljs-string">"overlay2.override_kernel_check=true"</span>  ]&#125;</code></pre><h3 id="3-docker-pull-py"><a href="#3-docker-pull-py" class="headerlink" title="3. docker_pull.py"></a>3. docker_pull.py</h3><blockquote><p>无客户端拉取镜像 <a href="https://github.com/NotGlop/docker-drag" target="_blank" rel="noopener">https://github.com/NotGlop/docker-drag</a><br>以下脚本只是站在巨人的肩膀上，加入了<code>proxies</code>功能，以应对中国局域网。</p></blockquote><pre><code class="hljs python"><span class="hljs-keyword">import</span> functools<span class="hljs-keyword">import</span> gzip<span class="hljs-keyword">import</span> hashlib<span class="hljs-keyword">import</span> json<span class="hljs-keyword">import</span> os<span class="hljs-keyword">import</span> shutil<span class="hljs-keyword">import</span> sys<span class="hljs-keyword">import</span> tarfile<span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span> BytesIO<span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> urllib3proxies = &#123;    <span class="hljs-string">'http'</span>: <span class="hljs-string">'http://127.0.0.1:1081'</span>,    <span class="hljs-string">'https'</span>: <span class="hljs-string">'http://127.0.0.1:1081'</span>&#125;proxy_get = functools.partial(requests.get, proxies=proxies)urllib3.disable_warnings()<span class="hljs-keyword">if</span> len(sys.argv) != <span class="hljs-number">2</span>:    print(<span class="hljs-string">'Usage:\n\tdocker_pull.py [registry/][repository/]image[:tag|@digest]\n'</span>)    exit(<span class="hljs-number">1</span>)<span class="hljs-comment"># Look for the Docker image to download</span>repo = <span class="hljs-string">'library'</span>tag = <span class="hljs-string">'latest'</span>imgparts = sys.argv[<span class="hljs-number">1</span>].split(<span class="hljs-string">'/'</span>)<span class="hljs-keyword">try</span>:    img, tag = imgparts[<span class="hljs-number">-1</span>].split(<span class="hljs-string">'@'</span>)<span class="hljs-keyword">except</span> ValueError:    <span class="hljs-keyword">try</span>:        img, tag = imgparts[<span class="hljs-number">-1</span>].split(<span class="hljs-string">':'</span>)    <span class="hljs-keyword">except</span> ValueError:        img = imgparts[<span class="hljs-number">-1</span>]<span class="hljs-comment"># Docker client doesn't seem to consider the first element as a potential registry unless there is a '.' or ':'</span><span class="hljs-keyword">if</span> len(imgparts) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> (<span class="hljs-string">'.'</span> <span class="hljs-keyword">in</span> imgparts[<span class="hljs-number">0</span>] <span class="hljs-keyword">or</span> <span class="hljs-string">':'</span> <span class="hljs-keyword">in</span> imgparts[<span class="hljs-number">0</span>]):    registry = imgparts[<span class="hljs-number">0</span>]    repo = <span class="hljs-string">'/'</span>.join(imgparts[<span class="hljs-number">1</span>:<span class="hljs-number">-1</span>])<span class="hljs-keyword">else</span>:    registry = <span class="hljs-string">'registry-1.docker.io'</span>    <span class="hljs-keyword">if</span> len(imgparts[:<span class="hljs-number">-1</span>]) != <span class="hljs-number">0</span>:        repo = <span class="hljs-string">'/'</span>.join(imgparts[:<span class="hljs-number">-1</span>])    <span class="hljs-keyword">else</span>:        repo = <span class="hljs-string">'library'</span>repository = <span class="hljs-string">'&#123;&#125;/&#123;&#125;'</span>.format(repo, img)<span class="hljs-comment"># Get Docker authentication endpoint when it is required</span>auth_url = <span class="hljs-string">'https://auth.docker.io/token'</span>reg_service = <span class="hljs-string">'registry.docker.io'</span>resp = proxy_get(<span class="hljs-string">'https://&#123;&#125;/v2/'</span>.format(registry), verify=<span class="hljs-literal">False</span>)<span class="hljs-keyword">if</span> resp.status_code == <span class="hljs-number">401</span>:    auth_url = resp.headers[<span class="hljs-string">'WWW-Authenticate'</span>].split(<span class="hljs-string">'"'</span>)[<span class="hljs-number">1</span>]    <span class="hljs-keyword">try</span>:        reg_service = resp.headers[<span class="hljs-string">'WWW-Authenticate'</span>].split(<span class="hljs-string">'"'</span>)[<span class="hljs-number">3</span>]    <span class="hljs-keyword">except</span> IndexError:        reg_service = <span class="hljs-string">""</span><span class="hljs-comment"># Get Docker token and fetch manifest v2 (this part is useless for unauthenticated registries like Microsoft)</span>resp = proxy_get(<span class="hljs-string">'&#123;&#125;?service=&#123;&#125;&amp;scope=repository:&#123;&#125;:pull'</span>.format(auth_url, reg_service, repository), verify=<span class="hljs-literal">False</span>)access_token = resp.json()[<span class="hljs-string">'token'</span>]auth_head = &#123;<span class="hljs-string">'Authorization'</span>: <span class="hljs-string">'Bearer '</span> + access_token,             <span class="hljs-string">'Accept'</span>: <span class="hljs-string">'application/vnd.docker.distribution.manifest.v2+json'</span>&#125;<span class="hljs-comment"># Get image layer digests</span>resp = proxy_get(<span class="hljs-string">'https://&#123;&#125;/v2/&#123;&#125;/manifests/&#123;&#125;'</span>.format(registry, repository, tag), headers=auth_head, verify=<span class="hljs-literal">False</span>)<span class="hljs-keyword">if</span> (resp.status_code != <span class="hljs-number">200</span>):    print(<span class="hljs-string">'[-] Cannot fetch manifest for &#123;&#125; [HTTP &#123;&#125;]'</span>.format(repository, resp.status_code))    print(resp.content)    auth_head = &#123;<span class="hljs-string">'Authorization'</span>: <span class="hljs-string">'Bearer '</span> + access_token,                 <span class="hljs-string">'Accept'</span>: <span class="hljs-string">'application/vnd.docker.distribution.manifest.list.v2+json'</span>&#125;    resp = proxy_get(<span class="hljs-string">'https://&#123;&#125;/v2/&#123;&#125;/manifests/&#123;&#125;'</span>.format(registry, repository, tag), headers=auth_head,                     verify=<span class="hljs-literal">False</span>)    <span class="hljs-keyword">if</span> (resp.status_code == <span class="hljs-number">200</span>):        print(<span class="hljs-string">'[+] Manifests found for this tag (use the @digest format to pull the corresponding image):'</span>)        manifests = resp.json()[<span class="hljs-string">'manifests'</span>]        <span class="hljs-keyword">for</span> manifest <span class="hljs-keyword">in</span> manifests:            <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> manifest[<span class="hljs-string">"platform"</span>].items():                sys.stdout.write(<span class="hljs-string">'&#123;&#125;: &#123;&#125;, '</span>.format(key, value))            print(<span class="hljs-string">'digest: &#123;&#125;'</span>.format(manifest[<span class="hljs-string">"digest"</span>]))    exit(<span class="hljs-number">1</span>)layers = resp.json()[<span class="hljs-string">'layers'</span>]<span class="hljs-comment"># Create tmp folder that will hold the image</span>imgdir = <span class="hljs-string">'tmp_&#123;&#125;_&#123;&#125;'</span>.format(img, tag.replace(<span class="hljs-string">':'</span>, <span class="hljs-string">'@'</span>))os.mkdir(imgdir)print(<span class="hljs-string">'Creating image structure in: '</span> + imgdir)config = resp.json()[<span class="hljs-string">'config'</span>][<span class="hljs-string">'digest'</span>]confresp = proxy_get(<span class="hljs-string">'https://&#123;&#125;/v2/&#123;&#125;/blobs/&#123;&#125;'</span>.format(registry, repository, config), headers=auth_head,                     verify=<span class="hljs-literal">False</span>)file = open(<span class="hljs-string">'&#123;&#125;/&#123;&#125;.json'</span>.format(imgdir, config[<span class="hljs-number">7</span>:]), <span class="hljs-string">'wb'</span>)file.write(confresp.content)file.close()content = [&#123;    <span class="hljs-string">'Config'</span>: config[<span class="hljs-number">7</span>:] + <span class="hljs-string">'.json'</span>,    <span class="hljs-string">'RepoTags'</span>: [],    <span class="hljs-string">'Layers'</span>: []&#125;]<span class="hljs-keyword">if</span> len(imgparts[:<span class="hljs-number">-1</span>]) != <span class="hljs-number">0</span>:    content[<span class="hljs-number">0</span>][<span class="hljs-string">'RepoTags'</span>].append(<span class="hljs-string">'/'</span>.join(imgparts[:<span class="hljs-number">-1</span>]) + <span class="hljs-string">'/'</span> + img + <span class="hljs-string">':'</span> + tag)<span class="hljs-keyword">else</span>:    content[<span class="hljs-number">0</span>][<span class="hljs-string">'RepoTags'</span>].append(img + <span class="hljs-string">':'</span> + tag)empty_json = <span class="hljs-string">'&#123;"created":"1970-01-01T00:00:00Z","container_config":&#123;"Hostname":"","Domainname":"","User":"","AttachStdin":false, \</span><span class="hljs-string">"AttachStdout":false,"AttachStderr":false,"Tty":false,"OpenStdin":false, "StdinOnce":false,"Env":null,"Cmd":null,"Image":"", \</span><span class="hljs-string">"Volumes":null,"WorkingDir":"","Entrypoint":null,"OnBuild":null,"Labels":null&#125;&#125;'</span><span class="hljs-comment"># Build layer folders</span>parentid = <span class="hljs-string">''</span><span class="hljs-keyword">for</span> layer <span class="hljs-keyword">in</span> layers:    ublob = layer[<span class="hljs-string">'digest'</span>]    <span class="hljs-comment"># <span class="hljs-doctag">FIXME:</span> Creating fake layer ID. Don't know how Docker generates it</span>    fake_layerid = hashlib.sha256((parentid + <span class="hljs-string">'\n'</span> + ublob + <span class="hljs-string">'\n'</span>).encode(<span class="hljs-string">'utf-8'</span>)).hexdigest()    layerdir = imgdir + <span class="hljs-string">'/'</span> + fake_layerid    os.mkdir(layerdir)    <span class="hljs-comment"># Creating VERSION file</span>    file = open(layerdir + <span class="hljs-string">'/VERSION'</span>, <span class="hljs-string">'w'</span>)    file.write(<span class="hljs-string">'1.0'</span>)    file.close()    <span class="hljs-comment"># Creating layer.tar file</span>    sys.stdout.write(ublob[<span class="hljs-number">7</span>:<span class="hljs-number">19</span>] + <span class="hljs-string">': Downloading...'</span>)    sys.stdout.flush()    bresp = proxy_get(<span class="hljs-string">'https://&#123;&#125;/v2/&#123;&#125;/blobs/&#123;&#125;'</span>.format(registry, repository, ublob), headers=auth_head,                      verify=<span class="hljs-literal">False</span>)    <span class="hljs-keyword">if</span> (bresp.status_code != <span class="hljs-number">200</span>):        bresp = proxy_get(layer[<span class="hljs-string">'urls'</span>][<span class="hljs-number">0</span>], headers=auth_head, verify=<span class="hljs-literal">False</span>)        <span class="hljs-keyword">if</span> (bresp.status_code != <span class="hljs-number">200</span>):            print(<span class="hljs-string">'\rERROR: Cannot download layer &#123;&#125; [HTTP &#123;&#125;]'</span>.format(ublob[<span class="hljs-number">7</span>:<span class="hljs-number">19</span>], bresp.status_code,                                                                       bresp.headers[<span class="hljs-string">'Content-Length'</span>]))            print(bresp.content)            exit(<span class="hljs-number">1</span>)    print(<span class="hljs-string">"\r&#123;&#125;: Pull complete [&#123;&#125;]"</span>.format(ublob[<span class="hljs-number">7</span>:<span class="hljs-number">19</span>], bresp.headers[<span class="hljs-string">'Content-Length'</span>]))    content[<span class="hljs-number">0</span>][<span class="hljs-string">'Layers'</span>].append(fake_layerid + <span class="hljs-string">'/layer.tar'</span>)    file = open(layerdir + <span class="hljs-string">'/layer.tar'</span>, <span class="hljs-string">"wb"</span>)    mybuff = BytesIO(bresp.content)    unzLayer = gzip.GzipFile(fileobj=mybuff)    file.write(unzLayer.read())    unzLayer.close()    file.close()    <span class="hljs-comment"># Creating json file</span>    file = open(layerdir + <span class="hljs-string">'/json'</span>, <span class="hljs-string">'w'</span>)    <span class="hljs-comment"># last layer = config manifest - history - rootfs</span>    <span class="hljs-keyword">if</span> layers[<span class="hljs-number">-1</span>][<span class="hljs-string">'digest'</span>] == layer[<span class="hljs-string">'digest'</span>]:        <span class="hljs-comment"># <span class="hljs-doctag">FIXME:</span> json.loads() automatically converts to unicode, thus decoding values whereas Docker doesn't</span>        json_obj = json.loads(confresp.content)        <span class="hljs-keyword">del</span> json_obj[<span class="hljs-string">'history'</span>]        <span class="hljs-keyword">del</span> json_obj[<span class="hljs-string">'rootfs'</span>]    <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># other layers json are empty</span>        json_obj = json.loads(empty_json)    json_obj[<span class="hljs-string">'id'</span>] = fake_layerid    <span class="hljs-keyword">if</span> parentid:        json_obj[<span class="hljs-string">'parent'</span>] = parentid    parentid = json_obj[<span class="hljs-string">'id'</span>]    file.write(json.dumps(json_obj))    file.close()file = open(imgdir + <span class="hljs-string">'/manifest.json'</span>, <span class="hljs-string">'w'</span>)file.write(json.dumps(content))file.close()<span class="hljs-keyword">if</span> len(imgparts[:<span class="hljs-number">-1</span>]) != <span class="hljs-number">0</span>:    content = &#123;<span class="hljs-string">'/'</span>.join(imgparts[:<span class="hljs-number">-1</span>]) + <span class="hljs-string">'/'</span> + img: &#123;tag: fake_layerid&#125;&#125;<span class="hljs-keyword">else</span>:  <span class="hljs-comment"># when pulling only an img (without repo and registry)</span>    content = &#123;img: &#123;tag: fake_layerid&#125;&#125;file = open(imgdir + <span class="hljs-string">'/repositories'</span>, <span class="hljs-string">'w'</span>)file.write(json.dumps(content))file.close()<span class="hljs-comment"># Create image tar and clean tmp folder</span>docker_tar = repo.replace(<span class="hljs-string">'/'</span>, <span class="hljs-string">'_'</span>) + <span class="hljs-string">'_'</span> + img + <span class="hljs-string">'.tar'</span>tar = tarfile.open(docker_tar, <span class="hljs-string">"w"</span>)tar.add(imgdir, arcname=os.path.sep)tar.close()shutil.rmtree(imgdir)print(<span class="hljs-string">'Docker image pulled: '</span> + docker_tar)print(<span class="hljs-string">'Compress the tar file with transport: tar -zcf '</span> + docker_tar + <span class="hljs-string">'.gz'</span> + docker_tar)print(<span class="hljs-string">'Load the image: docker load -i '</span> + docker_tar)</code></pre><h3 id="4-Quay镜像"><a href="#4-Quay镜像" class="headerlink" title="4. Quay镜像"></a>4. Quay镜像</h3><blockquote><p>如：quay.mirrors.ustc.edu.cn</p></blockquote><pre><code class="hljs bash">sed -i -e <span class="hljs-string">'s_quay.io_quay.mirrors.ustc.edu.cn_'</span> manifests/*.yaml manifests/setup/*.yaml <span class="hljs-comment"># quay.mirrors.ustc.edu.cn源</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>DevOps</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>DockerHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Springboot Logback自定义日志</title>
    <link href="/2018/07/28/springboot-logging-configuration/"/>
    <url>/2018/07/28/springboot-logging-configuration/</url>
    
    <content type="html"><![CDATA[<p>本文展示两种日志文件命名格式：<br>格式一：</p><pre><code class="hljs css"><span class="hljs-selector-tag">Boer-Office</span><span class="hljs-selector-class">.springboot-produce</span><span class="hljs-selector-class">.20180728</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.log</span><span class="hljs-selector-tag">Boer-Office</span><span class="hljs-selector-class">.springboot-produce</span><span class="hljs-selector-class">.20180728</span><span class="hljs-selector-class">.1</span><span class="hljs-selector-class">.log</span><span class="hljs-selector-tag">Boer-Office</span><span class="hljs-selector-class">.springboot-produce</span><span class="hljs-selector-class">.20180728</span><span class="hljs-selector-class">.2</span><span class="hljs-selector-class">.log</span> &lt;<span class="hljs-selector-tag">-</span> 当前<span class="hljs-selector-tag">active</span>日志</code></pre><p>格式二：</p><pre><code class="hljs css"><span class="hljs-selector-tag">Boer-Office</span><span class="hljs-selector-class">.springboot-produce</span><span class="hljs-selector-class">.20180728</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.log</span><span class="hljs-selector-tag">Boer-Office</span><span class="hljs-selector-class">.springboot-produce</span><span class="hljs-selector-class">.20180728</span><span class="hljs-selector-class">.1</span><span class="hljs-selector-class">.log</span><span class="hljs-selector-tag">Boer-Office</span><span class="hljs-selector-class">.springboot-produce</span><span class="hljs-selector-class">.log</span> &lt;<span class="hljs-selector-tag">-</span> 当前<span class="hljs-selector-tag">active</span>日志</code></pre><p>一般根据日志文件的备份脚本会这么写：</p><blockquote><p>伪代码如下：$(date -d “-1 day” +%Y%m%d)</p></blockquote><p><code>crontab - rsync: tar -zcf Boer-Office.springboot-produce.$(date -d &quot;-1 day&quot; +%Y%m%d).tgz Boer-Office.springboot-produce.$(date -d &quot;-1 day&quot; +%Y%m%d).*.log</code></p><p>简单、高效！</p><p>基于此脚本，格式一不会有问题，格式二在传统虚拟机的部署方式下也不会有问题，但是在K8S的<code>deployment</code>部署方式下就会存在问题：考虑一下，假设当前active日志是<code>Boer-Office.springboot-produce.log</code>，这时由于某种原因服务挂掉，kube-apiserver, kube-controller配合kube-scheduler将应用pod重新调度(有可能会调度到其他node上)，此时当前active日志<code>Boer-Office.springboot-produce.log</code>并不会归档为<code>Boer-Office.springboot-produce.20180728.x.log</code>的格式，所以当备份脚本运行的时候<code>Boer-Office.springboot-produce.log</code>文件的日志就丢失了。<br>运维又背锅啦…</p><a id="more"></a><h3 id="1、Springboot配置"><a href="#1、Springboot配置" class="headerlink" title="1、Springboot配置"></a>1、Springboot配置</h3><pre><code class="hljs yaml"><span class="hljs-attr">logging:</span>  <span class="hljs-attr">config:</span> <span class="hljs-string">classpath:logback-spring.xml</span>  <span class="hljs-comment"># config: classpath:logback-$&#123;spring.profiles.active&#125;.xml</span>  <span class="hljs-comment"># file:</span>  <span class="hljs-comment">#   max-size: 10KB</span>  <span class="hljs-comment">#   max-history: 7</span>  <span class="hljs-comment">#   path: logs</span>  <span class="hljs-comment">#   name: logs/$&#123;HOSTNAME&#125;.$&#123;spring.application.name&#125;.log</span>  <span class="hljs-comment"># pattern:</span>  <span class="hljs-comment">#   rolling-file-name: "logs/$&#123;HOSTNAME&#125;.$&#123;spring.application.name&#125;.%d&#123;yyyyMMdd&#125;.%i.log"</span></code></pre><h3 id="2、Custom-Log-Configuration"><a href="#2、Custom-Log-Configuration" class="headerlink" title="2、Custom Log Configuration"></a>2、Custom Log Configuration</h3><blockquote><p>src/main/resources/logback-spring.xml  即：classpath目录</p></blockquote><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">conversionRule</span> <span class="hljs-attr">conversionWord</span>=<span class="hljs-string">"clr"</span> <span class="hljs-attr">converterClass</span>=<span class="hljs-string">"org.springframework.boot.logging.logback.ColorConverter"</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">conversionRule</span> <span class="hljs-attr">conversionWord</span>=<span class="hljs-string">"wex"</span></span><span class="hljs-tag">                  <span class="hljs-attr">converterClass</span>=<span class="hljs-string">"org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">conversionRule</span> <span class="hljs-attr">conversionWord</span>=<span class="hljs-string">"wEx"</span></span><span class="hljs-tag">                  <span class="hljs-attr">converterClass</span>=<span class="hljs-string">"org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"CONSOLE_LOG_PATTERN"</span></span><span class="hljs-tag">            <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;CONSOLE_LOG_PATTERN:-%clr(%d&#123;$&#123;LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS&#125;&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;) %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(---)&#123;faint&#125; %clr([%15.15t])&#123;faint&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125; %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;"</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"FILE_LOG_PATTERN"</span></span><span class="hljs-tag">            <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;FILE_LOG_PATTERN:-%d&#123;$&#123;LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS&#125;&#125; $&#123;LOG_LEVEL_PATTERN:-%5p&#125; $&#123;PID:- &#125; --- [%t] %-40.40logger&#123;39&#125; : %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;"</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"LOG_FILE"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;LOG_FILE:-$&#123;LOG_PATH:-$&#123;LOG_TEMP:-$&#123;java.io.tmpdir:-/tmp&#125;&#125;&#125;/spring.log&#125;"</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"org.apache.catalina.startup.DigesterFactory"</span> <span class="hljs-attr">level</span>=<span class="hljs-string">"ERROR"</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"org.apache.catalina.util.LifecycleBase"</span> <span class="hljs-attr">level</span>=<span class="hljs-string">"ERROR"</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"org.apache.coyote.http11.Http11NioProtocol"</span> <span class="hljs-attr">level</span>=<span class="hljs-string">"WARN"</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"org.apache.sshd.common.util.SecurityUtils"</span> <span class="hljs-attr">level</span>=<span class="hljs-string">"WARN"</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"org.apache.tomcat.util.net.NioSelectorPool"</span> <span class="hljs-attr">level</span>=<span class="hljs-string">"WARN"</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"org.eclipse.jetty.util.component.AbstractLifeCycle"</span> <span class="hljs-attr">level</span>=<span class="hljs-string">"ERROR"</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"org.hibernate.validator.internal.util.Version"</span> <span class="hljs-attr">level</span>=<span class="hljs-string">"WARN"</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"org.springframework.boot.actuate.endpoint.jmx"</span> <span class="hljs-attr">level</span>=<span class="hljs-string">"WARN"</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"FILE"</span></span><span class="hljs-tag">            <span class="hljs-attr">class</span>=<span class="hljs-string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span>    <span class="hljs-comment">&lt;!-- &lt;file&gt;$&#123;LOG_FILE&#125;&lt;/file&gt; --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy"</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">cleanHistoryOnStart</span>&gt;</span>$&#123;LOG_FILE_CLEAN_HISTORY_ON_START:-false&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">cleanHistoryOnStart</span>&gt;</span>      <span class="hljs-comment">&lt;!-- &lt;fileNamePattern&gt;$&#123;ROLLING_FILE_NAME_PATTERN:-$&#123;LOG_FILE&#125;.%d&#123;yyyy-MM-dd&#125;.%i.gz&#125;&lt;/fileNamePattern&gt; --&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>logs/$&#123;HOSTNAME&#125;.$&#123;APPNAME&#125;.%d&#123;yyyyMMdd&#125;.%i.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>$&#123;LOG_FILE_MAX_SIZE:-1KB&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>$&#123;LOG_FILE_MAX_HISTORY:-7&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">totalSizeCap</span>&gt;</span>$&#123;LOG_FILE_TOTAL_SIZE_CAP:-0&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">totalSizeCap</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"CONSOLE"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">"INFO"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"CONSOLE"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"FILE"</span>/&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre><h3 id="3、Ref"><a href="#3、Ref" class="headerlink" title="3、Ref"></a>3、Ref</h3><ul><li><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot/src/main/resources/org/springframework/boot/logging/logback" target="_blank" rel="noopener">https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot/src/main/resources/org/springframework/boot/logging/logback</a></li><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-logging" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-logging</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>DevOps</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>SpringBoot</tag>
      
      <tag>Log4J2</tag>
      
      <tag>Logback</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java分析工具</title>
    <link href="/2018/06/24/jdk-analyze-tools/"/>
    <url>/2018/06/24/jdk-analyze-tools/</url>
    
    <content type="html"><![CDATA[<ol><li>jps:查看本机的Java中进程信息。</li><li>jstack:打印线程的栈信息,制作线程Dump。</li><li>jmap:打印内存映射,制作堆Dump。</li><li>jstat:性能监控工具。</li><li>jhat:内存分析工具。</li><li>jconsole:简易的可视化控制台。</li><li>jvisualvm:功能强大的控制台。</li></ol><a id="more"></a><pre><code class="hljs bash">jps -ltop -Hp 14583<span class="hljs-built_in">printf</span> <span class="hljs-string">"%x\n"</span> 14619391b391a39193918su - meisappjstack pid | egrep -A50 391[ab89]jstat -gcutil 14583 2000 10jmap -dump:format=b,file=heapDump.hprof 14583jhat heapDump.hprof-XX:+HeapDumpOnOutOfMemoryError</code></pre><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://www.hollischuang.com/archives/308" target="_blank" rel="noopener">https://www.hollischuang.com/archives/308</a></p>]]></content>
    
    
    <categories>
      
      <category>DevOps</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JDK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快速文件共享分发的几个方式</title>
    <link href="/2018/03/29/quick-file-share/"/>
    <url>/2018/03/29/quick-file-share/</url>
    
    <content type="html"><![CDATA[<p>在办公环境下和同事之间互传文件是再正常不过的需求了，但当微信、企业微信等工具文件传输功能被限制的时候，问题就变的棘手。<br>下面分享几个小方法来互传分享文件。</p><a id="more"></a><h3 id="1、FileZilla"><a href="#1、FileZilla" class="headerlink" title="1、FileZilla"></a>1、FileZilla</h3><p>传统FTP方式，推荐FileZilla工具，既有服务端(Windows only)，又有客户端(All platforms)。</p><h3 id="2、Python"><a href="#2、Python" class="headerlink" title="2、Python"></a>2、Python</h3><p>注意python2和python3不同的模块，默认监听在<code>Serving HTTP on 0.0.0.0 port 8000</code></p><h5 id="python2"><a href="#python2" class="headerlink" title="python2"></a>python2</h5><p><code>python -m SimpleHTTPServer</code></p><h5 id="python3"><a href="#python3" class="headerlink" title="python3"></a>python3</h5><p><code>python -m http.server</code></p><h3 id="3、Golang"><a href="#3、Golang" class="headerlink" title="3、Golang"></a>3、Golang</h3><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> (<span class="hljs-string">"flag"</span><span class="hljs-string">"fmt"</span><span class="hljs-string">"net/http"</span>)<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<span class="hljs-keyword">var</span> d = flag.String(<span class="hljs-string">"d"</span>, <span class="hljs-string">"."</span>, <span class="hljs-string">"指定需要代理的文件目录"</span>)flag.Parse()h := http.FileServer(http.Dir(*d))fmt.Println(<span class="hljs-string">"Serving HTTP on 0.0.0.0 port 10924 (http://0.0.0.0:10924/) ..."</span>)http.ListenAndServe(<span class="hljs-string">":10924"</span>, h)&#125;</code></pre><blockquote><p>使用：</p></blockquote><ol><li>Build: <code>go build ghttp.go</code></li><li>Help: <code>./ghttp.exe -h</code></li><li>Demo: <code>./ghttp.exe -d E:/workspaces/daily</code></li></ol>]]></content>
    
    
    <categories>
      
      <category>DevOps</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Golang</tag>
      
      <tag>Python</tag>
      
      <tag>FileZilla</tag>
      
      <tag>SimpleHTTPServer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>主机初始化的那些事儿</title>
    <link href="/2018/03/24/srv-initialize/"/>
    <url>/2018/03/24/srv-initialize/</url>
    
    <content type="html"><![CDATA[<p>集群中加入一个主机后，需要做的那些事儿</p><a id="more"></a><h3 id="磁盘挂载"><a href="#磁盘挂载" class="headerlink" title="磁盘挂载"></a>磁盘挂载</h3><pre><code class="hljs bash">parted /dev/vdb mklabel gpt mkpart 1 xfs 1 100%mkfs.xfs /dev/vdb1mkdir /new_disk<span class="hljs-built_in">echo</span> <span class="hljs-string">"UUID=`blkid /dev/vdb1 | awk -F'"</span><span class="hljs-string">' '</span>&#123;<span class="hljs-built_in">print</span> <span class="hljs-variable">$2</span>&#125;<span class="hljs-string">'` /new_disk xfs defaults 1 1" &gt;&gt; /etc/fstab</span><span class="hljs-string">mount -a</span><span class="hljs-string">df -h</span></code></pre><h3 id="内核优化"><a href="#内核优化" class="headerlink" title="内核优化"></a>内核优化</h3><pre><code class="hljs bash"><span class="hljs-comment"># 内核参数优化</span>vim /etc/sysctl.confnet.ipv4.tcp_syncookies = 1net.ipv4.tcp_timestamps = 1net.ipv4.tcp_fin_timeout = 10net.ipv4.tcp_tw_recycle = 0net.ipv4.tcp_tw_reuse = 1net.ipv4.tcp_max_tw_buckets = 8000<span class="hljs-comment"># fs.file-max = 102400000</span>vm.max_map_count = 262144vm.swappiness = 10sysctl –p  <span class="hljs-comment"># 配置生效</span><span class="hljs-comment"># 文件描述符限制</span>vim /etc/security/limits.conf* soft nofile 102400* hard nofile 204800<span class="hljs-built_in">ulimit</span> -Sn<span class="hljs-built_in">ulimit</span> -Hn<span class="hljs-comment"># nproc</span><span class="hljs-comment">## nproc是操作系统级别对每个用户创建的进程数的限制, 在Linux下运行多线程时, 每个线程的实现其实是一个轻量级的进程, 对应的术语是light weight process(LWP)。</span><span class="hljs-comment"># 查看所有用户创建的进程数,使用命令：</span>ps h -Led -o user | sort | uniq -c | sort -n<span class="hljs-comment"># 查看boer用户创建的进程数，使用命令:</span>ps -o nlwp,pid,lwp,args -u boer | sort -nvim /etc/security/limits.d/20-nproc.conf <span class="hljs-comment"># CentOS7</span>*          soft    nproc     65536root       soft    nproc     unlimited<span class="hljs-comment">##</span></code></pre><h3 id="监控、日志Agent"><a href="#监控、日志Agent" class="headerlink" title="监控、日志Agent"></a>监控、日志Agent</h3><ul><li>filebeat</li><li>zabbix/node_exporter</li></ul>]]></content>
    
    
    <categories>
      
      <category>DevOps</category>
      
    </categories>
    
    
    <tags>
      
      <tag>parted</tag>
      
      <tag>kernel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>各种镜像源加速</title>
    <link href="/2018/02/16/mirror-speed/"/>
    <url>/2018/02/16/mirror-speed/</url>
    
    <content type="html"><![CDATA[<p>慢是不能够被接受的</p><a id="more"></a><h3 id="阿里云镜像站"><a href="#阿里云镜像站" class="headerlink" title="阿里云镜像站"></a>阿里云镜像站</h3><p><code>https://developer.aliyun.com/mirror/</code></p><h3 id="python-pip源"><a href="#python-pip源" class="headerlink" title="python pip源"></a>python pip源</h3><pre><code class="hljs bash"><span class="hljs-comment"># python3 编译安装依赖</span>yum install zlib-devel libffi-devel openssl-devel<span class="hljs-comment">## https://pip.pypa.io/en/stable/user_guide/#config-file</span><span class="hljs-comment"># 全局生效</span><span class="hljs-comment"># Like-Unix(Linux)</span>vim /etc/pip.conf<span class="hljs-comment"># macOS</span>vim /Library/Application Support/pip/pip.conf<span class="hljs-comment"># Windows</span>notepad C:\ProgramData\pip\pip.ini<span class="hljs-comment"># https://developer.aliyun.com/mirror/pypi</span><span class="hljs-comment">## 阿里云源</span>[global]index-url = https://mirrors.aliyun.com/pypi/simple/[install]trusted-host=mirrors.aliyun.com</code></pre><h3 id="Go-proxy"><a href="#Go-proxy" class="headerlink" title="Go proxy"></a>Go proxy</h3><pre><code class="hljs bash"><span class="hljs-comment">## Go 1.13 及以上（推荐）</span>go env -w GO111MODULE=ongo env -w GOPROXY=https://goproxy.cn,direct<span class="hljs-comment"># go env -w GOPROXY=https://mirrors.aliyun.com/goproxy/,direct/</span></code></pre><h3 id="NodeJS-npm源"><a href="#NodeJS-npm源" class="headerlink" title="NodeJS npm源"></a>NodeJS npm源</h3><pre><code class="hljs bash">npm config <span class="hljs-built_in">set</span> registry https://registry.npm.taobao.org<span class="hljs-comment">### </span>npm config <span class="hljs-built_in">set</span> &lt;key&gt; &lt;value&gt;npm config get [&lt;key&gt;]npm config delete &lt;key&gt;npm config list [--json]npm config editnpm <span class="hljs-built_in">set</span> &lt;key&gt; &lt;value&gt;npm get [&lt;key&gt;]</code></pre>]]></content>
    
    
    <categories>
      
      <category>DevOps</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pip</tag>
      
      <tag>goproxy</tag>
      
      <tag>npm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CLOSE_WAIT&amp;TIME_WAIT</title>
    <link href="/2018/01/18/closewait-timewait/"/>
    <url>/2018/01/18/closewait-timewait/</url>
    
    <content type="html"><![CDATA[<p>TCP的几种Wait状态</p><a id="more"></a><h3 id="一图胜千言"><a href="#一图胜千言" class="headerlink" title="一图胜千言"></a>一图胜千言</h3><p><img src="/img/tcp_hello.webp" srcset="/img/loading.gif" alt="tcp_hello"><br><img src="/img/tcp_bye.webp" srcset="/img/loading.gif" alt="tcp_bye"><br><img src="/img/tcp_state.webp" srcset="/img/loading.gif" alt="tcp_state"></p><h3 id="TIME-WAIT-2msl"><a href="#TIME-WAIT-2msl" class="headerlink" title="TIME_WAIT (2msl)"></a>TIME_WAIT (2msl)</h3><ol><li>正常完成四次挥手</li><li>正常等待2msl后释放资源 (TCP机制)</li><li>服务端能做的 (打铁还须自身硬)</li></ol><ul><li>文件描述符ulimit -Hn</li><li>sysctl内核网络参数优化</li></ul><ol start="4"><li>问题的根源在客户端为什么大量请求(短连接)又快速断开？</li></ol><ul><li>秒杀搞活动？ # 短连接 -&gt; 长连接keepalive</li><li><strong>CC攻击？</strong> # 网关限流</li></ul><h3 id="CLOSE-WAIT"><a href="#CLOSE-WAIT" class="headerlink" title="CLOSE_WAIT"></a>CLOSE_WAIT</h3><ol><li>四次挥手未完成。</li><li>客户端关闭连接之后服务器程序没有进一步发出ack信号。四次挥手腰斩。</li><li>有可能就是客户端连接关闭之后，程序里没有检测到，或者程序压根就忘记了这个时候需要关闭连接，于是这个资源就一直被程序占着。 # 服务端程序bug。</li></ol><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><p><a href="https://www.jianshu.com/p/9968b16b607e" target="_blank" rel="noopener">https://www.jianshu.com/p/9968b16b607e</a></p>]]></content>
    
    
    <categories>
      
      <category>DevOps</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TCP/IP</tag>
      
      <tag>TCP四次挥手</tag>
      
      <tag>CLOSE_WAIT</tag>
      
      <tag>TIME_WAIT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Golang - 对比Python高阶函数之MapReduce</title>
    <link href="/2017/08/30/golang-func-mapreduce/"/>
    <url>/2017/08/30/golang-func-mapreduce/</url>
    
    <content type="html"><![CDATA[<p>如果你读过Google的那篇大名鼎鼎的论文<a href="https://research.google.com/archive/mapreduce-osdi04.pdf" target="_blank" rel="noopener">“MapReduce: Simplified Data Processing on Large Clusters”</a>，你就能大概明白map/reduce的概念。</p><a id="more"></a><p><img src="https://for-boer-blog.oss-cn-beijing.aliyuncs.com/20201023172301.png?x-oss-process=style/blog-img-watermark" srcset="/img/loading.gif" alt=""></p><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">maps</span><span class="hljs-params">(f <span class="hljs-keyword">func</span>(<span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span>, <span class="hljs-title">nums</span> []<span class="hljs-title">int</span>) []<span class="hljs-title">int</span></span> &#123;<span class="hljs-keyword">var</span> ret = <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-built_in">len</span>(nums))<span class="hljs-keyword">for</span> i, n := <span class="hljs-keyword">range</span> nums &#123;ret[i] = f(n)&#125;<span class="hljs-keyword">return</span> ret&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f</span><span class="hljs-params">(x <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<span class="hljs-keyword">return</span> x + <span class="hljs-number">2</span>&#125;<span class="hljs-keyword">var</span> nums = []<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;fmt.Println(maps(f, nums))<span class="hljs-comment">// [3 4 5 6 7]</span></code></pre><p>VS</p><pre><code class="hljs python">map(<span class="hljs-keyword">lambda</span> x: x + <span class="hljs-number">2</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<span class="hljs-comment"># 注意：在python3中map()函数返回map object，而非python2直接返回list对象</span>list(map(<span class="hljs-keyword">lambda</span> x: x + <span class="hljs-number">2</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])) <span class="hljs-comment"># 转为list</span><span class="hljs-comment"># 3, 4, 5, 6, 7</span></code></pre><h3 id="Reduce"><a href="#Reduce" class="headerlink" title="Reduce"></a>Reduce</h3><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reduces</span><span class="hljs-params">(f <span class="hljs-keyword">func</span>(x, y <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span>, <span class="hljs-title">nums</span> []<span class="hljs-title">int</span>) <span class="hljs-title">int</span></span> &#123;<span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span><span class="hljs-keyword">for</span> _, n := <span class="hljs-keyword">range</span> nums &#123;sum = f(sum, n)&#125;<span class="hljs-keyword">return</span> sum&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f1</span><span class="hljs-params">(x, y <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<span class="hljs-keyword">return</span> x + y&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f2</span><span class="hljs-params">(x, y <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<span class="hljs-keyword">return</span> x*<span class="hljs-number">10</span> + y&#125;<span class="hljs-keyword">var</span> nums = []<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;fmt.Println(reduces(f1, nums))<span class="hljs-comment">// 15</span>fmt.Println(reduces(f2, nums))<span class="hljs-comment">// 12345</span></code></pre><p>VS</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<span class="hljs-comment"># 注意：在python3中reduce()函数已经不再是内置函数，而是放到了functools包下面</span>reduce(<span class="hljs-keyword">lambda</span> x, y: x + y, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<span class="hljs-comment"># 15</span>reduce(<span class="hljs-keyword">lambda</span> x, y: x * <span class="hljs-number">10</span> + y, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<span class="hljs-comment"># 12345</span></code></pre><h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><ul><li><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017329367486080" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/1016959663602400/1017329367486080</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Golang</tag>
      
      <tag>Go</tag>
      
      <tag>MapReduce</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Golang - 对比Python-Dict之Map</title>
    <link href="/2017/08/24/golang-map-methods/"/>
    <url>/2017/08/24/golang-map-methods/</url>
    
    <content type="html"><![CDATA[<p>接上文<code>slice</code>方法，本文对比python中的<code>dict</code>实现<code>map</code>的方法</p><p>文末有<code>彩蛋</code>，送道面试题，请在评论区附上你的答案…</p><a id="more"></a><ul><li>dict.clear() 删除字典中所有元素</li><li>dict.copy() 返回字典(浅复制)的一个副本</li><li>dict.get(key,default=None) 对字典dict中的键key,返回它对应的值value，如果字典中不存在此键，则返回default 的值(注意，参数- default 的默认值为None)</li><li>dict.has_key(key) 如果键(key)在字典中存在，返回True，否则返回False</li><li>dict.items() 返回一个包含字典中(键, 值)对元组的列表</li><li>dict.keys() 返回一个包含字典中键的列表</li><li>dict.values() 返回一个包含字典中所有值的列表</li><li>dict.pop(key[, default]) 和方法get()相似，如果字典中key 键存在，删除并返回dict[key]，如果key 键不存在，且没有给出default 的值，引发KeyError 异常。</li></ul><h3 id="clear-方法"><a href="#clear-方法" class="headerlink" title="clear()方法"></a>clear()方法</h3><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">clear</span><span class="hljs-params">(ms <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;)</span> <span class="hljs-title">map</span>[<span class="hljs-title">string</span>]<span class="hljs-title">interface</span></span>&#123;&#125; &#123;<span class="hljs-comment">// // Method - I , say book is name of map</span><span class="hljs-comment">// for k := range book &#123;</span><span class="hljs-comment">// delete(book, k)</span><span class="hljs-comment">// &#125;</span><span class="hljs-comment">// // Method - II</span><span class="hljs-comment">// book = make(map[string]int)</span><span class="hljs-comment">// // Method - III</span><span class="hljs-comment">// book = map[string]int&#123;&#125;</span>ms = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;)<span class="hljs-keyword">return</span> ms&#125;</code></pre><h3 id="copy-方法"><a href="#copy-方法" class="headerlink" title="copy()方法"></a>copy()方法</h3><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">copy</span><span class="hljs-params">(dst, src <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;)</span> <span class="hljs-title">map</span>[<span class="hljs-title">string</span>]<span class="hljs-title">interface</span></span>&#123;&#125; &#123;<span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> src &#123;dst[k] = v&#125;<span class="hljs-keyword">return</span> dst&#125;</code></pre><h3 id="haskey-方法"><a href="#haskey-方法" class="headerlink" title="haskey()方法"></a>haskey()方法</h3><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">haskey</span><span class="hljs-params">(ms <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;, key <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">bool</span></span> &#123;<span class="hljs-keyword">for</span> k := <span class="hljs-keyword">range</span> ms &#123;<span class="hljs-keyword">if</span> k == key &#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>&#125;&#125;<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>&#125;</code></pre><h3 id="keys-方法"><a href="#keys-方法" class="headerlink" title="keys()方法"></a>keys()方法</h3><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">keys</span><span class="hljs-params">(ms <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;)</span> []<span class="hljs-title">string</span></span> &#123;<span class="hljs-keyword">var</span> keys = []<span class="hljs-keyword">string</span>&#123;&#125;<span class="hljs-keyword">for</span> k := <span class="hljs-keyword">range</span> ms &#123;keys = <span class="hljs-built_in">append</span>(keys, k)&#125;<span class="hljs-keyword">return</span> keys&#125;</code></pre><h3 id="values-方法"><a href="#values-方法" class="headerlink" title="values()方法"></a>values()方法</h3><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">values</span><span class="hljs-params">(ms <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;)</span> []<span class="hljs-title">interface</span></span>&#123;&#125; &#123;<span class="hljs-keyword">var</span> values = []<span class="hljs-keyword">interface</span>&#123;&#125;&#123;&#125;<span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> ms &#123;values = <span class="hljs-built_in">append</span>(values, v)&#125;<span class="hljs-keyword">return</span> values&#125;</code></pre><h3 id="pop-方法"><a href="#pop-方法" class="headerlink" title="pop()方法"></a>pop()方法</h3><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">pop</span><span class="hljs-params">(ms <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;, key <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">interface</span></span>&#123;&#125; &#123;v := ms[key]<span class="hljs-keyword">if</span> v != <span class="hljs-literal">nil</span> &#123;<span class="hljs-built_in">delete</span>(ms, key)&#125;<span class="hljs-keyword">return</span> v&#125;</code></pre><h2 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h2><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">calc</span><span class="hljs-params">(x, y <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;fmt.Println(x, y, x+y)<span class="hljs-keyword">return</span> x + y&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span> &#123;a := <span class="hljs-number">1</span>b := <span class="hljs-number">2</span><span class="hljs-keyword">defer</span> calc(a, calc(a, b))a = <span class="hljs-number">0</span><span class="hljs-keyword">defer</span> calc(a, calc(a, b))&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Golang</tag>
      
      <tag>Go</tag>
      
      <tag>map</tag>
      
      <tag>hash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Golang - 对比Python-List之Slice</title>
    <link href="/2017/08/18/golang-slice-methods/"/>
    <url>/2017/08/18/golang-slice-methods/</url>
    
    <content type="html"><![CDATA[<p>Python中List列表的使用很方便, 内置电池插上就用, 堪比南孚聚能环</p><p>相比之下, Golang中Slice提供的内置方法就捉襟见肘了</p><p>然而, 习惯了Python动态语言提供的各种便利的内置方法, 对于Golang的静态语言, 自己实现这些方法反而不是那么信手拈来</p><p>下面我们通过对比Python来实现Golang中各个方法</p><a id="more"></a><p>方法汇总:</p><ul><li><code>clear</code></li><li><code>copy</code></li><li><code>append</code></li><li><code>extend</code></li><li><code>pop</code></li><li><code>index</code></li><li><code>count</code></li><li><code>insert</code></li><li><code>remove</code></li><li><code>reverse</code>/<code>reversed</code></li><li><code>sort</code>/<code>sorted</code></li><li><code>len</code></li><li><code>max</code>/<code>min</code></li><li><code>contains</code></li><li><code>join</code></li></ul><h3 id="clear-方法"><a href="#clear-方法" class="headerlink" title="clear()方法"></a>clear()方法</h3><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">clear</span><span class="hljs-params">(lst []<span class="hljs-keyword">int</span>)</span> []<span class="hljs-title">int</span></span> &#123;<span class="hljs-keyword">return</span> lst[:<span class="hljs-number">0</span>]&#125;<span class="hljs-keyword">var</span> nums = []<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;nums = clear(nums)fmt.Println(nums)<span class="hljs-comment">// []</span></code></pre><p>VS</p><pre><code class="hljs python">L = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]L.clear()print(L)<span class="hljs-comment"># []</span></code></pre><h3 id="copy-方法"><a href="#copy-方法" class="headerlink" title="copy()方法"></a>copy()方法</h3><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">myCopy</span><span class="hljs-params">(dst, src []<span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-built_in">copy</span>(dst, src)&#125;<span class="hljs-keyword">var</span> nums = []<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<span class="hljs-keyword">var</span> mums = <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-built_in">len</span>(nums), <span class="hljs-built_in">cap</span>(nums))_ = myCopy(mums, nums)fmt.Println(mums)<span class="hljs-comment">// [1 2 3 4 5]</span></code></pre><p>VS</p><pre><code class="hljs python">L1 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]L2 = L1.copy()print(L2)<span class="hljs-comment"># [1,2,3,4]</span></code></pre><h3 id="append-方法"><a href="#append-方法" class="headerlink" title="append()方法"></a>append()方法</h3><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">myAppend</span><span class="hljs-params">(lst []<span class="hljs-keyword">int</span>, el ...<span class="hljs-keyword">int</span>)</span> []<span class="hljs-title">int</span></span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-built_in">append</span>(lst, el...)&#125;<span class="hljs-keyword">var</span> nums = []<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;nums = myAppend(nums, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>)fmt.Println(nums)<span class="hljs-comment">// [1 2 3 4 5 6 7 8]</span></code></pre><p>VS</p><pre><code class="hljs python">L = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]L.append(<span class="hljs-number">4</span>)print(L)<span class="hljs-comment"># [1, 2, 3, 4]</span>L.appned([<span class="hljs-number">5</span>, <span class="hljs-number">6</span>])print(L)<span class="hljs-comment"># [1, 2, 3, 4, [5, 6]]</span></code></pre><h3 id="extend-方法"><a href="#extend-方法" class="headerlink" title="extend()方法"></a>extend()方法</h3><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">extend</span><span class="hljs-params">(dst, src []<span class="hljs-keyword">int</span>)</span> []<span class="hljs-title">int</span></span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-built_in">append</span>(dst, src...)&#125;<span class="hljs-keyword">var</span> nums = []<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;fmt.Printf(<span class="hljs-string">"%v, %v, %v, %p\n"</span>, nums, <span class="hljs-built_in">len</span>(nums), <span class="hljs-built_in">cap</span>(nums), nums)<span class="hljs-keyword">var</span> mums = []<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>&#125;nums = extend(nums, mums)fmt.Println(nums)fmt.Printf(<span class="hljs-string">"%v, %v, %v, %p\n"</span>, nums, <span class="hljs-built_in">len</span>(nums), <span class="hljs-built_in">cap</span>(nums), nums)<span class="hljs-comment">// [1 2 3 4 5], 5, 5, 0xc0000b4090</span><span class="hljs-comment">// [1 2 3 4 5 6 7 8]</span><span class="hljs-comment">// [1 2 3 4 5 6 7 8], 8, 10, 0xc0000a40f0</span><span class="hljs-comment">// !!! 注意两次打印Slice的len, cap, 内存地址的不同。</span><span class="hljs-comment">// 这也说明了Slice与Array的对应关系: </span><span class="hljs-comment">// 当前Array不能满足Slice容量时，会重新分配内存空间并复制数据</span></code></pre><p>VS</p><pre><code class="hljs python">L = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]A = [<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]L.extend(A)print(L)<span class="hljs-comment"># [1,2,3,4,5,6]</span><span class="hljs-comment"># !!! 该方法返回值为None，修改的是原列表</span></code></pre><h3 id="pop-方法"><a href="#pop-方法" class="headerlink" title="pop()方法"></a>pop()方法</h3><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">pop</span><span class="hljs-params">(lst []<span class="hljs-keyword">int</span>)</span> []<span class="hljs-title">int</span></span> &#123;<span class="hljs-keyword">return</span> lst[:<span class="hljs-built_in">len</span>(lst)<span class="hljs-number">-1</span>]&#125;<span class="hljs-keyword">var</span> nums = []<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;nums = pop(nums)fmt.Println(nums)<span class="hljs-comment">// [1 2 3 4]</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">myPop</span><span class="hljs-params">(lst []<span class="hljs-keyword">int</span>, i <span class="hljs-keyword">int</span>)</span> []<span class="hljs-title">int</span></span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-built_in">append</span>(lst[:i], lst[i+<span class="hljs-number">1</span>:]...)&#125;<span class="hljs-keyword">var</span> nums = []<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;nums = myPop(nums, <span class="hljs-number">2</span>)fmt.Println(nums)<span class="hljs-comment">// [1 2 4 5]</span></code></pre><p>VS</p><pre><code class="hljs python">L = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]print(L.pop())<span class="hljs-comment"># 5</span>print(L)<span class="hljs-comment"># [1,2,3,4]</span>L.pop(<span class="hljs-number">1</span>)print(L)<span class="hljs-comment"># [1,3,4]</span></code></pre><h3 id="index-方法"><a href="#index-方法" class="headerlink" title="index()方法"></a>index()方法</h3><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">index</span><span class="hljs-params">(lst []<span class="hljs-keyword">int</span>, el <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<span class="hljs-keyword">for</span> i, v := <span class="hljs-keyword">range</span> lst &#123;<span class="hljs-keyword">if</span> v == el &#123;<span class="hljs-keyword">return</span> i&#125;&#125;<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>&#125;</code></pre><h3 id="count-方法"><a href="#count-方法" class="headerlink" title="count()方法"></a>count()方法</h3><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">count</span><span class="hljs-params">(lst []<span class="hljs-keyword">int</span>, el <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;maps := <span class="hljs-keyword">map</span>[<span class="hljs-keyword">int</span>]<span class="hljs-keyword">int</span>&#123;&#125;<span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> lst &#123;<span class="hljs-keyword">if</span> v == el &#123;maps[el]++&#125;&#125;<span class="hljs-keyword">return</span> maps[el]&#125;</code></pre><h3 id="insert-方法"><a href="#insert-方法" class="headerlink" title="insert()方法"></a>insert()方法</h3><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">insert</span><span class="hljs-params">(lst []<span class="hljs-keyword">int</span>, el, i <span class="hljs-keyword">int</span>)</span> []<span class="hljs-title">int</span></span> &#123;lst = <span class="hljs-built_in">append</span>(lst[:i+<span class="hljs-number">1</span>], lst[i:]...)lst[i] = el<span class="hljs-keyword">return</span> lst&#125;</code></pre><h3 id="remove-方法"><a href="#remove-方法" class="headerlink" title="remove()方法"></a>remove()方法</h3><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">remove</span><span class="hljs-params">(lst []<span class="hljs-keyword">int</span>, el <span class="hljs-keyword">int</span>)</span> []<span class="hljs-title">int</span></span> &#123;<span class="hljs-keyword">for</span> i, v := <span class="hljs-keyword">range</span> lst &#123;<span class="hljs-keyword">if</span> v == el &#123;lst = <span class="hljs-built_in">append</span>(lst[:i], lst[i+<span class="hljs-number">1</span>:]...)<span class="hljs-keyword">break</span>&#125;&#125;<span class="hljs-keyword">return</span> lst&#125;</code></pre><h3 id="reverse-方法"><a href="#reverse-方法" class="headerlink" title="reverse()方法"></a>reverse()方法</h3><blockquote><p><a href="/2017/08/16/golang-slice-reverse/">更多方法, 请参考…</a></p></blockquote><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reverse</span><span class="hljs-params">(lst []<span class="hljs-keyword">int</span>)</span> []<span class="hljs-title">int</span></span> &#123;tmp := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-built_in">len</span>(lst), <span class="hljs-built_in">cap</span>(lst))<span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> lst &#123;tmp[i] = lst[<span class="hljs-built_in">len</span>(lst)-i<span class="hljs-number">-1</span>]&#125;<span class="hljs-keyword">return</span> tmp&#125;</code></pre><h3 id="sort-方法"><a href="#sort-方法" class="headerlink" title="sort()方法"></a>sort()方法</h3><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mySort</span><span class="hljs-params">(lst []<span class="hljs-keyword">int</span>)</span> []<span class="hljs-title">int</span></span> &#123;<span class="hljs-comment">// sort.Ints(lst)</span>sort.Sort(sort.Reverse(sort.IntSlice(lst)))<span class="hljs-keyword">return</span> lst&#125;</code></pre><h3 id="len-方法"><a href="#len-方法" class="headerlink" title="len()方法"></a>len()方法</h3><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">myLen</span><span class="hljs-params">(lst []<span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(lst)&#125;</code></pre><h3 id="max-方法"><a href="#max-方法" class="headerlink" title="max()方法"></a>max()方法</h3><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">myMax</span><span class="hljs-params">(lst []<span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;t := lst[<span class="hljs-number">0</span>]<span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> lst &#123;<span class="hljs-keyword">if</span> v &gt; t &#123;t = v&#125;&#125;<span class="hljs-keyword">return</span> t&#125;</code></pre><h3 id="min-方法"><a href="#min-方法" class="headerlink" title="min()方法"></a>min()方法</h3><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">myMin</span><span class="hljs-params">(lst []<span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;t := lst[<span class="hljs-number">0</span>]<span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> lst &#123;<span class="hljs-keyword">if</span> v &lt; t &#123;t = v&#125;&#125;<span class="hljs-keyword">return</span> t&#125;</code></pre><h3 id="contains-方法-gt-对比JAVA"><a href="#contains-方法-gt-对比JAVA" class="headerlink" title="contains()方法 -&gt; 对比JAVA"></a>contains()方法 -&gt; 对比JAVA</h3><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">contains</span><span class="hljs-params">(lst []<span class="hljs-keyword">int</span>, el <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">bool</span></span> &#123;<span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> lst &#123;<span class="hljs-keyword">if</span> v == el &#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>&#125;&#125;<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>&#125;</code></pre><h3 id="join-方法"><a href="#join-方法" class="headerlink" title="join()方法"></a>join()方法</h3><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">join</span><span class="hljs-params">(nums []<span class="hljs-keyword">int</span>)</span> <span class="hljs-title">string</span></span> &#123;<span class="hljs-keyword">var</span> numsText = []<span class="hljs-keyword">string</span>&#123;&#125;<span class="hljs-keyword">for</span> _, n := <span class="hljs-keyword">range</span> nums &#123;text := strconv.Itoa(n)numsText = <span class="hljs-built_in">append</span>(numsText, text)&#125;res := strings.Join(numsText, <span class="hljs-string">"+"</span>)<span class="hljs-keyword">return</span> res&#125;</code></pre><h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><p><a href="https://blog.golang.org/slices-intro" target="_blank" rel="noopener">Go Slices: usage and internals</a><br><a href="https://www.jianshu.com/p/50da60d54a14" target="_blank" rel="noopener">python list中的方法和函数</a></p>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Golang</tag>
      
      <tag>Python</tag>
      
      <tag>Slice</tag>
      
      <tag>List</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Golang - 切片逆序遍历的几种方法</title>
    <link href="/2017/08/16/golang-slice-reverse/"/>
    <url>/2017/08/16/golang-slice-reverse/</url>
    
    <content type="html"><![CDATA[<p>本文记录几种<code>slice</code>遍历的方法，涉及知识点有：<code>slice</code>, <code>for</code>, <code>range</code>, <code>defer</code>, <code>闭包(closure)</code>, <code>channel</code></p><a id="more"></a><pre><code class="hljs go"><span class="hljs-comment">// main.go</span><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;t()&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">t</span><span class="hljs-params">()</span></span> &#123;<span class="hljs-keyword">var</span> nums = []<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<span class="hljs-comment">// 顺序1</span><span class="hljs-keyword">for</span> _, n := <span class="hljs-keyword">range</span> nums &#123;fmt.Println(n)&#125;<span class="hljs-comment">// 顺序2, 一般不这样吧</span><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(nums); i++ &#123;fmt.Println(nums[i])&#125;<span class="hljs-comment">// 逆序1, 普通程序员</span><span class="hljs-keyword">for</span> i := <span class="hljs-built_in">len</span>(nums) - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i-- &#123;fmt.Println(nums[i])&#125;<span class="hljs-comment">// 逆序2, nice简洁、赞</span><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> nums &#123;fmt.Println(nums[<span class="hljs-built_in">len</span>(nums)-i<span class="hljs-number">-1</span>])&#125;<span class="hljs-comment">// 逆序3, channel实现</span><span class="hljs-keyword">for</span> n := <span class="hljs-keyword">range</span> reverse(nums) &#123;fmt.Println(n)&#125;<span class="hljs-comment">// 逆序4, defer实现, 不是一般程序员</span><span class="hljs-keyword">for</span> _, n := <span class="hljs-keyword">range</span> nums &#123;<span class="hljs-keyword">defer</span> fmt.Println(n)&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reverse</span><span class="hljs-params">(lst []<span class="hljs-keyword">int</span>)</span> <span class="hljs-title">chan</span> <span class="hljs-title">int</span></span> &#123;ret := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)<span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> lst &#123;ret &lt;- lst[<span class="hljs-built_in">len</span>(lst)<span class="hljs-number">-1</span>-i]&#125;<span class="hljs-built_in">close</span>(ret)&#125;()<span class="hljs-keyword">return</span> ret&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Golang</tag>
      
      <tag>Go</tag>
      
      <tag>Slice</tag>
      
      <tag>reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RPM包制作工具FPM介绍</title>
    <link href="/2016/07/07/fpm-rpm-build/"/>
    <url>/2016/07/07/fpm-rpm-build/</url>
    
    <content type="html"><![CDATA[<p>本文记录rpm包制作工具<a href="https://github.com/jordansissel/fpm" target="_blank" rel="noopener">fpm</a>的使用笔记，分别记录了制作<code>filebeat</code>, <code>osquery</code>, <code>fastdfs</code>包的过程。</p><a id="more"></a><h3 id="filebeat7"><a href="#filebeat7" class="headerlink" title="filebeat7"></a>filebeat7</h3><pre><code class="hljs bash"><span class="hljs-comment"># cd tmp_install;rpm2cpio ../filebeat-5.5.2-x86_64.rpm | cpio -div  # 解压rpm包</span><span class="hljs-comment"># -p NAME-VERSION-ARCH.rpm \</span>hostname Boer-RPMfpm -s dir -t rpm -n boer-filebeat -v 7.1.1 \--verbose --iteration 1 \-m boer@boer.xyz \--vendor <span class="hljs-string">"Boer RPM"</span> \--after-install after_install.sh \-C tmp_install .hostnamectl <span class="hljs-built_in">set</span>-hostname VM_140_39after_install.shIP=`ip -4 route get 8.8.8.8 | awk <span class="hljs-string">'&#123;print $7&#125;'</span> | tr -d <span class="hljs-string">'\n'</span>`<span class="hljs-comment"># IP=$(grep IPADDR /etc/sysconfig/network-scripts/ifcfg-bond?|cut -d '=' -f 2)</span>sed -i <span class="hljs-string">"s/ipv4address/<span class="hljs-variable">$IP</span>/"</span> /etc/filebeat7/filebeat.ymlver=`cat /etc/redhat-release`<span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$ver</span> =~ <span class="hljs-string">"release 7"</span> ]];<span class="hljs-keyword">then</span>  /usr/bin/systemctl daemon-reload  /usr/bin/systemctl start filebeat7  /usr/bin/systemctl <span class="hljs-built_in">enable</span> filebeat7<span class="hljs-keyword">else</span>  /sbin/chkconfig filebeat7 on  service filebeat7 start<span class="hljs-keyword">fi</span></code></pre><h3 id="osquery"><a href="#osquery" class="headerlink" title="osquery"></a>osquery</h3><pre><code class="hljs bash">fpm -s dir -t rpm -n osquery -v 3.3.2 -m boer@boer.xyz \-p NAME-VERSION-ARCH.rpm \--after-install after_install.sh \--after-remove after_remove.sh \-C tmp_install \.after_install.sh<span class="hljs-built_in">echo</span> <span class="hljs-string">'export PATH=$PATH:/opt/osquery/usr/bin #deltag:uuid:c99326b5-2b9d-401f-87fb-b3b7cedcf3d5'</span> &gt;&gt; /etc/profile<span class="hljs-built_in">source</span> /etc/profileafter_remove.shrm -rf /opt/osquerysed -i <span class="hljs-string">'/^export.*\#deltag:uuid:c99326b5-2b9d-401f-87fb-b3b7cedcf3d5/d'</span> /etc/profile<span class="hljs-built_in">source</span> /etc/profile</code></pre><h3 id="fastdfs"><a href="#fastdfs" class="headerlink" title="fastdfs"></a>fastdfs</h3><pre><code class="hljs bash"><span class="hljs-comment"># libfastcommon</span>./make.sh./make.sh install DESTDIR=../tmp_installfpm -s dir -t rpm -n libfastcommon -v 1.0.7 -C tmp_install usr<span class="hljs-comment"># FastDFS</span>vim make.shDESTDIR=/srv/boer/fpm_rpm/fastdfs/FastDFS/tmp_install./make.sh./make.sh installfpm -s dir -t rpm -n fastdfs -v 5.0.8 -d <span class="hljs-string">'libfastcommon'</span> -C tmp_install .<span class="hljs-comment"># nginx</span>./configure --prefix=/opt/nginx --sbin-path=/opt/nginx/sbin/nginx --conf-path=/opt/nginx/conf/nginx.conf --error-log-path=/home/finance/Logs/nginx/error.log --http-log-path=/home/finance/Logs/nginx/access.log --pid-path=/opt/nginx/var/nginx.pid --lock-path=/opt/nginx/var/nginx.lock --http-client-body-temp-path=/dev/shm/nginx_temp/client_body --http-proxy-temp-path=/dev/shm/nginx_temp/proxy --http-fastcgi-temp-path=/dev/shm/nginx_temp/fastcgi --user=finance --group=finance --with-cpu-opt=pentium4F --without-select_module --without-poll_module --with-http_realip_module --with-http_sub_module --with-http_gzip_static_module --with-http_stub_status_module --without-http_ssi_module --without-http_userid_module --without-http_ssi_module --without-http_userid_module --without-http_geo_module --without-http_map_module --without-mail_pop3_module --without-mail_imap_module --without-mail_smtp_module --with-http_ssl_module --add-module=../fastdfs-nginx-module/srcmakemake install DESTDIR=/srv/boer/fpm_rpm/fastdfs/nginx-1.12.0/tmp_installfpm -s dir -t rpm -n nginx-with-fastdfs -v 1.12.0 -C tmp_install .</code></pre><h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><h5 id="Q"><a href="#Q" class="headerlink" title="Q"></a>Q</h5><pre><code class="hljs bash">./configure --prefix=***make install --prefix=***make install DESTDIR=***</code></pre><h5 id="A"><a href="#A" class="headerlink" title="A"></a>A</h5><p>Number 2 is simply an error as far as I know.</p><p>Number 1 determines where the package will go when it is installed, and where it will look for its associated files when it is run. It’s what you should use if you’re just compiling something for use on a single host.</p><p>Number 3 is for installing to a temporary directory which is not where the package will be run from. For example this is used when building deb packages. The person building the package doesn’t actually install everything into its final place on his own system. He may have a different version installed already and not want to disturb it, or he may not even be root. So he uses configure –prefix=/usr so the program will expect to be installed in /usr when it runs, then make install DESTDIR=debian/tmp to actually create the directory structure.</p><h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><ul><li><a href="https://github.com/jordansissel/fpm" target="_blank" rel="noopener">https://github.com/jordansissel/fpm</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>DevOps</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RPM</tag>
      
      <tag>FPM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>致我的2012</title>
    <link href="/2012/12/31/for-my2012/"/>
    <url>/2012/12/31/for-my2012/</url>
    
    <content type="html"><![CDATA[<p>那些回顾2012，展望2013的话，留给席主习，理总李去说吧！</p><p>开始，应该是从2月11日开始的，有火车票为证；<br>学生生涯的真正结束，应该是在2月27日，有汽车票为证；<br>职员生涯的艰难开始，应该是在3月16日，有工资条为证；<br>结束，2012的结束，毋庸置疑的今天，时间为证。</p><a id="more"></a><p>开始的第一站，当然还是学校。<br>呼吸寝室的各种“味道”；<br>办理学校的各种手续；<br>依恋基友的各种难舍；<br> 享受学校最后的温暖。</p><p>找工作的那段时间是最艰难的。<br>起初是和很多人住很廉价的旅馆，不大的床竟然能睡3个男人。<br>在所难免的被老板发现，……也就当然，时日不多。<br>找了个“难民营”，不夸张的说，拉登当初如果逃那儿，<br>也不至于被爆头—-一个被拆迁的只剩下一栋房子矗在那里，<br>墙上到处写着“谁要拆我房，我就………………”很显然“钉子户”。<br>还好有水、有点、有老鼠。<br>初春三月，重庆的天气还是有那么一点小冷，晚上冷的蜷成一团的时候，<br> 老鼠们还出来幸灾乐祸。</p><p>找工作难，找好工作更难。<br>要你的，你不想去；想去的，人不要你。<br>好不容易找个我想去，人家也要我的，第一天上班就被外派到区县（黔江：一个三面环山，倍儿压抑的区），一待就是四十多天。<br>由于刚开始经验的匮乏，使得工作压力很大。<br>不过还好的是吃遍了黔江各地特色风味，足迹踏遍了黔江的各个乡镇（有些地方一辈子可能就去一次）。</p><p>最后的工作性质“你要明白你的身份，就一打杂的”，本少怎能忍受你这般羞辱，毅然决然的离开，至从事现在的工作。</p><p>（……因当下工作尚未结束，所以，不加以任何评述，以待后续……）</p><p>从5月10日起，住进这里，认识的男男女女，老老少少，各个行业之人，都将成为鄙人毕生之财富。吾曾有言“日租公寓，<br> 一抹江湖情”实乃贴切之至也！江湖之快乐，岂非尔等世外之人真知耳？快哉！乐哉！</p><p>2012后半载的快乐是以数月之积苦为付出的，就像IMBA成就“狗急跳墙”，亦如佛家之言“苦尽甘来”。</p><p>2012，我22，真是好2好2，哈哈哈哈！！！！！！</p>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>2012</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>写给那些女生</title>
    <link href="/2012/06/14/for-the-girl/"/>
    <url>/2012/06/14/for-the-girl/</url>
    
    <content type="html"><![CDATA[<p>人，总是在快乐的时候<br>忘记时间<br>不知道是哪一天，她们来了<br>不知不觉的走进了我平淡无奇的生活</p><a id="more"></a><p>作为一个计算机专业科班出身的我<br>对SOHO网络还是小有手段的<br>于是，与她们成功的搭讪<br>此后，本为路人甲与乙的我们<br>便“一发不可收拾”</p><p>……<br>聊天<br>……<br>吃饭<br>……<br>打球<br>……<br>等等等等</p><p>今天，她们走了<br>像她们一如既往的来<br>只是，带走的……？？？<br>太多太多……</p><p>十天，<br>十天的时间太长<br>长到足以让你厌恶一个人<br>十天的时间太短<br>短到让你无法了解真实的彼此</p><p>还有，<br>这段时间我真的很快乐<br>我会<br>把这段时间放在我记忆<br>最深处的</p><hr><p>由于感冒，思絮飘零，草草写下此数言，一来作为对几位姑娘的留恋，二来记录下这段快乐的时光，仅此而已。<br> ———2012.6.14于办公室</p>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>2012</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大学，梦起航</title>
    <link href="/2012/05/26/the-university-the-dream/"/>
    <url>/2012/05/26/the-university-the-dream/</url>
    
    <content type="html"><![CDATA[<h3 id="写在最前面"><a href="#写在最前面" class="headerlink" title="写在最前面"></a>写在最前面</h3><p>开头。这是真正的开头。写什么？怎么写？第一章，第一自然段，第一句话，第一个字，一切都是神圣的，似乎是一个生死存亡的</p><p>问题而令人难以选择，令人战战兢兢。</p><a id="more"></a><p>……</p><p>现在，平静地坐下来。</p><p>于是，顺利地开始了。</p><p>———路遥《早晨从中午开始》</p><p>一九七五年二、三月间，一个平平常常的日子，细蒙蒙的雨丝夹着一星半点的雪花，正纷纷淋淋地向大地飘洒着。时令已快到惊蛰</p><p>，雪当然再不会存留，往往还没等落地，就已经消失得无踪无影了。黄土高原严寒而漫长的冬天看来就要过去，但那真正温暖的春</p><p>天还远远地没有到来。</p><p>———路遥《平凡的世界》</p><h3 id="2334"><a href="#2334" class="headerlink" title="2334"></a>2334</h3><p>我不知道它为什么会顺序排列<br>也不知道它为什么会中间重复<br>总之</p><p>我牢牢的记住了这个数字———一列绿皮车的车次</p><p>那是我第一次坐火车</p><p>那是我第一次离家那么远</p><p>那是我第一次上大学</p><h3 id="20080915"><a href="#20080915" class="headerlink" title="20080915"></a>20080915</h3><p>不知道什么原因<br>我对这个时间记忆犹为清晰<br>所以<br>也就将它定义为大学开始的时间<br>其实<br>实际时间应该是要早于这个时间<br> 但，好像又忘却了</p><h3 id="608"><a href="#608" class="headerlink" title="608"></a>608</h3><p>一个多么好的数字<br>0 . 开始<br>6 . 顺利<br>8 . 发展</p><p>这是我大学第一间寝室号码<br>在那拥挤的空间里<br> 我开始慢慢习惯9分月重庆那特有的潮热的天气</p><h3 id="军训"><a href="#军训" class="headerlink" title="军训"></a>军训</h3><p>大学，第一堂课“军训”</p><p>大家都有同样的装扮<br>同样的狼狈———汗流浃背<br>分不出美女与帅哥<br>所以<br>你想提前下手似乎是不可能的</p><p>然而，对于第一堂课，我是很惭愧的，出于某种原因，没有参加。<br>但是，军训场地的氛围还是感受过的。</p><h3 id="大一"><a href="#大一" class="headerlink" title="大一"></a>大一</h3><p>还算乖巧的我们还算听话，每次上课宽敞的教室多少有点燥热。<br> 至于课程嘛！也就那不痛不痒的《近现代史纲要》、《马哲》等等之类的。</p><p>那会儿寝室的电脑寥寥无几。<br>所以，活动时间还是有的。<br>社团、协会，偶尔上个课，开个会什么的，还是挺看重的。<br> 至于，后来嘛！呵呵……</p><p>那一年，是最难熬的。<br>语言，饮食，环境，甚至文化。<br> 都需要去习惯。</p><p>那时的寝室站在阳台上就能看到高速公路。每次看到呼啸而过的大巴，一种家的思念，油然而生，涌上心头，久久不能平复。</p><p>那一年，我很傻。</p><h3 id="大二"><a href="#大二" class="headerlink" title="大二"></a>大二</h3><p>我们聚集了一帮子“死党”，有个伟大的代号“306”。</p><p>最安逸的时光是在熄灯之后的半把个小时里。</p><p>我们最高尚的话题是“谈谈中国近五十年的发展”；<br> 最低俗的话题是“关于辣椒皮皮的种种”；</p><p>最MAN的话题是“游历金庸武侠的画卷”；<br> 最八卦的话题是“仓老师、凤姐之流的”。</p><p>那一年<br> 我微弱的尝试了一下“爱情”的味道，苦涩与美好交织；</p><p>那一年<br>我们换了辅导员。那天，我写道“多好的阳光！突然，换辅导员了。（晴天霹雳） 期待吧！…”；</p><p>那一年<br>我参加了计算机技术与软件专业技术资格(水平)考试———网络工程师（中级）考试。没过，差得很远……</p><p>那一年，很复杂。</p><h3 id="大三"><a href="#大三" class="headerlink" title="大三"></a>大三</h3><p>有了那样一群“死党”的陪伴，时间恍惚，都似乎忘记了大三是怎么开始的。<br>噢！对了，我们的代号换了“209”，这可以促使一下记忆。</p><p>我们继续保持着大二的优良作风，睡前探讨半小时。</p><p>紧要的不紧要的，<br>有关的无关的，<br>天上的人家的，<br>过去的将来的。</p><p>那一年<br>我们有一个神奇的老师“从A到Z，二十四个英文字母中……”<br>我百思不得其解。敢问老师，那两个字母是S和B吗？</p><p>那一年<br>我又一次参加了计算机技术与软件专业技术资格(水平)考试———网络工程师（中级）考试。<br>不出意料的通过还是让我HI了那么一阵子的。</p><p>就这样沉浸在胜利的快乐中，度过了那一年。</p><p>那一年，很快乐。</p><h3 id="大四"><a href="#大四" class="headerlink" title="大四"></a>大四</h3><p>由于某种原因<br>我差点脱离了我的组织“124”<br>不过<br>经过殊死的挣扎，我还是以“无尚的崇高”回归了组织。<br> 再次的“回归”让我的压力更大，更加迷茫。</p><p>那时间也是最宅的，一日“两餐”几乎都是由“基友”代劳的。<br>DOTA，DOTA，依然DOTA。<br> 似乎，也只有在游戏的厮杀中得以解脱，实现忘我。</p><p>然而，也不是什么都没做。<br> 但是，现在看来，当时的想法、做法都是那么盲目。</p><p>那一年，很短暂。</p><p>那一年，很迷茫。</p><h3 id="本初"><a href="#本初" class="headerlink" title="本初"></a>本初</h3><p>大学目标有四“毕业证，职业资格认证，英语，女友”。<br> 大学时日已尽，目标对半实现，实感惭愧。</p><p>如此的只言片语只能是记忆的片段。</p><p>有此想法，已有许久。<br>今日，<br>突发感想，迫不及待，写下此篇，以励日后。</p><p>———— 2012年5月26日于重庆·歇台子</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>“这第一碗酒，朕要敬给太皇太后孝庄，敬给列祖列宗的在天之灵。朕八岁丧父，九岁丧母，是孝庄太后带着朕，冲破千难险阻，</p><p>才有今天的大清盛世!孝庄太后，朕想你啊。”</p><p>“还有这第二碗酒，朕要敬给列位臣工，敬给天下子民，敬给今天赴宴的 老同年们!六十年来，是你们辅佐朕，保国平安，你们俯</p><p>首农桑，致使大清的百业兴旺。君、臣、民，三者同德呀！没有你们，记着便没有今日的大清。朕在这儿谢谢你们了。”</p><p>“这第三碗酒啊，朕要敬给朕的死敌们。鳌拜，吴三桂，嘿！郑经，噶尔丹，噢，还有那个朱三太子。他们都是英雄豪杰啊，他们</p><p>造就了朕!他们逼着朕立下了这丰功伟业。朕恨他们，也敬他们。可惜呀，他们都死了，朕寂莫啊!……朕不祝他们死的安宁，祝</p><p>他们，来生再世再与朕为敌吧！”</p><p>———二月河《康熙王朝》</p>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>2012</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
